os
#import io

#if Windows
(
    STD_INPUT_HANDLE  :: @u32 -10;
    STD_OUTPUT_HANDLE :: @u32 -11;
    STD_ERROR_HANDLE  :: @u32 -12;
    INVALID_HANDLE_VALUE :: @?* @u64 -1;

    CP_UTF7 :: @u32 65000;      // UTF-7 translation
    CP_UTF8 :: @u32 65001;      // UTF-8 translation

    MEM_COMMIT  :: @u32 0x00001000;
    MEM_RESERVE :: @u32 0x00002000; 
    MEM_RELEASE :: @u32 0x00008000;


    PAGE_NOACCESS          :: @u32 0x001;
    PAGE_READONLY          :: @u32 0x002;
    PAGE_READWRITE         :: @u32 0x004;
    PAGE_WRITECOPY         :: @u32 0x008;
    PAGE_EXECUTE           :: @u32 0x010;
    PAGE_EXECUTE_READ      :: @u32 0x020;
    PAGE_EXECUTE_READWRITE :: @u32 0x040;
    PAGE_EXECUTE_WRITECOPY :: @u32 0x080;
    PAGE_GUARD             :: @u32 0x100;
    PAGE_NOCACHE           :: @u32 0x200;
    PAGE_WRITECOMBINE      :: @u32 0x400;

    WriteFile :: fn #foreign(hFile: *, lpBuff: *, nBytesToWrite: u32, lpBytesWritten: *u32, lpOverlapped: ?*) -> bool;
    GetStdHandle :: fn #foreign(Handle: u32) -> ?*;
    ExitProcess :: fn #foreign(ExitCode: u32);
    SetConsoleOutputCP :: fn #foreign(code_page: u32) -> i32; // win32 bool
    VirtualAlloc :: fn #foreign(addr: ?*, size: uint, type: u32, protect: u32) -> ?*;
    VirtualFree :: fn #foreign(addr: ?*, size: uint, type: u32) -> bool;
    ReadConsoleA :: fn #foreign(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: u32, lpNumberOfCharsRead: *u32, pInputControl: ?*) -> bool;

    abort :: fn() {
        ExitProcess(1);
        return;
    }

    assert :: fn(cond: bool, reason: string) {
        if(!cond) {
            header := "Assert Failed!\n";
            print(header.data, @u32 header.count);
            print(reason.data, @u32 reason.count);
            abort();
        }
    }

    print :: fn(data: *u8, count: u32) {
        SetConsoleOutputCP(CP_UTF8);
        handle := GetStdHandle(STD_OUTPUT_HANDLE);
        written: u32;
        if (handle != null) && (handle != INVALID_HANDLE_VALUE) {
            WriteFile(?handle, data, count, &written, null);
        }
    }

	alloc :: fn(size: int) -> ?* {
        return VirtualAlloc(null, @uint size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
    }

	free :: fn(ptr: *) {
        VirtualFree(ptr, 0, MEM_RELEASE);
    }

    struct CONSOLE_READCONSOLE_CONTROL {
        nLength: u32,
        nInitialChars: u32,
        dwCtrlWakeupMask: u32,
        dwControlKeyState: u32,
    }

    read_stdin_line :: fn(buffer: *, size: u32) -> u32 {
        handle := GetStdHandle(STD_INPUT_HANDLE);
        control := CONSOLE_READCONSOLE_CONTROL {
            dwCtrlWakeupMask = (1 << '\n'),
        };

        if handle == null {
            return 0;
        }

        read := @u32 0;
        if ReadConsoleA(?handle, buffer, size, &read, &control) == false {
            return 0;
        }

        as_chars := @*u8 buffer;

        // remove /r/n
        as_chars[read-2] = 0;
        return read - 2;
    }
)

#if Unix
(
	SYS_read   :: 0;
	SYS_write  :: 1;
	SYS_open   :: 2;
	SYS_mmap   :: 9;
	SYS_munmap :: 11;

	_system_call :: fn #foreign(number: int, args: ...) -> int;
	print :: fn(data: *u8, count: u32) {
		_system_call(SYS_write, 1, data, count);
	}
	
	struct AllocCtx {
		size: int
	}

	PROT_READ  :: 0x1;
	PROT_WRITE :: 0x2;
	PROT_EXEC  :: 0x4;
	PROT_NONE  :: 0x0;

	MAP_SHARED		:: 0x00001;
	MAP_PRIVATE		:: 0x00002;
	MAP_ANONYMOUS	:: 0x00020;
	MAP_ANON		:: 0x00020;
	MAP_NORESERVE	:: 0x04000;

	alloc :: fn(size: int) -> ?* {
		myb_ctx := @?*AllocCtx _system_call(SYS_mmap,
		null,						// Address
		size + size_of AllocCtx,	// Size
		PROT_READ | PROT_WRITE,		// Prot
		MAP_PRIVATE | MAP_ANON | MAP_NORESERVE,	// Flags
		-1,							// FD
		0);							// Offset
        if myb_ctx == null {
            return null;
        }

        ctx := ?myb_ctx;
		
		ctx.size = size + size_of AllocCtx;
		return ctx + 1;
	}

	free :: fn(ptr: *) {
		ctx := (@*AllocCtx ptr) - 1;
		_system_call(SYS_munmap, ctx, ctx.size);
	}

)

