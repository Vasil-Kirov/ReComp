module build

c :: #import compile;
#import io;
#import os;
arr :: #import array;
#import mem;
_ :: #import str;

//#load_system_dl "libSDL3.so"

puts :: fn #foreign(str: *u8);

// @BUG
// my_fff :: fn() -> i32 { return 4; }
// 
// enum v {
// 	A = my_fff(),
// }

struct TwoPtrs {
	a: int,
	b: int,
}

get_thing :: fn(a: TwoPtrs) {
	io.println("F: %", a.a + a.b);
}

INT :: 10;

foo :: fn() -> i32 {
	b := create_builder(&mem.temp_alloc);
	return 10;
}

compile :: fn() -> c.CompileInfo {
	out := c.CompileInfo {
		 //files = []string { "../file1.rcp", "../file2.rcp", "../file3.rcp" },
         source_dirs = []string { "../" },
		 files = []string { "file1.rcp" },
		 opt = 0,
		 //flags = .DebugInfo | .SanAddress,
		 flags = .Standalone /*| .SanAddress*/ | .DebugInfo/*| .NoStdLib*/,
		 //flags = (.SanAddress | .DebugInfo | .Standalone),
		 arch = .x86,
		 internals_file = "dummy_internals.rcp",
		 link = "/SUBSYSTEM:console",
		 target_triple = "i686-pc-windows-msvc",
		 //entry_point = "start",
	 };

	 //puts(c"foo");

	 //for f in out.files {
	 //    io.println("Compiling file: %", f);
	 //}

	 //enum_ := (#info c.CompileFlag).t.enum_;
	 //io.println("Name: %", enum_.name);
	 //for it in enum_.members {
	 //    io.println("name: %, value: %", it.name, it.value);
	 // }
	 //io.println("flag: %", c.CompileFlag.DebugInfo);


	 return out;
}

after_link :: fn(objs: []string) {
	for obj in objs {
		io.println(obj);
	}
}

