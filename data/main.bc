; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!Foo" = type { [1024 x ptr] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!sum"(i32 %0, i32 %1) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata i32 %0, metadata !9, metadata !DIExpression()), !dbg !10
  call void @llvm.dbg.value(metadata i32 %1, metadata !11, metadata !DIExpression()), !dbg !10
  %2 = add i32 %0, %1, !dbg !12
  ret i32 %2, !dbg !12
}

define i32 @"__main!main"() !dbg !13 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !16
  %1 = alloca [1024 x ptr], align 8, !dbg !16
  %2 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 8192, i1 false), !dbg !16
  call void @llvm.dbg.declare(metadata ptr %0, metadata !17, metadata !DIExpression()), !dbg !16
  %3 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !25
  %4 = getelementptr [1024 x ptr], ptr %3, i64 0, i64 513, !dbg !25
  store ptr @"__main!sum", ptr %4, align 8, !dbg !25
  %5 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !26
  %6 = getelementptr [1024 x ptr], ptr %5, i64 0, i64 513, !dbg !26
  %7 = load ptr, ptr %6, align 8, !dbg !26
  %8 = call i32 %7(i32 3, i32 -3), !dbg !26
  ret i32 %8, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "sum", linkageName: "__main!sum", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7, !7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocalVariable(name: "a", scope: !4, file: !1, line: 7, type: !7)
!10 = !DILocation(line: 7, scope: !4)
!11 = !DILocalVariable(name: "b", arg: 1, scope: !4, file: !1, line: 7, type: !7)
!12 = !DILocation(line: 8, scope: !4)
!13 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 11, type: !14, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!14 = !DISubroutineType(types: !15)
!15 = !{!7}
!16 = !DILocation(line: 12, scope: !13)
!17 = !DILocalVariable(name: "foo", scope: !13, file: !1, line: 12, type: !18)
!18 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 65536, elements: !19)
!19 = !{!20}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, baseType: !21, size: 65536, align: 64)
!21 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 65536, align: 64, elements: !23)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(i32, i32) -> i32", baseType: !5, size: 64, align: 64, dwarfAddressSpace: 0)
!23 = !{!24}
!24 = !DISubrange(count: 1024, lowerBound: 0)
!25 = !DILocation(line: 13, scope: !13)
!26 = !DILocation(line: 15, scope: !13)
