; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!SFloat" = type { float, float }
%"__init!ArgList" = type { i64, ptr }
%"__init!Arg" = type { i64, ptr }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i64 @"__main!something"(<2 x float> %0) !dbg !4 {
block_0:
  %1 = alloca %"__main!SFloat", align 8, !dbg !13
  store <2 x float> %0, ptr %1, align 8, !dbg !13
  call void @llvm.dbg.value(metadata ptr %1, metadata !14, metadata !DIExpression()), !dbg !13
  %2 = load i64, ptr %1, align 8, !dbg !15
  ret i64 %2, !dbg !15
}

define i64 @"__main!sum"(ptr %0) !dbg !16 {
block_0:
  %1 = alloca i64, align 8, !dbg !20
  %2 = alloca i64, align 8, !dbg !21
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false), !dbg !20
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !21
  call void @llvm.dbg.value(metadata ptr %0, metadata !22, metadata !DIExpression()), !dbg !35
  call void @llvm.dbg.declare(metadata ptr %0, metadata !36, metadata !DIExpression()), !dbg !37
  store i64 0, ptr %1, align 8, !dbg !20
  call void @llvm.dbg.declare(metadata ptr %1, metadata !38, metadata !DIExpression()), !dbg !20
  store i64 0, ptr %2, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %2, metadata !40, metadata !DIExpression()), !dbg !21
  br label %block_1, !dbg !21

block_1:                                          ; preds = %block_3, %block_0
  %3 = load i64, ptr %2, align 8, !dbg !21
  %4 = getelementptr inbounds %"__init!ArgList", ptr %0, i32 0, i32 0, !dbg !21
  %5 = load i64, ptr %4, align 8, !dbg !21
  %6 = icmp slt i64 %3, %5, !dbg !21
  br i1 %6, label %block_2, label %block_4, !dbg !21

block_2:                                          ; preds = %block_1
  %7 = getelementptr inbounds %"__init!ArgList", ptr %0, i32 0, i32 1, !dbg !41
  %8 = load ptr, ptr %7, align 8, !dbg !41
  %9 = load i64, ptr %2, align 8, !dbg !41
  %10 = getelementptr %"__init!Arg", ptr %8, i64 %9, !dbg !41
  %11 = getelementptr inbounds %"__init!Arg", ptr %10, i32 0, i32 0, !dbg !41
  %12 = load i64, ptr %11, align 8, !dbg !41
  %13 = icmp eq i64 %12, 15, !dbg !41
  br i1 %13, label %block_5, label %block_6, !dbg !41

block_5:                                          ; preds = %block_2
  %14 = load i64, ptr %1, align 8, !dbg !42
  %15 = getelementptr inbounds %"__init!ArgList", ptr %0, i32 0, i32 1, !dbg !42
  %16 = load ptr, ptr %15, align 8, !dbg !42
  %17 = load i64, ptr %2, align 8, !dbg !42
  %18 = getelementptr %"__init!Arg", ptr %16, i64 %17, !dbg !42
  %19 = getelementptr inbounds %"__init!Arg", ptr %18, i32 0, i32 1, !dbg !42
  %20 = load ptr, ptr %19, align 8, !dbg !42
  %21 = load i64, ptr %20, align 8, !dbg !42
  %22 = add i64 %14, %21, !dbg !42
  store i64 %22, ptr %1, align 8, !dbg !42
  br label %block_7, !dbg !42

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !42

block_7:                                          ; preds = %block_6, %block_5
  br label %block_3, !dbg !42

block_3:                                          ; preds = %block_7
  %23 = load i64, ptr %2, align 8, !dbg !42
  %24 = add i64 %23, 1, !dbg !42
  store i64 %24, ptr %2, align 8, !dbg !42
  %25 = load i64, ptr %2, align 8, !dbg !42
  br label %block_1, !dbg !42

block_4:                                          ; preds = %block_1
  %26 = load i64, ptr %1, align 8, !dbg !43
  ret i64 %26, !dbg !43
}

define ptr @"__main!x"() !dbg !44 {
block_0:
  %0 = alloca ptr, align 8, !dbg !49
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 8, i1 false), !dbg !49
  store ptr null, ptr %0, align 8, !dbg !49
  call void @llvm.dbg.declare(metadata ptr %0, metadata !50, metadata !DIExpression()), !dbg !49
  %1 = load ptr, ptr %0, align 8, !dbg !51
  ret ptr %1, !dbg !51
}

define i32 @"__main!main"() !dbg !52 {
block_0:
  %0 = alloca %"__init!ArgList", align 8, !dbg !55
  %1 = alloca [6 x %"__init!Arg"], align 8, !dbg !55
  %2 = alloca i64, align 8, !dbg !55
  %3 = alloca i64, align 8, !dbg !55
  %4 = alloca i64, align 8, !dbg !55
  %5 = alloca i64, align 8, !dbg !55
  %6 = alloca i64, align 8, !dbg !55
  %7 = alloca i64, align 8, !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 96, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false), !dbg !55
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 8, i1 false), !dbg !55
  %8 = getelementptr inbounds %"__init!ArgList", ptr %0, i32 0, i32 0, !dbg !55
  %9 = getelementptr inbounds %"__init!ArgList", ptr %0, i32 0, i32 1, !dbg !55
  store i64 6, ptr %8, align 8, !dbg !55
  store ptr %1, ptr %9, align 8, !dbg !55
  store i64 1, ptr %2, align 8, !dbg !55
  %10 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 0, !dbg !55
  %11 = getelementptr inbounds %"__init!Arg", ptr %10, i32 0, i32 0, !dbg !55
  %12 = getelementptr inbounds %"__init!Arg", ptr %10, i32 0, i32 1, !dbg !55
  store i64 15, ptr %11, align 8, !dbg !55
  store ptr %2, ptr %12, align 8, !dbg !55
  store i64 2, ptr %3, align 8, !dbg !55
  %13 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 1, !dbg !55
  %14 = getelementptr inbounds %"__init!Arg", ptr %13, i32 0, i32 0, !dbg !55
  %15 = getelementptr inbounds %"__init!Arg", ptr %13, i32 0, i32 1, !dbg !55
  store i64 15, ptr %14, align 8, !dbg !55
  store ptr %3, ptr %15, align 8, !dbg !55
  store i64 3, ptr %4, align 8, !dbg !55
  %16 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 2, !dbg !55
  %17 = getelementptr inbounds %"__init!Arg", ptr %16, i32 0, i32 0, !dbg !55
  %18 = getelementptr inbounds %"__init!Arg", ptr %16, i32 0, i32 1, !dbg !55
  store i64 15, ptr %17, align 8, !dbg !55
  store ptr %4, ptr %18, align 8, !dbg !55
  store i64 4, ptr %5, align 8, !dbg !55
  %19 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 3, !dbg !55
  %20 = getelementptr inbounds %"__init!Arg", ptr %19, i32 0, i32 0, !dbg !55
  %21 = getelementptr inbounds %"__init!Arg", ptr %19, i32 0, i32 1, !dbg !55
  store i64 15, ptr %20, align 8, !dbg !55
  store ptr %5, ptr %21, align 8, !dbg !55
  store i64 5, ptr %6, align 8, !dbg !55
  %22 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 4, !dbg !55
  %23 = getelementptr inbounds %"__init!Arg", ptr %22, i32 0, i32 0, !dbg !55
  %24 = getelementptr inbounds %"__init!Arg", ptr %22, i32 0, i32 1, !dbg !55
  store i64 15, ptr %23, align 8, !dbg !55
  store ptr %6, ptr %24, align 8, !dbg !55
  store i64 6, ptr %7, align 8, !dbg !55
  %25 = getelementptr [6 x %"__init!Arg"], ptr %1, i64 0, i64 5, !dbg !55
  %26 = getelementptr inbounds %"__init!Arg", ptr %25, i32 0, i32 0, !dbg !55
  %27 = getelementptr inbounds %"__init!Arg", ptr %25, i32 0, i32 1, !dbg !55
  store i64 15, ptr %26, align 8, !dbg !55
  store ptr %7, ptr %27, align 8, !dbg !55
  %28 = call i64 @"__main!sum"(ptr %0), !dbg !55
  %29 = trunc i64 %28 to i32, !dbg !55
  ret i32 %29, !dbg !55
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "something", linkageName: "__main!something", scope: !1, file: !1, line: 12, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!SFloat", scope: !1, file: !1, size: 64, elements: !8)
!8 = !{!9, !11}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1, file: !1, baseType: !10, size: 32, align: 32)
!10 = !DIBasicType(name: "f32", size: 32, encoding: DW_ATE_float)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1, file: !1, baseType: !10, size: 32, align: 32, offset: 32)
!12 = !{}
!13 = !DILocation(line: 12, scope: !4)
!14 = !DILocalVariable(name: "arg", scope: !4, file: !1, line: 12, type: !7)
!15 = !DILocation(line: 13, scope: !4)
!16 = distinct !DISubprogram(name: "sum", linkageName: "__main!sum", scope: !1, file: !1, line: 18, type: !17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!17 = !DISubroutineType(types: !18)
!18 = !{!19}
!19 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!20 = !DILocation(line: 20, scope: !16)
!21 = !DILocation(line: 21, scope: !16)
!22 = !DILocalVariable(name: "list_ptr", scope: !16, file: !1, line: 18, type: !23)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__init!ArgList", baseType: !24, size: 64, align: 64, dwarfAddressSpace: 0)
!24 = !DICompositeType(tag: DW_TAG_structure_type, name: "__init!ArgList", scope: !1, file: !1, size: 128, elements: !25)
!25 = !{!26, !27}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !19, size: 64, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1, file: !1, baseType: !28, size: 64, align: 64, offset: 64)
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__init!Arg", baseType: !29, size: 64, align: 64, dwarfAddressSpace: 0)
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "__init!Arg", scope: !1, file: !1, size: 128, elements: !30)
!30 = !{!31, !33}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !1, file: !1, baseType: !32, size: 64, align: 64)
!32 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1, file: !1, baseType: !34, size: 64, align: 64, offset: 64)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!35 = !DILocation(line: 18, scope: !16)
!36 = !DILocalVariable(name: "list", scope: !16, file: !1, line: 19, type: !24)
!37 = !DILocation(line: 19, scope: !16)
!38 = !DILocalVariable(name: "res", scope: !16, file: !1, line: 20, type: !39)
!39 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!40 = !DILocalVariable(name: "i", scope: !16, file: !1, line: 21, type: !39)
!41 = !DILocation(line: 22, scope: !16)
!42 = !DILocation(line: 23, scope: !16)
!43 = !DILocation(line: 26, scope: !16)
!44 = distinct !DISubprogram(name: "x", linkageName: "__main!x", scope: !1, file: !1, line: 29, type: !45, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!45 = !DISubroutineType(types: !46)
!46 = !{!47}
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*i32", baseType: !48, size: 64, align: 64, dwarfAddressSpace: 0)
!48 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!49 = !DILocation(line: 30, scope: !44)
!50 = !DILocalVariable(name: "foo", scope: !44, file: !1, line: 30, type: !34)
!51 = !DILocation(line: 32, scope: !44)
!52 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 35, type: !53, spFlags: DISPFlagDefinition, unit: !0)
!53 = !DISubroutineType(types: !54)
!54 = !{!48}
!55 = !DILocation(line: 39, scope: !52)
