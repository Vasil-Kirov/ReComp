main

#import memory as m

struct foo {
    F: type,
    a: []F,
}

puts :: fn #foreign(str: cstring);
malloc :: fn #foreign(size: int) -> *;

allocator_alloc :: fn(size: int, this: *m.Allocator) -> * {
    return malloc(size);
}

do_thing :: fn(x: $T) -> T {
    return x;
}

foo :: fn(list: ...) -> i32 {
    sum := 0;
    for i in list.count {
        it := list[i];
        if it.t == i32 {
            sum += *@*i32 it.val;
        }
    }
    return @i32 sum;
}

get_num :: fn(T: type, m: T) -> T {
    x: T = 10;
    y: T = 20;
    return (x + y) * m;
}

main :: fn() -> i32 {
    x: i32 = 2;
    foo := get_num(int, 3);
    bar := get_num(i32, 1);
    do_thing(3);
	return @i32 foo - (bar * 3);
}

// main :: fn() -> i32 {
//     alloc := m.Allocator {
//         alloc = allocator_alloc,
//     };
//     // x := m.make_slice(&alloc, i32, 10);
//     // x[1] = 4;
// 
//     x := foo { F = int, a = m.make_slice(&alloc, int, 10) };
//     x.a[-5] = 10;
//     do_foo(x);
// 
//     defer puts(c"1");
//     defer puts(c"2");
//     defer puts(c"3");
//     {
//         defer puts(c"33");
//         defer puts(c"22");
//         defer puts(c"11");
//     }
// 
// 
//     return @i32 x.a[5];
// }


// #import stuff as f2
// 
// struct BigStruct {
// 	bar: f2.x,
//     foo: [100]i32,
// }
// 
// struct SmallStruct {
//     num1: i16,
//     num2: i16,
// }
// 
// make_bs :: fn(num: i32) -> BigStruct {
//     res := BigStruct { foo = {}, bar = f2.x { y = 10 } };
//     for i := 0; i < 100;  i += 1 {
//         res.foo[i] = num;
//     }
// 
//     return res;
// }
// 
// make_ss :: fn(num: i32) -> SmallStruct {
//     res := SmallStruct { num1 = @i16 num, num2 = @i16 num };
//     return res;
// }
// 
// make_array :: fn(num: i32) -> [100]i32 {
//     arr:[100]i32 = {};
//     for i := 0; i < 50; i += 1 {
//         arr[i] = num;
//     }
//     for i := 50; i < 100; i += 1 {
//         arr[i] = num * 2;
//     }
//     return arr;
// }
// 
// get_fn :: fn() -> fn(foo1: BigStruct, foo2: SmallStruct, foo3: [100]i32) -> i32 {
// 	return fn(foo1: BigStruct, foo2: SmallStruct, foo3: [100]i32) -> i32 {
// 		return foo1.foo[50] - foo2.num2 - foo3[0] - foo3[50] + 1;
// 	};
// }
// 
// main :: fn() -> i32 {
//     foo1 := make_bs(100);
//     foo2 := make_ss(25);
//     foo3 := make_array(25);
// 	my_arr :: {1, 2, 3};
//     //     100 - 25 - 25 - 50
// 	return get_fn()(foo1, foo2, foo3);
// }


