; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!BigStruct" = type { %"__stuff!x", [100 x i32] }
%"__stuff!x" = type { i64 }
%"__main!SmallStruct" = type { i16, i16 }

@"__stuff!foo" = external global i64

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"__main!make_bs"(ptr %0, i32 %1) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !17, metadata !DIExpression()), !dbg !18
  %2 = alloca %"__main!BigStruct", align 8, !dbg !19
  %3 = alloca [100 x i32], align 4, !dbg !19
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 400, i1 false), !dbg !19
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 1, !dbg !19
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 400, i1 false), !dbg !19
  %5 = alloca %"__stuff!x", align 8, !dbg !19
  %6 = getelementptr inbounds %"__stuff!x", ptr %5, i32 0, i32 0, !dbg !19
  store i64 10, ptr %6, align 8, !dbg !19
  %7 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 0, !dbg !19
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %5, i64 8, i1 false), !dbg !19
  call void @llvm.dbg.declare(metadata ptr %2, metadata !20, metadata !DIExpression()), !dbg !19
  %8 = alloca i64, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %8, metadata !22, metadata !DIExpression()), !dbg !21
  store i64 0, ptr %8, align 8, !dbg !21
  br label %block_1, !dbg !21

block_1:                                          ; preds = %block_3, %block_0
  %9 = load i64, ptr %8, align 8, !dbg !21
  %10 = icmp slt i64 %9, 100, !dbg !21
  br i1 %10, label %block_2, label %block_4, !dbg !21

block_2:                                          ; preds = %block_1
  %11 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 1, !dbg !24
  %12 = load i64, ptr %8, align 8, !dbg !24
  %13 = getelementptr [100 x i32], ptr %11, i64 0, i64 %12, !dbg !24
  store i32 %1, ptr %13, align 4, !dbg !24
  br label %block_3, !dbg !24

block_3:                                          ; preds = %block_2
  %14 = load i64, ptr %8, align 8, !dbg !24
  %15 = add i64 %14, 1, !dbg !24
  store i64 %15, ptr %8, align 8, !dbg !24
  %16 = load i64, ptr %8, align 8, !dbg !24
  br label %block_1, !dbg !24

block_4:                                          ; preds = %block_1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %2, i64 408, i1 false), !dbg !25
  ret void, !dbg !25
}

define void @"__main!make_ss"(ptr %0, i32 %1) !dbg !26 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !34, metadata !DIExpression()), !dbg !35
  %2 = alloca %"__main!SmallStruct", align 8, !dbg !36
  %3 = trunc i32 %1 to i16, !dbg !36
  %4 = getelementptr inbounds %"__main!SmallStruct", ptr %2, i32 0, i32 0, !dbg !36
  store i16 %3, ptr %4, align 2, !dbg !36
  %5 = trunc i32 %1 to i16, !dbg !36
  %6 = getelementptr inbounds %"__main!SmallStruct", ptr %2, i32 0, i32 1, !dbg !36
  store i16 %5, ptr %6, align 2, !dbg !36
  call void @llvm.dbg.declare(metadata ptr %2, metadata !37, metadata !DIExpression()), !dbg !36
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 %2, i64 4, i1 false), !dbg !38
  ret void, !dbg !38
}

define void @"__main!make_array"(ptr %0, i32 %1) !dbg !39 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !42, metadata !DIExpression()), !dbg !43
  %2 = alloca [100 x i32], align 4, !dbg !44
  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 400, i1 false), !dbg !44
  call void @llvm.dbg.declare(metadata ptr %2, metadata !45, metadata !DIExpression()), !dbg !44
  %3 = alloca i64, align 8, !dbg !46
  call void @llvm.dbg.declare(metadata ptr %3, metadata !47, metadata !DIExpression()), !dbg !46
  store i64 0, ptr %3, align 8, !dbg !46
  br label %block_1, !dbg !46

block_1:                                          ; preds = %block_3, %block_0
  %4 = load i64, ptr %3, align 8, !dbg !46
  %5 = icmp slt i64 %4, 50, !dbg !46
  br i1 %5, label %block_2, label %block_4, !dbg !46

block_2:                                          ; preds = %block_1
  %6 = load i64, ptr %3, align 8, !dbg !48
  %7 = getelementptr [100 x i32], ptr %2, i64 0, i64 %6, !dbg !48
  store i32 %1, ptr %7, align 4, !dbg !48
  br label %block_3, !dbg !48

block_3:                                          ; preds = %block_2
  %8 = load i64, ptr %3, align 8, !dbg !48
  %9 = add i64 %8, 1, !dbg !48
  store i64 %9, ptr %3, align 8, !dbg !48
  %10 = load i64, ptr %3, align 8, !dbg !48
  br label %block_1, !dbg !48

block_4:                                          ; preds = %block_1
  %11 = alloca i64, align 8, !dbg !49
  call void @llvm.dbg.declare(metadata ptr %11, metadata !50, metadata !DIExpression()), !dbg !49
  store i64 50, ptr %11, align 8, !dbg !49
  br label %block_5, !dbg !49

block_5:                                          ; preds = %block_7, %block_4
  %12 = load i64, ptr %11, align 8, !dbg !49
  %13 = icmp slt i64 %12, 100, !dbg !49
  br i1 %13, label %block_6, label %block_8, !dbg !49

block_6:                                          ; preds = %block_5
  %14 = load i64, ptr %11, align 8, !dbg !51
  %15 = getelementptr [100 x i32], ptr %2, i64 0, i64 %14, !dbg !51
  %16 = mul i32 %1, 2, !dbg !51
  store i32 %16, ptr %15, align 4, !dbg !51
  br label %block_7, !dbg !51

block_7:                                          ; preds = %block_6
  %17 = load i64, ptr %11, align 8, !dbg !51
  %18 = add i64 %17, 1, !dbg !51
  store i64 %18, ptr %11, align 8, !dbg !51
  %19 = load i64, ptr %11, align 8, !dbg !51
  br label %block_5, !dbg !51

block_8:                                          ; preds = %block_5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false), !dbg !52
  ret void, !dbg !52
}

define ptr @"__main!get_fn"() !dbg !53 {
block_0:
  ret ptr @"__lambda_../file1.rcp41", !dbg !57
}

define i32 @"__main!main"() !dbg !58 {
block_0:
  %0 = alloca %"__main!BigStruct", align 8, !dbg !61
  call void @"__main!make_bs"(ptr %0, i32 100), !dbg !61
  call void @llvm.dbg.declare(metadata ptr %0, metadata !62, metadata !DIExpression()), !dbg !61
  %1 = alloca %"__main!SmallStruct", align 8, !dbg !63
  call void @"__main!make_ss"(ptr %1, i32 25), !dbg !63
  call void @llvm.dbg.declare(metadata ptr %1, metadata !64, metadata !DIExpression()), !dbg !63
  %2 = alloca [100 x i32], align 4, !dbg !65
  call void @"__main!make_array"(ptr %2, i32 25), !dbg !65
  call void @llvm.dbg.declare(metadata ptr %2, metadata !66, metadata !DIExpression()), !dbg !65
  %3 = call ptr @"__main!get_fn"(), !dbg !67
  %4 = alloca %"__main!BigStruct", align 8, !dbg !67
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %0, i64 408, i1 false), !dbg !67
  %5 = load i32, ptr %1, align 4, !dbg !67
  %6 = alloca [100 x i32], align 4, !dbg !67
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %2, i64 400, i1 false), !dbg !67
  %7 = call i32 %3(ptr %4, i32 %5, ptr %6), !dbg !67
  ret i32 %7, !dbg !67
}

declare i64 @"__stuff!give_one"()

declare i32 @"__stuff!give_two"()

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

define private i32 @"__lambda_../file1.rcp41"(ptr %0, i32 %1, ptr %2) !dbg !68 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !71, metadata !DIExpression()), !dbg !72
  %3 = alloca %"__main!SmallStruct", align 8, !dbg !72
  store i32 %1, ptr %3, align 4, !dbg !72
  call void @llvm.dbg.value(metadata ptr %3, metadata !73, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.value(metadata ptr %2, metadata !74, metadata !DIExpression()), !dbg !72
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %0, i32 0, i32 1, !dbg !75
  %5 = getelementptr [100 x i32], ptr %4, i64 0, i64 50, !dbg !75
  %6 = load i32, ptr %5, align 4, !dbg !75
  %7 = getelementptr inbounds %"__main!SmallStruct", ptr %3, i32 0, i32 1, !dbg !75
  %8 = load i16, ptr %7, align 2, !dbg !75
  %9 = sext i16 %8 to i32, !dbg !75
  %10 = sub i32 %6, %9, !dbg !75
  %11 = getelementptr [100 x i32], ptr %2, i64 0, i64 0, !dbg !75
  %12 = load i32, ptr %11, align 4, !dbg !75
  %13 = sub i32 %10, %12, !dbg !75
  %14 = getelementptr [100 x i32], ptr %2, i64 0, i64 50, !dbg !75
  %15 = load i32, ptr %14, align 4, !dbg !75
  %16 = sub i32 %13, %15, !dbg !75
  %17 = add i32 %16, 1, !dbg !75
  ret i32 %17, !dbg !75
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "make_bs", linkageName: "__main!make_bs", scope: !1, file: !1, line: 15, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !13}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!BigStruct", scope: !1, file: !1, size: 3264, elements: !8)
!8 = !{!9, !11}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "bar", scope: !1, file: !1, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "__stuff!x", scope: !1, file: !1, size: 64, align: 64, flags: DIFlagFwdDecl)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1, file: !1, baseType: !12, size: 3200, align: 32, offset: 64)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 3200, align: 32, elements: !14)
!13 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!14 = !{!15}
!15 = !DISubrange(count: 100, lowerBound: 0)
!16 = !{}
!17 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 15, type: !13)
!18 = !DILocation(line: 15, scope: !4)
!19 = !DILocation(line: 16, scope: !4)
!20 = !DILocalVariable(name: "res", scope: !4, file: !1, line: 16, type: !7)
!21 = !DILocation(line: 17, scope: !4)
!22 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 17, type: !23)
!23 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!24 = !DILocation(line: 18, scope: !4)
!25 = !DILocation(line: 21, scope: !4)
!26 = distinct !DISubprogram(name: "make_ss", linkageName: "__main!make_ss", scope: !1, file: !1, line: 24, type: !27, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!27 = !DISubroutineType(types: !28)
!28 = !{!29, !13}
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!SmallStruct", scope: !1, file: !1, size: 32, elements: !30)
!30 = !{!31, !33}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "num1", scope: !1, file: !1, baseType: !32, size: 16, align: 16)
!32 = !DIBasicType(name: "i16", size: 16, encoding: DW_ATE_signed)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "num2", scope: !1, file: !1, baseType: !32, size: 16, align: 16, offset: 16)
!34 = !DILocalVariable(name: "num", scope: !26, file: !1, line: 24, type: !13)
!35 = !DILocation(line: 24, scope: !26)
!36 = !DILocation(line: 25, scope: !26)
!37 = !DILocalVariable(name: "res", scope: !26, file: !1, line: 25, type: !29)
!38 = !DILocation(line: 26, scope: !26)
!39 = distinct !DISubprogram(name: "make_array", linkageName: "__main!make_array", scope: !1, file: !1, line: 29, type: !40, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!40 = !DISubroutineType(types: !41)
!41 = !{!12, !13}
!42 = !DILocalVariable(name: "num", scope: !39, file: !1, line: 29, type: !13)
!43 = !DILocation(line: 29, scope: !39)
!44 = !DILocation(line: 30, scope: !39)
!45 = !DILocalVariable(name: "arr", scope: !39, file: !1, line: 30, type: !12)
!46 = !DILocation(line: 31, scope: !39)
!47 = !DILocalVariable(name: "i", scope: !39, file: !1, line: 31, type: !23)
!48 = !DILocation(line: 32, scope: !39)
!49 = !DILocation(line: 34, scope: !39)
!50 = !DILocalVariable(name: "i", scope: !39, file: !1, line: 34, type: !23)
!51 = !DILocation(line: 35, scope: !39)
!52 = !DILocation(line: 37, scope: !39)
!53 = distinct !DISubprogram(name: "get_fn", linkageName: "__main!get_fn", scope: !1, file: !1, line: 40, type: !54, spFlags: DISPFlagDefinition, unit: !0)
!54 = !DISubroutineType(types: !55)
!55 = !{!56}
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!57 = !DILocation(line: 41, scope: !53)
!58 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 46, type: !59, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!59 = !DISubroutineType(types: !60)
!60 = !{!13}
!61 = !DILocation(line: 47, scope: !58)
!62 = !DILocalVariable(name: "foo1", scope: !58, file: !1, line: 47, type: !7)
!63 = !DILocation(line: 48, scope: !58)
!64 = !DILocalVariable(name: "foo2", scope: !58, file: !1, line: 48, type: !29)
!65 = !DILocation(line: 49, scope: !58)
!66 = !DILocalVariable(name: "foo3", scope: !58, file: !1, line: 49, type: !12)
!67 = !DILocation(line: 51, scope: !58)
!68 = distinct !DISubprogram(name: "__lambda_../file1.rcp41", linkageName: "__main!__lambda_../file1.rcp41", scope: !1, file: !1, line: 41, type: !69, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!69 = !DISubroutineType(types: !70)
!70 = !{!13, !7, !29, !12}
!71 = !DILocalVariable(name: "foo1", scope: !68, file: !1, line: 41, type: !7)
!72 = !DILocation(line: 41, scope: !68)
!73 = !DILocalVariable(name: "foo2", arg: 1, scope: !68, file: !1, line: 41, type: !29)
!74 = !DILocalVariable(name: "foo3", arg: 2, scope: !68, file: !1, line: 41, type: !12)
!75 = !DILocation(line: 42, scope: !68)
