; ModuleID = 'main'
source_filename = "fn_ptr.rcp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-redhat-linux-gnu"

%"__main!Foo" = type { [1024 x ptr] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!sum"(i32 %0, i32 %1) !dbg !4 {
block_0:
  %2 = alloca i32, align 4, !dbg !9
  %3 = alloca i32, align 4, !dbg !9
  call void @llvm.memset.p0.i32(ptr align 4 %2, i8 0, i32 4, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !9
  store i32 %0, ptr %2, align 4, !dbg !9
  call void @llvm.dbg.value(metadata ptr %2, metadata !10, metadata !DIExpression()), !dbg !9
  store i32 %1, ptr %3, align 4, !dbg !9
  call void @llvm.dbg.value(metadata ptr %3, metadata !11, metadata !DIExpression()), !dbg !9
  %4 = load i32, ptr %2, align 4, !dbg !12
  %5 = load i32, ptr %3, align 4, !dbg !12
  %6 = add i32 %4, %5, !dbg !12
  ret i32 %6, !dbg !12
}

define i32 @"__main!main"() !dbg !13 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !16
  %1 = alloca [1024 x ptr], align 8, !dbg !16
  %2 = alloca %"__main!Foo", align 8, !dbg !16
  %3 = alloca [1024 x ptr], align 8, !dbg !17
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 8192, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8192, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8192, i1 false), !dbg !16
  %4 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 8192, i1 false), !dbg !16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 8192, i1 false), !dbg !16
  call void @llvm.dbg.declare(metadata ptr %2, metadata !18, metadata !DIExpression()), !dbg !16
  %5 = getelementptr inbounds %"__main!Foo", ptr %2, i32 0, i32 0, !dbg !26
  %6 = getelementptr [1024 x ptr], ptr %5, i64 0, i64 513, !dbg !26
  store ptr @"__main!sum", ptr %6, align 8, !dbg !26
  %7 = getelementptr inbounds %"__main!Foo", ptr %2, i32 0, i32 0, !dbg !17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %7, i64 8192, i1 false), !dbg !17
  %8 = getelementptr [1024 x ptr], ptr %3, i64 0, i64 513, !dbg !17
  %9 = load ptr, ptr %8, align 8, !dbg !17
  %10 = call i32 %9(i32 3, i32 -3), !dbg !17
  ret i32 %10, !dbg !17
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "fn_ptr.rcp", directory: "/home/vasko/Programming/ReComp/tests/fn_ptr")
!2 = !{i32 2, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "sum", linkageName: "__main!sum", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7, !7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 7, scope: !4)
!10 = !DILocalVariable(name: "a", scope: !4, file: !1, line: 7, type: !7)
!11 = !DILocalVariable(name: "b", arg: 1, scope: !4, file: !1, line: 7, type: !7)
!12 = !DILocation(line: 8, scope: !4)
!13 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 11, type: !14, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!14 = !DISubroutineType(types: !15)
!15 = !{!7}
!16 = !DILocation(line: 12, scope: !13)
!17 = !DILocation(line: 15, scope: !13)
!18 = !DILocalVariable(name: "foo", scope: !13, file: !1, line: 12, type: !19)
!19 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 65536, elements: !20)
!20 = !{!21}
!21 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, baseType: !22, size: 65536, align: 64)
!22 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 65536, align: 64, elements: !24)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(i32, i32) -> i32", baseType: !5, size: 64, align: 64, dwarfAddressSpace: 0)
!24 = !{!25}
!25 = !DISubrange(count: 1024, lowerBound: 0)
!26 = !DILocation(line: 13, scope: !13)
