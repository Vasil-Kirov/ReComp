
printf :: fn #cdecl(fmt: cstring, num: i64);
malloc :: fn #cdecl(size: int) -> u8*;
free   :: fn #cdecl(ptr: u8*);

main :: fn() -> i32 {
	buff := malloc(100);

	for i := 0; i < 100; i += 1 {
		buff[i] = @u8 i;
	}

	sum := 0;

	for i := 0; i < 100; i += 1 {
		sum += @i8 buff[i];
	}

	free(buff);

	return @i32 sum;

}


// GENERICS SYNTAX
// struct stack!T {
// 	items: T[];
//  top: int;
// }
// 
// push!T :: fn(Stack: *stack!T, item: T) -> T {
// 	return stack.items[stack.top++] = item;
// }

// 1. 2 * 3
// 2. 4 / 1
// 3. (2) % 0
// 4. 10 + (1) - (3)

