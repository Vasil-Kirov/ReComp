; ModuleID = 'string'
source_filename = "string.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__os!STD_INPUT_HANDLE" = external global i32
@"__os!STD_OUTPUT_HANDLE" = external global i32
@"__os!STD_ERROR_HANDLE" = external global i32
@"__os!INVALID_HANDLE_VALUE" = external global ptr

define void @"__string!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"__string!format_uint"(ptr %0, i64 %1, ptr %2) !dbg !4 {
block_0:
  %3 = alloca i64, align 8, !dbg !15
  %4 = alloca ptr, align 8, !dbg !15
  %5 = alloca [256 x i8], align 1, !dbg !16
  %6 = alloca [256 x i8], align 1, !dbg !16
  %7 = alloca [256 x i8], align 1, !dbg !17
  %8 = alloca [256 x i8], align 1, !dbg !17
  %9 = alloca i64, align 8, !dbg !18
  %10 = alloca i64, align 8, !dbg !19
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !15
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false), !dbg !15
  call void @llvm.memset.p0.i32(ptr align 1 %5, i8 0, i32 256, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 1 %6, i8 0, i32 256, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 1 %7, i8 0, i32 256, i1 false), !dbg !17
  call void @llvm.memset.p0.i32(ptr align 1 %8, i8 0, i32 256, i1 false), !dbg !17
  call void @llvm.memset.p0.i32(ptr align 8 %9, i8 0, i32 8, i1 false), !dbg !18
  call void @llvm.memset.p0.i32(ptr align 8 %10, i8 0, i32 8, i1 false), !dbg !19
  %11 = alloca i64, align 8, !dbg !20
  %12 = alloca i64, align 8, !dbg !21
  call void @llvm.memset.p0.i32(ptr align 8 %11, i8 0, i32 8, i1 false), !dbg !20
  call void @llvm.memset.p0.i32(ptr align 8 %12, i8 0, i32 8, i1 false), !dbg !21
  %13 = alloca i64, align 8, !dbg !22
  call void @llvm.memset.p0.i32(ptr align 8 %13, i8 0, i32 8, i1 false), !dbg !22
  %14 = alloca ptr, align 8, !dbg !23
  call void @llvm.memset.p0.i32(ptr align 8 %14, i8 0, i32 8, i1 false), !dbg !23
  store i64 %1, ptr %3, align 8, !dbg !15
  call void @llvm.dbg.value(metadata ptr %3, metadata !24, metadata !DIExpression()), !dbg !15
  store ptr %2, ptr %4, align 8, !dbg !15
  call void @llvm.dbg.value(metadata ptr %4, metadata !25, metadata !DIExpression()), !dbg !15
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %6, ptr align 1 %5, i64 256, i1 false), !dbg !16
  call void @llvm.dbg.declare(metadata ptr %6, metadata !26, metadata !DIExpression()), !dbg !16
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %8, ptr align 1 %7, i64 256, i1 false), !dbg !17
  call void @llvm.dbg.declare(metadata ptr %8, metadata !27, metadata !DIExpression()), !dbg !17
  %15 = load i64, ptr %3, align 8, !dbg !18
  store i64 %15, ptr %9, align 8, !dbg !18
  call void @llvm.dbg.declare(metadata ptr %9, metadata !28, metadata !DIExpression()), !dbg !18
  store i64 0, ptr %10, align 8, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %10, metadata !29, metadata !DIExpression()), !dbg !19
  br label %block_1, !dbg !31

block_1:                                          ; preds = %block_2, %block_0
  %16 = load i64, ptr %9, align 8, !dbg !31
  %17 = icmp ugt i64 %16, 0, !dbg !31
  br i1 %17, label %block_2, label %block_3, !dbg !31

block_2:                                          ; preds = %block_1
  %18 = load i64, ptr %9, align 8, !dbg !20
  %19 = urem i64 %18, 10, !dbg !20
  store i64 %19, ptr %11, align 8, !dbg !20
  call void @llvm.dbg.declare(metadata ptr %11, metadata !32, metadata !DIExpression()), !dbg !20
  %20 = load i64, ptr %9, align 8, !dbg !33
  %21 = udiv i64 %20, 10, !dbg !33
  store i64 %21, ptr %9, align 8, !dbg !33
  %22 = load i64, ptr %11, align 8, !dbg !21
  %23 = add i64 48, %22, !dbg !21
  store i64 %23, ptr %12, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %12, metadata !34, metadata !DIExpression()), !dbg !21
  %24 = load i64, ptr %10, align 8, !dbg !35
  %25 = getelementptr [256 x i8], ptr %8, i64 0, i64 %24, !dbg !35
  %26 = load i64, ptr %12, align 8, !dbg !35
  %27 = trunc i64 %26 to i8, !dbg !35
  store i8 %27, ptr %25, align 1, !dbg !35
  %28 = load i64, ptr %10, align 8, !dbg !36
  %29 = add i64 %28, 1, !dbg !36
  store i64 %29, ptr %10, align 8, !dbg !36
  br label %block_1, !dbg !36

block_3:                                          ; preds = %block_1
  %30 = load i64, ptr %10, align 8, !dbg !22
  store i64 0, ptr %13, align 8, !dbg !22
  call void @llvm.dbg.declare(metadata ptr %13, metadata !37, metadata !DIExpression()), !dbg !22
  br label %block_4, !dbg !22

block_4:                                          ; preds = %block_6, %block_3
  %31 = load i64, ptr %13, align 8, !dbg !22
  %32 = icmp ult i64 %31, %30, !dbg !22
  br i1 %32, label %block_5, label %block_7, !dbg !22

block_5:                                          ; preds = %block_4
  %33 = load i64, ptr %13, align 8, !dbg !38
  %34 = getelementptr [256 x i8], ptr %6, i64 0, i64 %33, !dbg !38
  %35 = load i64, ptr %10, align 8, !dbg !38
  %36 = load i64, ptr %13, align 8, !dbg !38
  %37 = sub i64 %35, %36, !dbg !38
  %38 = sub i64 %37, 1, !dbg !38
  %39 = getelementptr [256 x i8], ptr %8, i64 0, i64 %38, !dbg !38
  %40 = load i8, ptr %39, align 1, !dbg !38
  store i8 %40, ptr %34, align 1, !dbg !38
  br label %block_6, !dbg !38

block_6:                                          ; preds = %block_5
  %41 = load i64, ptr %13, align 8, !dbg !38
  %42 = add i64 %41, 1, !dbg !38
  store i64 %42, ptr %13, align 8, !dbg !38
  br label %block_4, !dbg !38

block_7:                                          ; preds = %block_4
  %43 = load ptr, ptr %4, align 8, !dbg !23
  store ptr %43, ptr %14, align 8, !dbg !23
  call void @llvm.dbg.declare(metadata ptr %14, metadata !39, metadata !DIExpression()), !dbg !23
  %44 = load ptr, ptr %14, align 8, !dbg !40
  %45 = load i64, ptr %10, align 8, !dbg !40
  store i64 %45, ptr %44, align 8, !dbg !40
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %0, ptr align 1 %6, i64 256, i1 false), !dbg !41
  ret void, !dbg !41
}

define void @"__string!print_int"(i32 %0) !dbg !42 {
block_0:
  %1 = alloca i32, align 4, !dbg !46
  %2 = alloca i64, align 8, !dbg !47
  %3 = alloca [256 x i8], align 1, !dbg !48
  %4 = alloca [256 x i8], align 1, !dbg !48
  call void @llvm.memset.p0.i32(ptr align 4 %1, i8 0, i32 4, i1 false), !dbg !46
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !47
  call void @llvm.memset.p0.i32(ptr align 1 %3, i8 0, i32 256, i1 false), !dbg !48
  call void @llvm.memset.p0.i32(ptr align 1 %4, i8 0, i32 256, i1 false), !dbg !48
  store i32 %0, ptr %1, align 4, !dbg !46
  call void @llvm.dbg.value(metadata ptr %1, metadata !49, metadata !DIExpression()), !dbg !46
  call void @llvm.dbg.declare(metadata ptr %2, metadata !50, metadata !DIExpression()), !dbg !47
  %5 = load i32, ptr %1, align 4, !dbg !48
  %6 = zext i32 %5 to i64, !dbg !48
  call void @"__string!format_uint"(ptr %3, i64 %6, ptr %2), !dbg !48
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %4, ptr align 1 %3, i64 256, i1 false), !dbg !48
  call void @llvm.dbg.declare(metadata ptr %4, metadata !51, metadata !DIExpression()), !dbg !48
  %7 = getelementptr [256 x i8], ptr %4, i64 0, i64 0, !dbg !52
  %8 = load i64, ptr %2, align 8, !dbg !52
  %9 = trunc i64 %8 to i32, !dbg !52
  call void @"__os!print"(ptr %7, i32 %9), !dbg !52
  ret void, !dbg !52
}

define i32 @"__string!get_next"(ptr %0) !dbg !53 {
block_0:
  %1 = alloca ptr, align 8, !dbg !57
  %2 = alloca ptr, align 8, !dbg !58
  %3 = alloca i32, align 4, !dbg !59
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false), !dbg !57
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !58
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !59
  store ptr %0, ptr %1, align 8, !dbg !57
  call void @llvm.dbg.value(metadata ptr %1, metadata !60, metadata !DIExpression()), !dbg !57
  %4 = load ptr, ptr %1, align 8, !dbg !58
  store ptr %4, ptr %2, align 8, !dbg !58
  call void @llvm.dbg.declare(metadata ptr %2, metadata !61, metadata !DIExpression()), !dbg !58
  %5 = load ptr, ptr %2, align 8, !dbg !59
  %6 = load i8, ptr %5, align 1, !dbg !59
  %7 = zext i8 %6 to i32, !dbg !59
  store i32 %7, ptr %3, align 4, !dbg !59
  call void @llvm.dbg.declare(metadata ptr %3, metadata !62, metadata !DIExpression()), !dbg !59
  br label %block_1, !dbg !63

block_1:                                          ; preds = %block_6, %block_0
  br label %block_2, !dbg !63

block_2:                                          ; preds = %block_1
  %8 = load ptr, ptr %2, align 8, !dbg !64
  %9 = load i8, ptr %8, align 1, !dbg !64
  %10 = and i8 %9, 1, !dbg !64
  %11 = icmp ne i8 %10, 0, !dbg !64
  br i1 %11, label %block_4, label %block_5, !dbg !64

block_4:                                          ; preds = %block_2
  %12 = load ptr, ptr %2, align 8, !dbg !65
  %13 = getelementptr i8, ptr %12, i64 1, !dbg !65
  store ptr %13, ptr %2, align 8, !dbg !65
  %14 = load i32, ptr %3, align 4, !dbg !66
  %15 = shl i32 %14, 8, !dbg !66
  %16 = load ptr, ptr %2, align 8, !dbg !66
  %17 = load i8, ptr %16, align 1, !dbg !66
  %18 = zext i8 %17 to i32, !dbg !66
  %19 = or i32 %15, %18, !dbg !66
  store i32 %19, ptr %3, align 4, !dbg !66
  br label %block_6, !dbg !66

block_5:                                          ; preds = %block_2
  %20 = load i32, ptr %3, align 4, !dbg !67
  ret i32 %20, !dbg !67

block_6:                                          ; preds = %block_4
  br label %block_1, !dbg !67

block_3:                                          ; No predecessors!
  %21 = load i32, ptr %3, align 4, !dbg !68
  ret i32 %21, !dbg !68
}

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare void @"__os!abort"()

declare void @"__os!print"(ptr, i32)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "string.rcp", directory: "E:\\C_Projects\\ReComp\\bin\\std")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "format_uint", linkageName: "__string!format_uint", scope: !1, file: !1, line: 4, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !11, !12}
!7 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, align: 8, elements: !9)
!8 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!9 = !{!10}
!10 = !DISubrange(count: 256, lowerBound: 0)
!11 = !DIBasicType(name: "u64", size: 64, encoding: DW_ATE_unsigned)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*uint", baseType: !13, size: 64, align: 64, dwarfAddressSpace: 0)
!13 = !DIBasicType(name: "uint", size: 64, encoding: DW_ATE_unsigned)
!14 = !{}
!15 = !DILocation(line: 4, scope: !4)
!16 = !DILocation(line: 5, scope: !4)
!17 = !DILocation(line: 6, scope: !4)
!18 = !DILocation(line: 7, scope: !4)
!19 = !DILocation(line: 8, scope: !4)
!20 = !DILocation(line: 10, scope: !4)
!21 = !DILocation(line: 12, scope: !4)
!22 = !DILocation(line: 17, scope: !4)
!23 = !DILocation(line: 21, scope: !4)
!24 = !DILocalVariable(name: "num_in", scope: !4, file: !1, line: 4, type: !11)
!25 = !DILocalVariable(name: "out_count", arg: 1, scope: !4, file: !1, line: 4, type: !12)
!26 = !DILocalVariable(name: "buff", scope: !4, file: !1, line: 5, type: !7)
!27 = !DILocalVariable(name: "temp", scope: !4, file: !1, line: 6, type: !7)
!28 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 7, type: !11)
!29 = !DILocalVariable(name: "count", scope: !4, file: !1, line: 8, type: !30)
!30 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!31 = !DILocation(line: 9, scope: !4)
!32 = !DILocalVariable(name: "digit", scope: !4, file: !1, line: 10, type: !11)
!33 = !DILocation(line: 11, scope: !4)
!34 = !DILocalVariable(name: "c", scope: !4, file: !1, line: 12, type: !11)
!35 = !DILocation(line: 13, scope: !4)
!36 = !DILocation(line: 14, scope: !4)
!37 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 17, type: !30)
!38 = !DILocation(line: 18, scope: !4)
!39 = !DILocalVariable(name: "out", scope: !4, file: !1, line: 21, type: !12)
!40 = !DILocation(line: 22, scope: !4)
!41 = !DILocation(line: 23, scope: !4)
!42 = distinct !DISubprogram(name: "print_int", linkageName: "__string!print_int", scope: !1, file: !1, line: 26, type: !43, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!43 = !DISubroutineType(types: !44)
!44 = !{null, !45}
!45 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!46 = !DILocation(line: 26, scope: !42)
!47 = !DILocation(line: 27, scope: !42)
!48 = !DILocation(line: 28, scope: !42)
!49 = !DILocalVariable(name: "num", scope: !42, file: !1, line: 26, type: !45)
!50 = !DILocalVariable(name: "count", scope: !42, file: !1, line: 27, type: !13)
!51 = !DILocalVariable(name: "buff", scope: !42, file: !1, line: 28, type: !7)
!52 = !DILocation(line: 29, scope: !42)
!53 = distinct !DISubprogram(name: "get_next", linkageName: "__string!get_next", scope: !1, file: !1, line: 32, type: !54, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!54 = !DISubroutineType(types: !55)
!55 = !{!45, !56}
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !8, size: 64, align: 64, dwarfAddressSpace: 0)
!57 = !DILocation(line: 32, scope: !53)
!58 = !DILocation(line: 33, scope: !53)
!59 = !DILocation(line: 34, scope: !53)
!60 = !DILocalVariable(name: "curr", scope: !53, file: !1, line: 32, type: !56)
!61 = !DILocalVariable(name: "scan", scope: !53, file: !1, line: 33, type: !56)
!62 = !DILocalVariable(name: "codepoint", scope: !53, file: !1, line: 34, type: !45)
!63 = !DILocation(line: 35, scope: !53)
!64 = !DILocation(line: 36, scope: !53)
!65 = !DILocation(line: 37, scope: !53)
!66 = !DILocation(line: 38, scope: !53)
!67 = !DILocation(line: 40, scope: !53)
!68 = !DILocation(line: 43, scope: !53)
