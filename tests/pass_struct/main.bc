; ModuleID = 'main'
source_filename = "pass_struct.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!Foo" = type { [1024 x i8] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!give_struct"(ptr %0) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !16, metadata !DIExpression()), !dbg !17
  %1 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !18
  %2 = getelementptr [1024 x i8], ptr %1, i64 0, i64 5, !dbg !18
  %3 = load i8, ptr %2, align 1, !dbg !18
  %4 = sext i8 %3 to i32, !dbg !18
  ret i32 %4, !dbg !18
}

define i32 @"__main!main"() !dbg !19 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !22
  call void @llvm.memset.p0.i32(ptr %0, i8 0, i32 1024, i1 false), !dbg !22
  %1 = alloca [1024 x i8], align 1, !dbg !22
  call void @llvm.memset.p0.i32(ptr %1, i8 0, i32 1024, i1 false), !dbg !22
  %2 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !22
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr align 1 %1, i64 1024, i1 false), !dbg !22
  call void @llvm.dbg.declare(metadata ptr %0, metadata !23, metadata !DIExpression()), !dbg !22
  %3 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !24
  %4 = getelementptr [1024 x i8], ptr %3, i64 0, i64 5, !dbg !24
  store i8 32, ptr %4, align 1, !dbg !24
  %5 = alloca %"__main!Foo", align 8, !dbg !25
  call void @llvm.memset.p0.i32(ptr %5, i8 0, i32 1024, i1 false), !dbg !25
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %5, ptr align 1 %0, i64 1024, i1 false), !dbg !25
  %6 = call i32 @"__main!give_struct"(ptr %5), !dbg !25
  %7 = sub i32 %6, 32, !dbg !25
  ret i32 %7, !dbg !25
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "pass_struct.rcp", directory: "D:\\Programming\\ReComp\\tests\\pass_struct")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "give_struct", linkageName: "__main!give_struct", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 8192, elements: !9)
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "arr", scope: !1, file: !1, baseType: !11, size: 8192, align: 8)
!11 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 8192, align: 8, elements: !13)
!12 = !DIBasicType(name: "i8", size: 8, encoding: DW_ATE_signed)
!13 = !{!14}
!14 = !DISubrange(count: 1024, lowerBound: 0)
!15 = !{}
!16 = !DILocalVariable(name: "foo", scope: !4, file: !1, line: 7, type: !8)
!17 = !DILocation(line: 7, scope: !4)
!18 = !DILocation(line: 8, scope: !4)
!19 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 11, type: !20, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!20 = !DISubroutineType(types: !21)
!21 = !{!7}
!22 = !DILocation(line: 12, scope: !19)
!23 = !DILocalVariable(name: "x", scope: !19, file: !1, line: 12, type: !8)
!24 = !DILocation(line: 13, scope: !19)
!25 = !DILocation(line: 14, scope: !19)
