; ModuleID = 'string'
source_filename = "string.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__os!STD_INPUT_HANDLE" = external global i32
@"__os!STD_OUTPUT_HANDLE" = external global i32
@"__os!STD_ERROR_HANDLE" = external global i32
@"__os!INVALID_HANDLE_VALUE" = external global ptr

define void @"__string!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"__string!format_uint"(ptr %0, i64 %1, ptr %2) !dbg !10 {
block_0:
  %3 = alloca [256 x i8], align 1, !dbg !21
  %4 = alloca [256 x i8], align 1, !dbg !22
  %5 = alloca i64, align 8, !dbg !23
  %6 = alloca i64, align 8, !dbg !24
  call void @llvm.memset.p0.i32(ptr align 1 %3, i8 0, i32 256, i1 false), !dbg !21
  call void @llvm.memset.p0.i32(ptr align 1 %4, i8 0, i32 256, i1 false), !dbg !22
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !23
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false), !dbg !24
  %7 = alloca i64, align 8, !dbg !25
  %8 = alloca i64, align 8, !dbg !26
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 8, i1 false), !dbg !25
  call void @llvm.memset.p0.i32(ptr align 8 %8, i8 0, i32 8, i1 false), !dbg !26
  %9 = alloca i64, align 8, !dbg !27
  call void @llvm.memset.p0.i32(ptr align 8 %9, i8 0, i32 8, i1 false), !dbg !27
  %10 = alloca ptr, align 8, !dbg !28
  call void @llvm.memset.p0.i32(ptr align 8 %10, i8 0, i32 8, i1 false), !dbg !28
  call void @llvm.dbg.value(metadata i64 %1, metadata !29, metadata !DIExpression()), !dbg !30
  call void @llvm.dbg.value(metadata ptr %2, metadata !31, metadata !DIExpression()), !dbg !30
  call void @llvm.dbg.declare(metadata ptr %3, metadata !32, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata ptr %4, metadata !33, metadata !DIExpression()), !dbg !22
  store i64 %1, ptr %5, align 8, !dbg !23
  call void @llvm.dbg.declare(metadata ptr %5, metadata !34, metadata !DIExpression()), !dbg !23
  store i64 0, ptr %6, align 8, !dbg !24
  call void @llvm.dbg.declare(metadata ptr %6, metadata !35, metadata !DIExpression()), !dbg !24
  br label %block_1, !dbg !37

block_1:                                          ; preds = %block_2, %block_0
  %11 = load i64, ptr %5, align 8, !dbg !37
  %12 = icmp ugt i64 %11, 0, !dbg !37
  br i1 %12, label %block_2, label %block_3, !dbg !37

block_2:                                          ; preds = %block_1
  %13 = load i64, ptr %5, align 8, !dbg !25
  %14 = urem i64 %13, 10, !dbg !25
  store i64 %14, ptr %7, align 8, !dbg !25
  call void @llvm.dbg.declare(metadata ptr %7, metadata !38, metadata !DIExpression()), !dbg !25
  %15 = load i64, ptr %5, align 8, !dbg !39
  %16 = udiv i64 %15, 10, !dbg !39
  store i64 %16, ptr %5, align 8, !dbg !39
  %17 = load i64, ptr %7, align 8, !dbg !26
  %18 = add i64 48, %17, !dbg !26
  store i64 %18, ptr %8, align 8, !dbg !26
  call void @llvm.dbg.declare(metadata ptr %8, metadata !40, metadata !DIExpression()), !dbg !26
  %19 = load i64, ptr %6, align 8, !dbg !41
  %20 = getelementptr [256 x i8], ptr %4, i64 0, i64 %19, !dbg !41
  %21 = load i64, ptr %8, align 8, !dbg !41
  %22 = trunc i64 %21 to i8, !dbg !41
  store i8 %22, ptr %20, align 1, !dbg !41
  %23 = load i64, ptr %6, align 8, !dbg !42
  %24 = add i64 %23, 1, !dbg !42
  store i64 %24, ptr %6, align 8, !dbg !42
  br label %block_1, !dbg !42

block_3:                                          ; preds = %block_1
  %25 = load i64, ptr %6, align 8, !dbg !27
  store i64 0, ptr %9, align 8, !dbg !27
  call void @llvm.dbg.declare(metadata ptr %9, metadata !43, metadata !DIExpression()), !dbg !27
  br label %block_4, !dbg !27

block_4:                                          ; preds = %block_6, %block_3
  %26 = load i64, ptr %9, align 8, !dbg !27
  %27 = icmp ult i64 %26, %25, !dbg !27
  br i1 %27, label %block_5, label %block_7, !dbg !27

block_5:                                          ; preds = %block_4
  %28 = load i64, ptr %9, align 8, !dbg !44
  %29 = getelementptr [256 x i8], ptr %3, i64 0, i64 %28, !dbg !44
  %30 = load i64, ptr %6, align 8, !dbg !44
  %31 = load i64, ptr %9, align 8, !dbg !44
  %32 = sub i64 %30, %31, !dbg !44
  %33 = sub i64 %32, 1, !dbg !44
  %34 = getelementptr [256 x i8], ptr %4, i64 0, i64 %33, !dbg !44
  %35 = load i8, ptr %34, align 1, !dbg !44
  store i8 %35, ptr %29, align 1, !dbg !44
  br label %block_6, !dbg !44

block_6:                                          ; preds = %block_5
  %36 = load i64, ptr %9, align 8, !dbg !44
  %37 = add i64 %36, 1, !dbg !44
  store i64 %37, ptr %9, align 8, !dbg !44
  br label %block_4, !dbg !44

block_7:                                          ; preds = %block_4
  store ptr %2, ptr %10, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata ptr %10, metadata !45, metadata !DIExpression()), !dbg !28
  %38 = load ptr, ptr %10, align 8, !dbg !46
  %39 = load i64, ptr %6, align 8, !dbg !46
  store i64 %39, ptr %38, align 8, !dbg !46
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %0, ptr align 1 %3, i64 256, i1 false), !dbg !47
  ret void, !dbg !47
}

define void @"__string!print_int"(i32 %0) !dbg !48 {
block_0:
  %1 = alloca i64, align 8, !dbg !52
  %2 = alloca [256 x i8], align 1, !dbg !53
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false), !dbg !52
  call void @llvm.memset.p0.i32(ptr align 1 %2, i8 0, i32 256, i1 false), !dbg !53
  call void @llvm.dbg.value(metadata i32 %0, metadata !54, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr %1, metadata !56, metadata !DIExpression()), !dbg !52
  %3 = zext i32 %0 to i64, !dbg !53
  call void @"__string!format_uint"(ptr %2, i64 %3, ptr %1), !dbg !53
  call void @llvm.dbg.declare(metadata ptr %2, metadata !57, metadata !DIExpression()), !dbg !53
  %4 = getelementptr [256 x i8], ptr %2, i64 0, i64 0, !dbg !58
  %5 = load i64, ptr %1, align 8, !dbg !58
  %6 = trunc i64 %5 to i32, !dbg !58
  call void @"__os!print"(ptr %4, i32 %6), !dbg !58
  ret void, !dbg !58
}

define i32 @"__string!get_next"(ptr %0) !dbg !59 {
block_0:
  %1 = alloca ptr, align 8, !dbg !63
  %2 = alloca i32, align 4, !dbg !64
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false), !dbg !63
  call void @llvm.memset.p0.i32(ptr align 4 %2, i8 0, i32 4, i1 false), !dbg !64
  call void @llvm.dbg.value(metadata ptr %0, metadata !65, metadata !DIExpression()), !dbg !66
  store ptr %0, ptr %1, align 8, !dbg !63
  call void @llvm.dbg.declare(metadata ptr %1, metadata !67, metadata !DIExpression()), !dbg !63
  %3 = load ptr, ptr %1, align 8, !dbg !64
  %4 = load i8, ptr %3, align 1, !dbg !64
  %5 = zext i8 %4 to i32, !dbg !64
  store i32 %5, ptr %2, align 4, !dbg !64
  call void @llvm.dbg.declare(metadata ptr %2, metadata !68, metadata !DIExpression()), !dbg !64
  br label %block_1, !dbg !69

block_1:                                          ; preds = %block_6, %block_0
  br label %block_2, !dbg !69

block_2:                                          ; preds = %block_1
  %6 = load ptr, ptr %1, align 8, !dbg !70
  %7 = load i8, ptr %6, align 1, !dbg !70
  %8 = and i8 %7, 1, !dbg !70
  %9 = icmp ne i8 %8, 0, !dbg !70
  br i1 %9, label %block_4, label %block_5, !dbg !70

block_4:                                          ; preds = %block_2
  %10 = load ptr, ptr %1, align 8, !dbg !71
  %11 = getelementptr i8, ptr %10, i64 1, !dbg !71
  store ptr %11, ptr %1, align 8, !dbg !71
  %12 = load i32, ptr %2, align 4, !dbg !72
  %13 = shl i32 %12, 8, !dbg !72
  %14 = load ptr, ptr %1, align 8, !dbg !72
  %15 = load i8, ptr %14, align 1, !dbg !72
  %16 = zext i8 %15 to i32, !dbg !72
  %17 = or i32 %13, %16, !dbg !72
  store i32 %17, ptr %2, align 4, !dbg !72
  br label %block_6, !dbg !72

block_5:                                          ; preds = %block_2
  %18 = load i32, ptr %2, align 4, !dbg !73
  ret i32 %18, !dbg !73

block_6:                                          ; preds = %block_4
  br label %block_1, !dbg !73

block_3:                                          ; No predecessors!
  %19 = load i32, ptr %2, align 4, !dbg !74
  ret i32 %19, !dbg !74
}

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare void @"__os!abort"()

declare void @"__os!print"(ptr, i32)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!8, !9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "string.rcp", directory: "D:\\Programming\\ReComp\\bin\\std")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__main!MyEnum", scope: !1, file: !1, size: 32, align: 32, elements: !4)
!4 = !{!5, !6, !7}
!5 = !DIEnumerator(name: "SOME_NAME", value: 1)
!6 = !DIEnumerator(name: "OTHER_NAME", value: 2)
!7 = !DIEnumerator(name: "FINAL_NAME", value: 3)
!8 = !{i32 2, !"CodeView", i32 1}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = distinct !DISubprogram(name: "format_uint", linkageName: "__string!format_uint", scope: !1, file: !1, line: 4, type: !11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !20)
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !17, !18}
!13 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 2048, align: 8, elements: !15)
!14 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!15 = !{!16}
!16 = !DISubrange(count: 256, lowerBound: 0)
!17 = !DIBasicType(name: "u64", size: 64, encoding: DW_ATE_unsigned)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*uint", baseType: !19, size: 64, align: 64, dwarfAddressSpace: 0)
!19 = !DIBasicType(name: "uint", size: 64, encoding: DW_ATE_unsigned)
!20 = !{}
!21 = !DILocation(line: 5, scope: !10)
!22 = !DILocation(line: 6, scope: !10)
!23 = !DILocation(line: 7, scope: !10)
!24 = !DILocation(line: 8, scope: !10)
!25 = !DILocation(line: 10, scope: !10)
!26 = !DILocation(line: 12, scope: !10)
!27 = !DILocation(line: 17, scope: !10)
!28 = !DILocation(line: 21, scope: !10)
!29 = !DILocalVariable(name: "num_in", scope: !10, file: !1, line: 4, type: !17)
!30 = !DILocation(line: 4, scope: !10)
!31 = !DILocalVariable(name: "out_count", arg: 1, scope: !10, file: !1, line: 4, type: !18)
!32 = !DILocalVariable(name: "buff", scope: !10, file: !1, line: 5, type: !13)
!33 = !DILocalVariable(name: "temp", scope: !10, file: !1, line: 6, type: !13)
!34 = !DILocalVariable(name: "num", scope: !10, file: !1, line: 7, type: !17)
!35 = !DILocalVariable(name: "count", scope: !10, file: !1, line: 8, type: !36)
!36 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!37 = !DILocation(line: 9, scope: !10)
!38 = !DILocalVariable(name: "digit", scope: !10, file: !1, line: 10, type: !17)
!39 = !DILocation(line: 11, scope: !10)
!40 = !DILocalVariable(name: "c", scope: !10, file: !1, line: 12, type: !17)
!41 = !DILocation(line: 13, scope: !10)
!42 = !DILocation(line: 14, scope: !10)
!43 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 17, type: !36)
!44 = !DILocation(line: 18, scope: !10)
!45 = !DILocalVariable(name: "out", scope: !10, file: !1, line: 21, type: !18)
!46 = !DILocation(line: 22, scope: !10)
!47 = !DILocation(line: 23, scope: !10)
!48 = distinct !DISubprogram(name: "print_int", linkageName: "__string!print_int", scope: !1, file: !1, line: 26, type: !49, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !20)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !51}
!51 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!52 = !DILocation(line: 27, scope: !48)
!53 = !DILocation(line: 28, scope: !48)
!54 = !DILocalVariable(name: "num", scope: !48, file: !1, line: 26, type: !51)
!55 = !DILocation(line: 26, scope: !48)
!56 = !DILocalVariable(name: "count", scope: !48, file: !1, line: 27, type: !19)
!57 = !DILocalVariable(name: "buff", scope: !48, file: !1, line: 28, type: !13)
!58 = !DILocation(line: 29, scope: !48)
!59 = distinct !DISubprogram(name: "get_next", linkageName: "__string!get_next", scope: !1, file: !1, line: 32, type: !60, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !20)
!60 = !DISubroutineType(types: !61)
!61 = !{!51, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !14, size: 64, align: 64, dwarfAddressSpace: 0)
!63 = !DILocation(line: 33, scope: !59)
!64 = !DILocation(line: 34, scope: !59)
!65 = !DILocalVariable(name: "curr", scope: !59, file: !1, line: 32, type: !62)
!66 = !DILocation(line: 32, scope: !59)
!67 = !DILocalVariable(name: "scan", scope: !59, file: !1, line: 33, type: !62)
!68 = !DILocalVariable(name: "codepoint", scope: !59, file: !1, line: 34, type: !51)
!69 = !DILocation(line: 35, scope: !59)
!70 = !DILocation(line: 36, scope: !59)
!71 = !DILocation(line: 37, scope: !59)
!72 = !DILocation(line: 38, scope: !59)
!73 = !DILocation(line: 40, scope: !59)
!74 = !DILocation(line: 43, scope: !59)
