
//printf :: fn #cdecl(fmt: cstring, num: i64);
//malloc :: fn #cdecl(size: int) -> u8*;
//free   :: fn #cdecl(ptr: u8*);

struct Foo {
	x: i32,
	data: i32[5],
}

main :: fn() -> i32 {
	x := Foo { data = {}, x = 4};

	return x.data[3] - x.x;

}


// GENERICS SYNTAX
// struct stack!T {
// 	items: T[];
//  top: int;
// }
// 
// push!T :: fn(Stack: *stack!T, item: T) -> T {
// 	return stack.items[stack.top++] = item;
// }

// 1. 2 * 3
// 2. 4 / 1
// 3. (2) % 0
// 4. 10 + (1) - (3)

