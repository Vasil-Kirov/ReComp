; ModuleID = 'main'
source_filename = "generics.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca i64, align 8, !dbg !9
  %1 = alloca i32, align 4, !dbg !10
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 8, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 4 %1, i8 0, i32 4, i1 false), !dbg !10
  %2 = call i64 @"get_num@type_int_@int"(i64 15, i64 3), !dbg !9
  store i64 %2, ptr %0, align 8, !dbg !9
  call void @llvm.dbg.declare(metadata ptr %0, metadata !11, metadata !DIExpression()), !dbg !9
  %3 = call i32 @"get_num@type_i32_@i32"(i64 9, i64 1), !dbg !10
  store i32 %3, ptr %1, align 4, !dbg !10
  call void @llvm.dbg.declare(metadata ptr %1, metadata !13, metadata !DIExpression()), !dbg !10
  %4 = load i64, ptr %0, align 8, !dbg !14
  %5 = load i32, ptr %1, align 4, !dbg !14
  %6 = mul i32 %5, 3, !dbg !14
  %7 = sext i32 %6 to i64, !dbg !14
  %8 = sub i64 %4, %7, !dbg !14
  %9 = trunc i64 %8 to i32, !dbg !14
  ret i32 %9, !dbg !14
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

define private i64 @"get_num@type_int_@int"(i64 %0, i64 %1) !dbg !15 {
block_0:
  %2 = alloca i64, align 8, !dbg !19
  %3 = alloca i64, align 8, !dbg !19
  %4 = alloca i64, align 8, !dbg !20
  %5 = alloca i64, align 8, !dbg !21
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !19
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !19
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false), !dbg !20
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !21
  store i64 %0, ptr %2, align 8, !dbg !19
  call void @llvm.dbg.value(metadata ptr %2, metadata !22, metadata !DIExpression()), !dbg !19
  store i64 %1, ptr %3, align 8, !dbg !19
  call void @llvm.dbg.value(metadata ptr %3, metadata !23, metadata !DIExpression()), !dbg !19
  store i64 10, ptr %4, align 8, !dbg !20
  call void @llvm.dbg.declare(metadata ptr %4, metadata !24, metadata !DIExpression()), !dbg !20
  store i64 20, ptr %5, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %5, metadata !25, metadata !DIExpression()), !dbg !21
  %6 = load i64, ptr %4, align 8, !dbg !26
  %7 = load i64, ptr %5, align 8, !dbg !26
  %8 = add i64 %6, %7, !dbg !26
  %9 = load i64, ptr %3, align 8, !dbg !26
  %10 = mul i64 %8, %9, !dbg !26
  ret i64 %10, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define private i32 @"get_num@type_i32_@i32"(i64 %0, i32 %1) !dbg !27 {
block_0:
  %2 = alloca i64, align 8, !dbg !30
  %3 = alloca i32, align 4, !dbg !30
  %4 = alloca i32, align 4, !dbg !31
  %5 = alloca i32, align 4, !dbg !32
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !30
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !30
  call void @llvm.memset.p0.i32(ptr align 4 %4, i8 0, i32 4, i1 false), !dbg !31
  call void @llvm.memset.p0.i32(ptr align 4 %5, i8 0, i32 4, i1 false), !dbg !32
  store i64 %0, ptr %2, align 8, !dbg !30
  call void @llvm.dbg.value(metadata ptr %2, metadata !33, metadata !DIExpression()), !dbg !30
  store i32 %1, ptr %3, align 4, !dbg !30
  call void @llvm.dbg.value(metadata ptr %3, metadata !34, metadata !DIExpression()), !dbg !30
  store i32 10, ptr %4, align 4, !dbg !31
  call void @llvm.dbg.declare(metadata ptr %4, metadata !35, metadata !DIExpression()), !dbg !31
  store i32 20, ptr %5, align 4, !dbg !32
  call void @llvm.dbg.declare(metadata ptr %5, metadata !36, metadata !DIExpression()), !dbg !32
  %6 = load i32, ptr %4, align 4, !dbg !37
  %7 = load i32, ptr %5, align 4, !dbg !37
  %8 = add i32 %6, %7, !dbg !37
  %9 = load i32, ptr %3, align 4, !dbg !37
  %10 = mul i32 %8, %9, !dbg !37
  ret i32 %10, !dbg !37
}

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "generics.rcp", directory: "E:\\C_Projects\\ReComp\\tests\\generics")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 9, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 10, scope: !4)
!10 = !DILocation(line: 11, scope: !4)
!11 = !DILocalVariable(name: "foo", scope: !4, file: !1, line: 10, type: !12)
!12 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!13 = !DILocalVariable(name: "bar", scope: !4, file: !1, line: 11, type: !7)
!14 = !DILocation(line: 12, scope: !4)
!15 = distinct !DISubprogram(name: "get_num@type_int_@int", linkageName: "__main!get_num@type_int_@int", scope: !1, file: !1, line: 3, type: !16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!16 = !DISubroutineType(types: !17)
!17 = !{!12, !18, !12}
!18 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!19 = !DILocation(line: 3, scope: !15)
!20 = !DILocation(line: 4, scope: !15)
!21 = !DILocation(line: 5, scope: !15)
!22 = !DILocalVariable(name: "T", scope: !15, file: !1, line: 3, type: !18)
!23 = !DILocalVariable(name: "m", arg: 1, scope: !15, file: !1, line: 3, type: !12)
!24 = !DILocalVariable(name: "x", scope: !15, file: !1, line: 4, type: !12)
!25 = !DILocalVariable(name: "y", scope: !15, file: !1, line: 5, type: !12)
!26 = !DILocation(line: 6, scope: !15)
!27 = distinct !DISubprogram(name: "get_num@type_i32_@i32", linkageName: "__main!get_num@type_i32_@i32", scope: !1, file: !1, line: 3, type: !28, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!28 = !DISubroutineType(types: !29)
!29 = !{!7, !18, !7}
!30 = !DILocation(line: 3, scope: !27)
!31 = !DILocation(line: 4, scope: !27)
!32 = !DILocation(line: 5, scope: !27)
!33 = !DILocalVariable(name: "T", scope: !27, file: !1, line: 3, type: !18)
!34 = !DILocalVariable(name: "m", arg: 1, scope: !27, file: !1, line: 3, type: !7)
!35 = !DILocalVariable(name: "x", scope: !27, file: !1, line: 4, type: !7)
!36 = !DILocalVariable(name: "y", scope: !27, file: !1, line: 5, type: !7)
!37 = !DILocation(line: 6, scope: !27)
