build

#import compile as c
#import io
#import init
#import os
#import array as arr
#import mem

puts :: fn #foreign(str: *u8);

// @BUG
// my_fff :: fn() -> i32 { return 4; }
// 
// enum v {
// 	A = my_fff(),
// }


compile :: fn() -> c.CompileInfo {
    out := c.CompileInfo {
        files = []string { "../file1.rcp", "../file2.rcp", "../file3.rcp" },
        //files = []string { "../file1.rcp" },
        opt = 0,
        flags = @u32 c.CompileFlag.DebugInfo,
        //flags = @u32 (c.CompileFlag.SanAddress | c.CompileFlag.Standalone | c.CompileFlag.NoLink),
        //link = "/SUBSYSTEM:windows",
    };

   for f in out.files {
       io.println("Compiling file: %", f);
   }

   //enum_ := (#info c.CompileFlag).t.enum_;
   //io.println("Name: %", enum_.name);
   //for it in enum_.members {
   //    io.println("name: %, value: %", it.name, it.value);
   // }
   //io.println("flag: %", c.CompileFlag.DebugInfo);



    return out;
}

after_link :: fn() {
    for c in "Done" {
        io.println("%c", c);
    }
    return;
}

