; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice = type { i64, ptr }
%slice.1 = type { i64, ptr }

@0 = private unnamed_addr constant [7 x i8] c"hellos\00", align 1

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

declare void @puts(ptr)

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca %slice, align 8, !dbg !9
  %1 = alloca %slice, align 8, !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !9
  call void @puts(ptr @0), !dbg !10
  call void @"make_slice@type_@[]i32"(ptr %0, i64 9), !dbg !9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !9
  call void @llvm.dbg.declare(metadata ptr %1, metadata !11, metadata !DIExpression()), !dbg !9
  %2 = getelementptr inbounds %slice, ptr %1, i32 0, i32 0, !dbg !18
  %3 = load i64, ptr %2, align 8, !dbg !18
  %4 = trunc i64 %3 to i32, !dbg !18
  ret i32 %4, !dbg !18
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

define private void @"make_slice@type_@[]i32"(ptr %0, i64 %1) !dbg !19 {
block_0:
  %2 = alloca i64, align 8, !dbg !23
  %3 = alloca %slice.1, align 8, !dbg !24
  %4 = alloca [3 x i32], align 4, !dbg !24
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !23
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 16, i1 false), !dbg !24
  call void @llvm.memset.p0.i32(ptr align 4 %4, i8 0, i32 12, i1 false), !dbg !24
  store i64 %1, ptr %2, align 8, !dbg !23
  call void @llvm.dbg.value(metadata ptr %2, metadata !25, metadata !DIExpression()), !dbg !23
  %5 = getelementptr [3 x i32], ptr %4, i64 0, i64 0, !dbg !24
  store i32 1, ptr %5, align 4, !dbg !24
  %6 = getelementptr [3 x i32], ptr %4, i64 0, i64 1, !dbg !24
  store i32 2, ptr %6, align 4, !dbg !24
  %7 = getelementptr [3 x i32], ptr %4, i64 0, i64 2, !dbg !24
  store i32 3, ptr %7, align 4, !dbg !24
  %8 = getelementptr inbounds %slice.1, ptr %3, i32 0, i32 0, !dbg !24
  %9 = getelementptr inbounds %slice.1, ptr %3, i32 0, i32 1, !dbg !24
  store ptr %4, ptr %9, align 8, !dbg !24
  store i64 3, ptr %8, align 8, !dbg !24
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 16, i1 false), !dbg !24
  ret void, !dbg !24
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 23, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 25, scope: !4)
!10 = !DILocation(line: 24, scope: !4)
!11 = !DILocalVariable(name: "x", scope: !4, file: !1, line: 25, type: !12)
!12 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !13)
!13 = !{!14, !16}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !15, size: 64, align: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !17, size: 64, align: 64, offset: 64)
!17 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!18 = !DILocation(line: 26, scope: !4)
!19 = distinct !DISubprogram(name: "make_slice@type_@[]i32", linkageName: "__main!make_slice@type_@[]i32", scope: !1, file: !1, line: 19, type: !20, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!20 = !DISubroutineType(types: !21)
!21 = !{!12, !22}
!22 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!23 = !DILocation(line: 19, scope: !19)
!24 = !DILocation(line: 20, scope: !19)
!25 = !DILocalVariable(name: "T", scope: !19, file: !1, line: 19, type: !22)
