module main

//#import "compiler/lexer.rcp" as *;
//#import "libc.rcp";

#import io as *
#import mem

//foo: []string;

main :: fn() -> i32 {
    println("%", 0.1005);
    println("%", 0.3 * 0.3);
    println("%", v4{0.3, 0, 0, 0} * v4{0.3, 0, 0, 0});


    test_dst := v4{0.12, 0.12, 0.18, 1.0};
    test_src := v4{0, 0, 0, 0.30};
    alpha := test_src.w;
    alpha4 := v4{alpha, alpha, alpha, alpha};
    alphainv := v4{1, 1, 1, 1} - alpha4;
    println("% -> %", test_src, test_dst);
    println("alpha: % | % | % | %", alpha4, test_src * alpha4, alphainv, test_dst * alphainv);
    println("%", 1.0);

    return 0;
}


//	foo = .{"asd"};
//
//	malloc_alloc := libc.make_malloc_allocator(true);
//	lexer := make_lexer(&malloc_alloc);
//	add_compiler_keywords(&lexer);
//	tokens := lex_string(&lexer, "main :: fn() -> i32;", &malloc_alloc, .{"text", 1, 1});
//	for token in tokens {
//		println("token: %", token);
//	}
