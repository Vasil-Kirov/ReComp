; ModuleID = 'os'
source_filename = "os.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__os!STD_INPUT_HANDLE" = global i32 0
@"__os!STD_OUTPUT_HANDLE" = global i32 0
@"__os!STD_ERROR_HANDLE" = global i32 0
@"__os!INVALID_HANDLE_VALUE" = global ptr null

define void @"__os!__GlobalInitializerFunction"() {
block_0:
  store i32 -10, ptr @"__os!STD_INPUT_HANDLE", align 4
  store i32 -11, ptr @"__os!STD_OUTPUT_HANDLE", align 4
  store i32 -12, ptr @"__os!STD_ERROR_HANDLE", align 4
  store ptr inttoptr (i64 -1 to ptr), ptr @"__os!INVALID_HANDLE_VALUE", align 8
  ret void
}

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

define void @"__os!abort"() !dbg !10 {
block_0:
  call void @ExitProcess(i32 1), !dbg !13
  ret void, !dbg !14
}

define void @"__os!print"(ptr %0, i32 %1) !dbg !15 {
block_0:
  %2 = alloca ptr, align 8, !dbg !22
  %3 = alloca i32, align 4, !dbg !23
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !22
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !23
  call void @llvm.dbg.value(metadata ptr %0, metadata !24, metadata !DIExpression()), !dbg !25
  call void @llvm.dbg.value(metadata i32 %1, metadata !26, metadata !DIExpression()), !dbg !25
  %4 = load i32, ptr @"__os!STD_OUTPUT_HANDLE", align 4, !dbg !22
  %5 = call ptr @GetStdHandle(i32 %4), !dbg !22
  store ptr %5, ptr %2, align 8, !dbg !22
  call void @llvm.dbg.declare(metadata ptr %2, metadata !27, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata ptr %3, metadata !29, metadata !DIExpression()), !dbg !23
  %6 = load ptr, ptr %2, align 8, !dbg !30
  %7 = icmp ne ptr %6, null, !dbg !30
  %8 = load ptr, ptr %2, align 8, !dbg !30
  %9 = load ptr, ptr @"__os!INVALID_HANDLE_VALUE", align 8, !dbg !30
  %10 = icmp ne ptr %8, %9, !dbg !30
  %11 = icmp ne i1 %7, false, !dbg !30
  %12 = icmp ne i1 %10, false, !dbg !30
  %13 = and i1 %11, %12, !dbg !30
  br i1 %13, label %block_1, label %block_2, !dbg !30

block_1:                                          ; preds = %block_0
  %14 = load ptr, ptr %2, align 8, !dbg !31
  %15 = call i1 @WriteFile(ptr %14, ptr %0, i32 %1, ptr %3, ptr null), !dbg !31
  br label %block_3, !dbg !31

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !31

block_3:                                          ; preds = %block_2, %block_1
  ret void, !dbg !30
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!8, !9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "os.rcp", directory: "D:\\Programming\\ReComp\\bin\\std")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__main!MyEnum", scope: !1, file: !1, size: 32, align: 32, elements: !4)
!4 = !{!5, !6, !7}
!5 = !DIEnumerator(name: "SOME_NAME", value: 1)
!6 = !DIEnumerator(name: "OTHER_NAME", value: 2)
!7 = !DIEnumerator(name: "FINAL_NAME", value: 3)
!8 = !{i32 2, !"CodeView", i32 1}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = distinct !DISubprogram(name: "abort", linkageName: "__os!abort", scope: !1, file: !1, line: 14, type: !11, spFlags: DISPFlagDefinition, unit: !0)
!11 = !DISubroutineType(types: !12)
!12 = !{null}
!13 = !DILocation(line: 15, scope: !10)
!14 = !DILocation(line: 16, scope: !10)
!15 = distinct !DISubprogram(name: "print", linkageName: "__os!print", scope: !1, file: !1, line: 19, type: !16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !18, !20}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !19, size: 64, align: 64, dwarfAddressSpace: 0)
!19 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!20 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!21 = !{}
!22 = !DILocation(line: 20, scope: !15)
!23 = !DILocation(line: 21, scope: !15)
!24 = !DILocalVariable(name: "data", scope: !15, file: !1, line: 19, type: !18)
!25 = !DILocation(line: 19, scope: !15)
!26 = !DILocalVariable(name: "count", arg: 1, scope: !15, file: !1, line: 19, type: !20)
!27 = !DILocalVariable(name: "handle", scope: !15, file: !1, line: 20, type: !28)
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!29 = !DILocalVariable(name: "written", scope: !15, file: !1, line: 21, type: !20)
!30 = !DILocation(line: 22, scope: !15)
!31 = !DILocation(line: 23, scope: !15)
