; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__memory!Allocator" = type { ptr, ptr }
%slice = type { i64, ptr }
%slice.1 = type { i64, ptr }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

declare void @puts(ptr)

declare ptr @malloc(i64)

define ptr @"__main!allocator_alloc"(i64 %0, ptr %1) !dbg !4 {
block_0:
  %2 = alloca i64, align 8, !dbg !18
  %3 = alloca ptr, align 8, !dbg !18
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !18
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !18
  store i64 %0, ptr %2, align 8, !dbg !18
  call void @llvm.dbg.value(metadata ptr %2, metadata !19, metadata !DIExpression()), !dbg !18
  store ptr %1, ptr %3, align 8, !dbg !18
  call void @llvm.dbg.value(metadata ptr %3, metadata !20, metadata !DIExpression()), !dbg !18
  %4 = load i64, ptr %2, align 8, !dbg !21
  %5 = call ptr @malloc(i64 %4), !dbg !21
  ret ptr %5, !dbg !21
}

define i32 @"__main!main"() !dbg !22 {
block_0:
  %0 = alloca %"__memory!Allocator", align 8, !dbg !26
  %1 = alloca %"__memory!Allocator", align 8, !dbg !26
  %2 = alloca %slice, align 8, !dbg !27
  %3 = alloca %slice, align 8, !dbg !27
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !26
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !26
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 16, i1 false), !dbg !27
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 16, i1 false), !dbg !27
  %4 = getelementptr inbounds %"__memory!Allocator", ptr %0, i32 0, i32 0, !dbg !26
  store ptr @"__main!allocator_alloc", ptr %4, align 8, !dbg !26
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !26
  call void @llvm.dbg.declare(metadata ptr %1, metadata !28, metadata !DIExpression()), !dbg !26
  call void @"make_slice@*__memory!Allocator_type_int_@[]i32"(ptr %2, ptr %1, i64 9, i64 10), !dbg !27
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %2, i64 16, i1 false), !dbg !27
  call void @llvm.dbg.declare(metadata ptr %3, metadata !29, metadata !DIExpression()), !dbg !27
  %5 = getelementptr inbounds %slice, ptr %3, i32 0, i32 0, !dbg !35
  %6 = load i64, ptr %5, align 8, !dbg !35
  %7 = trunc i64 %6 to i32, !dbg !35
  ret i32 %7, !dbg !35
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define private void @"make_slice@*__memory!Allocator_type_int_@[]i32"(ptr %0, ptr %1, i64 %2, i64 %3) !dbg !36 {
block_0:
  %4 = alloca ptr, align 8, !dbg !40
  %5 = alloca i64, align 8, !dbg !40
  %6 = alloca i64, align 8, !dbg !40
  %7 = alloca %slice.1, align 8, !dbg !41
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false), !dbg !40
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !40
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false), !dbg !40
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 16, i1 false), !dbg !41
  store ptr %1, ptr %4, align 8, !dbg !40
  call void @llvm.dbg.value(metadata ptr %4, metadata !42, metadata !DIExpression()), !dbg !40
  store i64 %2, ptr %5, align 8, !dbg !40
  call void @llvm.dbg.value(metadata ptr %5, metadata !43, metadata !DIExpression()), !dbg !40
  store i64 %3, ptr %6, align 8, !dbg !40
  call void @llvm.dbg.value(metadata ptr %6, metadata !44, metadata !DIExpression()), !dbg !40
  %8 = load ptr, ptr %4, align 8, !dbg !41
  %9 = getelementptr inbounds %"__memory!Allocator", ptr %8, i32 0, i32 0, !dbg !41
  %10 = load ptr, ptr %9, align 8, !dbg !41
  %11 = load i64, ptr %6, align 8, !dbg !41
  %12 = load ptr, ptr %4, align 8, !dbg !41
  %13 = call ptr %10(i64 %11, ptr %12), !dbg !41
  %14 = load i64, ptr %6, align 8, !dbg !41
  %15 = getelementptr inbounds %slice.1, ptr %7, i32 0, i32 0, !dbg !41
  %16 = getelementptr inbounds %slice.1, ptr %7, i32 0, i32 1, !dbg !41
  store ptr %13, ptr %16, align 8, !dbg !41
  store i64 %14, ptr %15, align 8, !dbg !41
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !41
  ret void, !dbg !41
}

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "allocator_alloc", linkageName: "__main!allocator_alloc", scope: !1, file: !1, line: 8, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!8 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !10, size: 64, align: 64, dwarfAddressSpace: 0)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, elements: !11)
!11 = !{!12, !16}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !13, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *) -> *", baseType: !14, size: 64, align: 64, dwarfAddressSpace: 0)
!14 = !DISubroutineType(types: !15)
!15 = !{!7, !8, !7}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !7, size: 64, align: 64, offset: 64)
!17 = !{}
!18 = !DILocation(line: 8, scope: !4)
!19 = !DILocalVariable(name: "size", scope: !4, file: !1, line: 8, type: !8)
!20 = !DILocalVariable(name: "this", arg: 1, scope: !4, file: !1, line: 8, type: !9)
!21 = !DILocation(line: 9, scope: !4)
!22 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 12, type: !23, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!23 = !DISubroutineType(types: !24)
!24 = !{!25}
!25 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!26 = !DILocation(line: 13, scope: !22)
!27 = !DILocation(line: 16, scope: !22)
!28 = !DILocalVariable(name: "alloc", scope: !22, file: !1, line: 13, type: !10)
!29 = !DILocalVariable(name: "x", scope: !22, file: !1, line: 16, type: !30)
!30 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !31)
!31 = !{!32, !34}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !33, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !25, size: 64, align: 64, dwarfAddressSpace: 0)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !8, size: 64, align: 64, offset: 64)
!35 = !DILocation(line: 17, scope: !22)
!36 = distinct !DISubprogram(name: "make_slice@*__memory!Allocator_type_int_@[]i32", linkageName: "__main!make_slice@*__memory!Allocator_type_int_@[]i32", scope: !1, file: !1, line: 10, type: !37, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!37 = !DISubroutineType(types: !38)
!38 = !{!30, !9, !39, !8}
!39 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!40 = !DILocation(line: 10, scope: !36)
!41 = !DILocation(line: 11, scope: !36)
!42 = !DILocalVariable(name: "allocator", scope: !36, file: !1, line: 10, type: !9)
!43 = !DILocalVariable(name: "T", arg: 1, scope: !36, file: !1, line: 10, type: !39)
!44 = !DILocalVariable(name: "size", arg: 2, scope: !36, file: !1, line: 10, type: !8)
