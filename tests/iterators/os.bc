; ModuleID = 'os'
source_filename = "os.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__os!STD_INPUT_HANDLE" = global i32 0
@"__os!STD_OUTPUT_HANDLE" = global i32 0
@"__os!STD_ERROR_HANDLE" = global i32 0
@"__os!INVALID_HANDLE_VALUE" = global ptr null

define void @"__os!__GlobalInitializerFunction"() {
block_0:
  store i32 -10, ptr @"__os!STD_INPUT_HANDLE", align 4
  store i32 -11, ptr @"__os!STD_OUTPUT_HANDLE", align 4
  store i32 -12, ptr @"__os!STD_ERROR_HANDLE", align 4
  store ptr inttoptr (i64 -1 to ptr), ptr @"__os!INVALID_HANDLE_VALUE", align 8
  ret void
}

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

define void @"__os!abort"() !dbg !4 {
block_0:
  call void @ExitProcess(i32 1), !dbg !7
  ret void, !dbg !8
}

define void @"__os!print"(ptr %0, i32 %1) !dbg !9 {
block_0:
  %2 = alloca ptr, align 8, !dbg !16
  %3 = alloca i32, align 4, !dbg !17
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !17
  call void @llvm.dbg.value(metadata ptr %0, metadata !18, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %1, metadata !20, metadata !DIExpression()), !dbg !19
  %4 = load i32, ptr @"__os!STD_OUTPUT_HANDLE", align 4, !dbg !16
  %5 = call ptr @GetStdHandle(i32 %4), !dbg !16
  store ptr %5, ptr %2, align 8, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %2, metadata !21, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata ptr %3, metadata !23, metadata !DIExpression()), !dbg !17
  %6 = load ptr, ptr %2, align 8, !dbg !24
  %7 = icmp ne ptr %6, null, !dbg !24
  %8 = load ptr, ptr %2, align 8, !dbg !24
  %9 = load ptr, ptr @"__os!INVALID_HANDLE_VALUE", align 8, !dbg !24
  %10 = icmp ne ptr %8, %9, !dbg !24
  %11 = icmp ne i1 %7, false, !dbg !24
  %12 = icmp ne i1 %10, false, !dbg !24
  %13 = and i1 %11, %12, !dbg !24
  br i1 %13, label %block_1, label %block_2, !dbg !24

block_1:                                          ; preds = %block_0
  %14 = load ptr, ptr %2, align 8, !dbg !25
  %15 = call i1 @WriteFile(ptr %14, ptr %0, i32 %1, ptr %3, ptr null), !dbg !25
  br label %block_3, !dbg !25

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !25

block_3:                                          ; preds = %block_2, %block_1
  ret void, !dbg !24
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "os.rcp", directory: "D:\\Programming\\ReComp\\bin\\std")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "abort", linkageName: "__os!abort", scope: !1, file: !1, line: 14, type: !5, spFlags: DISPFlagDefinition, unit: !0)
!5 = !DISubroutineType(types: !6)
!6 = !{null}
!7 = !DILocation(line: 15, scope: !4)
!8 = !DILocation(line: 16, scope: !4)
!9 = distinct !DISubprogram(name: "print", linkageName: "__os!print", scope: !1, file: !1, line: 19, type: !10, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!10 = !DISubroutineType(types: !11)
!11 = !{null, !12, !14}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !13, size: 64, align: 64, dwarfAddressSpace: 0)
!13 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!14 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!15 = !{}
!16 = !DILocation(line: 20, scope: !9)
!17 = !DILocation(line: 21, scope: !9)
!18 = !DILocalVariable(name: "data", scope: !9, file: !1, line: 19, type: !12)
!19 = !DILocation(line: 19, scope: !9)
!20 = !DILocalVariable(name: "count", arg: 1, scope: !9, file: !1, line: 19, type: !14)
!21 = !DILocalVariable(name: "handle", scope: !9, file: !1, line: 20, type: !22)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!23 = !DILocalVariable(name: "written", scope: !9, file: !1, line: 21, type: !14)
!24 = !DILocation(line: 22, scope: !9)
!25 = !DILocation(line: 23, scope: !9)
