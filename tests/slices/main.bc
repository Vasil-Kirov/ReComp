; ModuleID = 'main'
source_filename = "slices.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice = type { i64, ptr }
%slice.1 = type { i64, ptr }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!get_sum"(ptr %0) !dbg !4 {
block_0:
  %1 = alloca %slice, align 8, !dbg !15
  %2 = alloca i64, align 8, !dbg !16
  %3 = alloca i64, align 8, !dbg !17
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !15
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !16
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !17
  %4 = alloca i32, align 4, !dbg !18
  call void @llvm.memset.p0.i32(ptr align 4 %4, i8 0, i32 4, i1 false), !dbg !18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !15
  call void @llvm.dbg.value(metadata ptr %1, metadata !19, metadata !DIExpression()), !dbg !15
  store i64 0, ptr %2, align 8, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %2, metadata !20, metadata !DIExpression()), !dbg !16
  %5 = getelementptr inbounds %slice, ptr %1, i32 0, i32 0, !dbg !17
  %6 = load i64, ptr %5, align 8, !dbg !17
  store i64 0, ptr %3, align 8, !dbg !17
  call void @llvm.dbg.declare(metadata ptr %3, metadata !22, metadata !DIExpression()), !dbg !17
  br label %block_1, !dbg !17

block_1:                                          ; preds = %block_3, %block_0
  %7 = load i64, ptr %3, align 8, !dbg !17
  %8 = icmp ult i64 %7, %6, !dbg !17
  br i1 %8, label %block_2, label %block_4, !dbg !17

block_2:                                          ; preds = %block_1
  %9 = load i64, ptr %3, align 8, !dbg !18
  %10 = getelementptr inbounds %slice, ptr %1, i32 0, i32 1, !dbg !18
  %11 = load ptr, ptr %10, align 8, !dbg !18
  %12 = getelementptr i32, ptr %11, i64 %9, !dbg !18
  %13 = load i32, ptr %12, align 4, !dbg !18
  store i32 %13, ptr %4, align 4, !dbg !18
  call void @llvm.dbg.declare(metadata ptr %4, metadata !23, metadata !DIExpression()), !dbg !18
  %14 = load i64, ptr %2, align 8, !dbg !24
  %15 = load i32, ptr %4, align 4, !dbg !24
  %16 = sext i32 %15 to i64, !dbg !24
  %17 = add i64 %14, %16, !dbg !24
  store i64 %17, ptr %2, align 8, !dbg !24
  br label %block_3, !dbg !24

block_3:                                          ; preds = %block_2
  %18 = load i64, ptr %3, align 8, !dbg !24
  %19 = add i64 %18, 1, !dbg !24
  store i64 %19, ptr %3, align 8, !dbg !24
  br label %block_1, !dbg !24

block_4:                                          ; preds = %block_1
  %20 = load i64, ptr %2, align 8, !dbg !25
  %21 = trunc i64 %20 to i32, !dbg !25
  ret i32 %21, !dbg !25
}

define i32 @"__main!main"() !dbg !26 {
block_0:
  %0 = alloca %slice.1, align 8, !dbg !29
  %1 = alloca [4 x i32], align 4, !dbg !29
  %2 = alloca %slice.1, align 8, !dbg !29
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !29
  call void @llvm.memset.p0.i32(ptr align 4 %1, i8 0, i32 16, i1 false), !dbg !29
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 16, i1 false), !dbg !29
  %3 = getelementptr [4 x i32], ptr %1, i64 0, i64 0, !dbg !29
  store i32 1, ptr %3, align 4, !dbg !29
  %4 = getelementptr [4 x i32], ptr %1, i64 0, i64 1, !dbg !29
  store i32 2, ptr %4, align 4, !dbg !29
  %5 = getelementptr [4 x i32], ptr %1, i64 0, i64 2, !dbg !29
  store i32 3, ptr %5, align 4, !dbg !29
  %6 = getelementptr [4 x i32], ptr %1, i64 0, i64 3, !dbg !29
  store i32 6, ptr %6, align 4, !dbg !29
  %7 = getelementptr inbounds %slice.1, ptr %0, i32 0, i32 0, !dbg !29
  %8 = getelementptr inbounds %slice.1, ptr %0, i32 0, i32 1, !dbg !29
  store ptr %1, ptr %8, align 8, !dbg !29
  store i64 4, ptr %7, align 8, !dbg !29
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 16, i1 false), !dbg !29
  call void @llvm.dbg.declare(metadata ptr %2, metadata !30, metadata !DIExpression()), !dbg !29
  %9 = call i32 @"__main!get_sum"(ptr %2), !dbg !31
  %10 = sub i32 %9, 12, !dbg !31
  ret i32 %10, !dbg !31
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "slices.rcp", directory: "D:\\Programming\\ReComp\\tests\\slices")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "get_sum", linkageName: "__main!get_sum", scope: !1, file: !1, line: 3, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !9)
!9 = !{!10, !12}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !11, size: 64, align: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !13, size: 64, align: 64, offset: 64)
!13 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!14 = !{}
!15 = !DILocation(line: 3, scope: !4)
!16 = !DILocation(line: 4, scope: !4)
!17 = !DILocation(line: 5, scope: !4)
!18 = !DILocation(line: 6, scope: !4)
!19 = !DILocalVariable(name: "my_slice", scope: !4, file: !1, line: 3, type: !8)
!20 = !DILocalVariable(name: "sum", scope: !4, file: !1, line: 4, type: !21)
!21 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!22 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 5, type: !13)
!23 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 6, type: !7)
!24 = !DILocation(line: 7, scope: !4)
!25 = !DILocation(line: 9, scope: !4)
!26 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 12, type: !27, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!27 = !DISubroutineType(types: !28)
!28 = !{!7}
!29 = !DILocation(line: 13, scope: !26)
!30 = !DILocalVariable(name: "slice", scope: !26, file: !1, line: 13, type: !8)
!31 = !DILocation(line: 14, scope: !26)
