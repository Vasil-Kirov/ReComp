mem

struct Allocator {
    alloc: fn(size: int, this: *Allocator) -> ?*,
    free:  fn(ptr: *, this: *Allocator),
    data: ?*,
}

//__raw_slice :: fn #intr (T: type, data: *T, size: int) -> []T;

make_slice :: fn (allocator: *Allocator, T: type, size: int) -> []T {
    res := []T{};
    res.data  = allocator.alloc(size, allocator);
    res.count = size;
    return res;
}

generic_alloc :: fn(size: int, this: *Allocator) -> ?* {
    return alloc(size);
}

generic_free :: fn(ptr: *, this: *Allocator) {
    free(ptr);
}

create_generic_allocator :: fn() -> Allocator {
    r := Allocator {
        alloc = generic_alloc,
        free = generic_free,
        data = null,
    };
    return r;
}

copy  :: fn #link="memcpy"(dst: *, src: *, size: int) -> *;
set   :: fn #link="memset"(dst: *, c: i32, size: int) -> *;
alloc :: fn #link="malloc"(size: int) -> ?*;
free  :: fn #link="free"(mem: *);

