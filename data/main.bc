; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%"main!x" = type { %string, i64 }
%string = type { ptr, i64 }

@"file2!foo" = external global i64
@0 = private unnamed_addr constant [10 x i8] c"my_string\00", align 1

define void @"main!__!GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"main!my_64_fn"() {
block_0:
  ret i32 64
}

define i32 @"main!my_16_fn"(ptr %0) {
block_0:
  %1 = call i32 %0(i32 64)
  ret i32 %1
}

define void @"main!make_x"(ptr %0, i64 %1) {
block_0:
  %2 = alloca %"main!x", align 8
  %3 = alloca %string, align 8
  %String = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %Size = getelementptr inbounds %string, ptr %3, i32 0, i32 1
  store ptr @0, ptr %String, align 8
  store i32 9, ptr %Size, align 4
  %4 = load %string, ptr %3, align 8
  %5 = getelementptr inbounds %"main!x", ptr %2, i32 0, i32 0
  store %string %4, ptr %5, align 8
  %6 = getelementptr inbounds %"main!x", ptr %2, i32 0, i32 1
  store i64 %1, ptr %6, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %2, i64 24, i1 false)
  ret void
}

define i32 @"main!main"() {
block_0:
  %0 = alloca %"main!x", align 8
  call void @"main!make_x"(ptr %0, i64 5)
  %1 = getelementptr inbounds %"main!x", ptr %0, i32 0, i32 0
  %2 = getelementptr inbounds %string, ptr %1, i32 0, i32 1
  %3 = load i64, ptr %2, align 8
  %4 = getelementptr inbounds %"main!x", ptr %0, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  %6 = sub i64 %3, %5
  %7 = trunc i64 %6 to i32
  ret i32 %7
}

declare i64 @"file2!give_one"()

declare i32 @"file2!give_two"()

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
