module array

#import mem;

struct Header {
    capacity: int,
    allocator: mem.Allocator,
}

create :: fn(T: type, allocator: *mem.Allocator) -> []T {
    INITIAL_CAPACITY :: 8;
    ptr: ?*Header = allocator.alloc(INITIAL_CAPACITY * size_of T + size_of Header, allocator);
    if ptr == null {
        return []T{};
    }
    ptr.capacity = INITIAL_CAPACITY;
    ptr.allocator = *allocator;

    res := []T{};
    res.data = cast(*T, (ptr+1));
    res.count = 0;
    return res;
}

add :: fn(arg_arr: *[]$T, item: T) {
    arr := arg_arr;
    header := cast(*Header, arr.data) - 1;
    if arr.count >= header.capacity {
        new_capacity := header.capacity * 2;
        ptr: ?*Header = header.allocator.alloc(new_capacity * size_of T + size_of Header, &header.allocator);
		if ptr == null {
			#assert "Failed to allocate memory for dynamic array";
			return;
		}

        ptr.capacity = new_capacity;
        ptr.allocator = header.allocator;
        mem.copy(ptr+1, arr.data, arr.count * size_of T);
        ptr.allocator.free(header, &ptr.allocator);
        arr.data = cast(*T, (ptr+1));
    }

    (*arr)[arr.count] = item;
    arr.count += 1;
}

free :: fn(arg_arr: *[]$T) {
	size_of(T);
    arr := arg_arr;
    header := cast(*Header, arr.data) - 1;
    header.allocator.free(header, &header.allocator);
    //arr.data = ?null;
    arr.count = 0;
}

clear :: fn(arg_arr: *[]$T) {
    arr := arg_arr;
    mem.set(arr.data, 0, arr.count);
    arr.count = 0;
}

