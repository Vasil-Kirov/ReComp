pass

struct Foo {
	arr: [1024]i8,
}

give_struct :: fn(foo: Foo) -> i32 {
	return foo.arr[5];
}

main :: fn() -> i32 {
	x := Foo { arr = {} };
	x.arr[5] = 32;
	return give_struct(x) - 32;
}

//struct Foo {
//	x: [1024]fn(num1: i32, num2: i32) -> i32,
//}
//
//sum :: fn(a: i32, b: i32) -> i32 {
//	return a + b;
//}
//
//main :: fn() -> i32 {
//	foo := Foo { x = {} };
//	foo.x[513] = sum;
//
//	return foo.x[513](3, -3);
//}


// GENERICS SYNTAX
// struct stack!T {
// 	items: T[];
//  top: int;
// }
// 
// push!T :: fn(Stack: *stack!T, item: T) -> T {
// 	return stack.items[stack.top++] = item;
// }

// 1. 2 * 3
// 2. 4 / 1
// 3. (2) % 0
// 4. 10 + (1) - (3)

