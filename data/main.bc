; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__main!foo" = private global i64 0
@0 = private unnamed_addr constant [3 x i8] c"11\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"22\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"1\00", align 1

define void @"__main!__GlobalInitializerFunction.0"() {
block_0:
  ret void
}

define void @"__main!__GlobalInitializerFunction.1"() {
block_0:
  %0 = call i64 @"__main!give_one"(), !dbg !4
  store i64 %0, ptr @"__main!foo", align 8, !dbg !4
  ret void, !dbg !4
}

declare void @puts(ptr)

declare ptr @malloc(i64)

define ptr @"__main!allocator_alloc"(i64 %0, ptr %1) !dbg !9 {
block_0:
  %2 = alloca i64, align 8, !dbg !25
  %3 = alloca ptr, align 8, !dbg !25
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !25
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !25
  store i64 %0, ptr %2, align 8, !dbg !25
  call void @llvm.dbg.value(metadata ptr %2, metadata !26, metadata !DIExpression()), !dbg !25
  store ptr %1, ptr %3, align 8, !dbg !25
  call void @llvm.dbg.value(metadata ptr %3, metadata !27, metadata !DIExpression()), !dbg !25
  %4 = load i64, ptr %2, align 8, !dbg !28
  %5 = call ptr @malloc(i64 %4), !dbg !28
  ret ptr %5, !dbg !28
}

define i32 @"__main!main"() !dbg !5 {
block_0:
  call void @puts(ptr @0), !dbg !29
  call void @puts(ptr @1), !dbg !30
  call void @puts(ptr @2), !dbg !31
  call void @puts(ptr @3), !dbg !32
  call void @puts(ptr @4), !dbg !33
  call void @puts(ptr @5), !dbg !4
  %0 = call i64 @"__main!give_one"(), !dbg !4
  %1 = trunc i64 %0 to i32, !dbg !4
  ret i32 %1, !dbg !4
}

define private i64 @"__main!give_one"() !dbg !34 {
block_0:
  ret i64 1, !dbg !37
}

define private i32 @"__main!give_two"() !dbg !38 {
block_0:
  ret i32 2, !dbg !39
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !DILocation(line: 19, scope: !5)
!5 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 12, type: !6, spFlags: DISPFlagDefinition, unit: !0)
!6 = !DISubroutineType(types: !7)
!7 = !{!8}
!8 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!9 = distinct !DISubprogram(name: "allocator_alloc", linkageName: "__main!allocator_alloc", scope: !1, file: !1, line: 8, type: !10, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !24)
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !13, !14}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!13 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!15 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, elements: !16)
!16 = !{!17, !23}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *__memory!Allocator) -> *", baseType: !19, size: 64, align: 64, dwarfAddressSpace: 0)
!19 = !DISubroutineType(types: !20)
!20 = !{!12, !13, !21}
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !22, size: 64, align: 64, dwarfAddressSpace: 0)
!22 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, align: 64, flags: DIFlagFwdDecl)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !12, size: 64, align: 64, offset: 64)
!24 = !{}
!25 = !DILocation(line: 8, scope: !9)
!26 = !DILocalVariable(name: "size", scope: !9, file: !1, line: 8, type: !13)
!27 = !DILocalVariable(name: "this", arg: 1, scope: !9, file: !1, line: 8, type: !14)
!28 = !DILocation(line: 9, scope: !9)
!29 = !DILocation(line: 25, scope: !5)
!30 = !DILocation(line: 24, scope: !5)
!31 = !DILocation(line: 23, scope: !5)
!32 = !DILocation(line: 21, scope: !5)
!33 = !DILocation(line: 20, scope: !5)
!34 = distinct !DISubprogram(name: "give_one", linkageName: "__main!give_one", scope: !1, file: !1, line: 11, type: !35, spFlags: DISPFlagDefinition, unit: !0)
!35 = !DISubroutineType(types: !36)
!36 = !{!13}
!37 = !DILocation(line: 12, scope: !34)
!38 = distinct !DISubprogram(name: "give_two", linkageName: "__main!give_two", scope: !1, file: !1, line: 15, type: !6, spFlags: DISPFlagDefinition, unit: !0)
!39 = !DILocation(line: 16, scope: !38)
