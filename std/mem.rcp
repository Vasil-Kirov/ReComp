module mem
#import os;
_ :: #import intrin;

kb :: fn(b: int) -> int { return b << 10; }
mb :: fn(b: int) -> int { return b << 20; }
gb :: fn(b: int) -> int { return b << 30; }

// scratch allocator to be used when you don't care about storing the memory long term
// it's the user's job to reset it
temp_alloc := Allocator {
			alloc = arena_alloc,
			free = no_free,
			data = null,
		};

struct Allocator {
    alloc: *fn(size: int, this: *Allocator) -> ?*,
    free:  *fn(ptr: *, this: *Allocator),
    data: ?*,
}

reset_temp :: fn() {
    reset_scratch(&temp_alloc);
}

make_slice :: fn (T: type, count: int, alloc: *Allocator) -> []T {
    res := []T{};
    ptr := alloc.alloc(count * size_of T, alloc);
    #assert ptr;
    res.data  = ?ptr;
    res.count = count;
    return res;
}

make_type :: fn (T: type, alloc: *Allocator) -> ?*T {
    return alloc.alloc(size_of T, alloc) as ?*T;
}

destroy_slice :: fn(slice: *[]$T, alloc: *Allocator) {
	alloc.free(slice.data, alloc);
	slice.count = 0;
}

generic_alloc :: fn(size: int, this: *Allocator) -> ?* {
    ptr := os.alloc(size);
	if ptr != null
		set(?ptr, 0, size);
    
	return ptr;
}

generic_free :: fn(ptr: *, this: *Allocator) {
    os.free(ptr);
}

create_generic_allocator :: fn() -> Allocator {
    r := Allocator {
        alloc = generic_alloc,
        free = generic_free,
        data = null,
    };
    return r;
}

struct ScratchContext {
	start: *u8,
    current: *u8,
    max: *u8,
}

addr_align16 :: fn(addr: *) -> * {
	addr := cast(*u8, addr);
    val := ((addr as u64) + 15) & 0xfffffffffffffff0;
	return cast(*void, val);
}

arena_alloc :: fn(size: int, this: *Allocator) -> ?* {
	if this.data == null {
		this := this;
		*this = create_scratch(mb(1));
	}

    ctx := cast(*ScratchContext, ?this.data);

    #assert ctx && "Invalid allocator for arena_alloc()";
    #assert ctx.max > ctx.current && "Calling arena_alloc() with an out of memory arena";
	#assert ctx.current && "Arena is not properly initialized";

	
	res := addr_align16(ctx.current);
    ctx.current = (res as *u8) + size;

	set(res, 0, size);
    
    return res;
}

no_free :: fn(p: *, this: *Allocator) {

}

create_scratch :: fn(max_size: int) -> Allocator {
	mem := os.alloc(max_size + size_of ScratchContext);
	#assert mem && "Couldn't allocate memory";
    ctx := cast(*ScratchContext, ?mem);

	ctx.start   = cast(*u8, (ctx + 1));
    ctx.current = cast(*u8, (ctx + 1));
    ctx.max = ctx.current + max_size;

    r := Allocator {
        alloc = arena_alloc,
        free = no_free,
        data = ctx,
    };

    return r;
}

reset_scratch :: fn(a: *Allocator) {
	if a.data == null return;
    ctx := cast(*ScratchContext, ?a.data);
	ctx.current = ctx.start;
}

destroy_scratch :: fn(a: *Allocator) {
	#assert a.data;
    ctx := cast(*ScratchContext, ?a.data);
    os.free(ctx);
}

copy  :: fn #link="memcpy"(dst: *, src: *, size: int) -> *;
set   :: fn #link="memset"(dst: *, c: i32, size: int) -> *;
cmp   :: fn #link="memcmp"(p1: *, p2: *, size: int) -> i32;

