module str

#import mem 
#import array

struct Builder {
    data: []u8,
}

to_int :: fn (str: string) -> int {
    neg := false;
    res := 0;
    for c in str {
        if c == '-' {
            if neg return 0;
            neg = true;
            continue;
        }

        res *= 10;
        
        val := match c {
            '0': yield 0;
            '1': yield 1;
            '2': yield 2;
            '3': yield 3;
            '4': yield 4;
            '5': yield 5;
            '6': yield 6;
            '7': yield 7;
            '8': yield 8;
            '9': yield 9;
        };
        res += val;
    }

    if neg res = -res;
    return res;
}

create_builder :: fn (alloc: *mem.Allocator) -> Builder {
    return Builder {
        data = array.create(u8, alloc)
    };
}


builder_append :: fn(b: *Builder, str: string) {
    b := b;
    for i in str.count {
        array.add(&b.data, str.data[i]);
    }
}

builder_append_u32 :: fn(b: *Builder, c: u32) {
	b := b;
	c := c;
	if c <= 0x7F {
		array.add(&b.data, @u8 c);
	} else if c <= 0x7FF { 
		second := @u8 c & 0b0011_1111;
		c >>= 6;
		first  := @u8 c & 0b0001_1111;
		
		array.add(&b.data, @u8 (0b1100_0000 | first));
		array.add(&b.data, @u8 (0b1000_0000 | second));
	} else if c <= 0xFFFF {
		third  := @u8 c & 0b0011_1111;
		c >>= 6;
		second := @u8 c & 0b0011_1111;
		c >>= 6;
		first  := @u8 c & 0b0000_1111;

		array.add(&b.data, @u8 (0b1110_0000 | first));
		array.add(&b.data, @u8 (0b1000_0000 | second));
		array.add(&b.data, @u8 (0b1000_0000 | third));
	} else {
		forth  := @u8 c & 0b0011_1111;
		c >>= 6;
		third  := @u8 c & 0b0011_1111;
		c >>= 6;
		second := @u8 c & 0b0011_1111;
		c >>= 6;
		first  := @u8 c & 0b0000_0111;
		array.add(&b.data, @u8 (0b1111_0000 | first));
		array.add(&b.data, @u8 (0b1000_0000 | second));
		array.add(&b.data, @u8 (0b1000_0000 | third));
		array.add(&b.data, @u8 (0b1000_0000 | forth));
	}
}

builder_append_u8 :: fn(b: *Builder, c: u8) {
    b := b;
    array.add(&b.data, c);
}

from_builder :: fn (b: *Builder, alloc: *mem.Allocator) -> string {
    b := b;
    data_ := alloc.alloc(b.data.count+1, alloc);
	if data_ == null return "";
	data := @*u8 ?data_;
    scan := b.data.data;
	len := b.data.count;
    for i := 0; i < len; i += 1 {
        data[i] = scan[i];
    }
	data[len] = 0;

    array.free(&b.data);

    return string { len, data };
}

CONTINUE_BIT :: @u8 0b1000_0000;

substr :: fn(original: string, from: int, to_excl: int) -> string {
    o := original;
    r: string;
    r.data = &o.data[from];
    r.count = to_excl-from;
    return r;
}

get_codepoint_size :: fn(codepoint: *u8) -> int {
    p := codepoint;
	SIZE4 :: @u8 0b1111_0000;
	SIZE3 :: @u8 0b1110_0000;
	SIZE2 :: @u8 0b1100_0000;
	if *p & SIZE4 == SIZE4 return 4;
	if *p & SIZE3 == SIZE3 return 3;
	if *p & SIZE2 == SIZE2 return 2;
	return 1;
}

advance :: fn(pos: *u8) -> *u8 {
    size := get_codepoint_size(pos);
    p := pos;
    return &p[size];
}

extract_codepoint :: fn (p: *u8, size: int) -> u32 {
    res := match size {
		1: {
			yield @u32 *p;
		}
		2: {
			First := *p & 0b0001_1111;
			Second := *(p+1) & 0b0011_1111;
			yield (@u32 First) << 6 | @u32 Second;
		}
		3: {
			First := *p & 0b0000_1111;
			Second := *(p+1) & 0b0011_1111;
			Third := *(p+2) & 0b0011_1111;
			yield (@u32 First) << 12 | (@u32 Second) << 6 | @u32 Third;
		}
		4: {
			First := *p & 0b0000_0111;
			Second := *(p+1) & 0b0011_1111;
			Third := *(p+2) & 0b0011_1111;
			Forth := *(p+3) & 0b0011_1111;
			yield (@u32 First) << 18 | (@u32 Second) << 12 | (@u32 Third) << 6 | @u32 Forth;
		}
	};
	return res;
}

deref :: fn(pos: *u8) -> u32 {
    p := pos;
    size := get_codepoint_size(p);
    return extract_codepoint(p, size);
}

index :: fn(s: string, idx: int) -> u32 {
    if idx >= s.count {
        return 0;
    }

    p := s.data;
    for i in idx {
        p = advance(p);
    }
    return deref(p);
}

format_uint :: fn(b: *Builder, num_in: uint) {
    temp := [256]u32{};
    num := num_in;
    if num == 0 {
        builder_append_u32(b, '0');
        return;
    }

    count := 0;
    for num > 0 {
        digit := num % 10;
        num /= 10;
        c := '0' + digit;
        temp[count] = @u32 c;
        count += 1;
    }

    for i in count {
        builder_append_u32(b, temp[count - i - 1]);
    }
}

format_int :: fn(b: *Builder, num_in: int) {
    temp := [256]u32{};
    num := num_in;
    if num == 0 {
        builder_append_u32(b, '0');
        return;
    }

    is_neg := false;
    if num < 0 {
        num = 0 - num;
        is_neg = true;
    }

    count := 0;
    for num > 0 {
        digit := num % 10;
        num /= 10;
        c := '0' + @u8 digit;
        temp[count] = c;
        count += 1;
    }
    
    if is_neg builder_append_u32(b, '-');

    for i in count {
        builder_append_u32(b, temp[count - i - 1]);
    }
}

format_float :: fn(ft: type, b: *Builder, num_in: ft, round_at: i32) {
	if num_in == inf {
		builder_append(b, "INF");
		return;
	}
	if num_in == -inf {
		builder_append(b, "-INF");
		return;
	}
	if num_in == nan {
		builder_append(b, "NaN");
		return;
	}

    num := num_in;

    if ft != f32 && ft != f64 {
        return;
    }

    if num == 0 {
        builder_append_u32(b, '0');
        return;
    }

    is_neg := false;
    if num < 0 {
        num = -num;
        is_neg = true;
    }

    num += 0.5 / cast(ft, round_at);
    int_part := cast(i32, num);
    frac_part := cast(i32, (num - cast(ft, int_part)) * round_at);

    if is_neg {
        builder_append_u8(b, '-');
    }

    format_int(b, int_part);
    builder_append_u8(b, '.');

    digits := 0;
    tmp := round_at;
    for tmp > 1 {
        digits += 1;
        tmp /= 10;
    }

    if frac_part != 0 {
        // print leading 0s
        tmp = frac_part;
        for tmp * 10 < round_at {
            builder_append_u8(b, '0');
            tmp *= 10;
        }
        format_int(b, frac_part);
    }
    else {
        for i := 1; i < round_at; i *= 10 {
            builder_append_u8(b, '0');
        }
    }
}

