module libc


_ :: #import mem;

printf :: fn(fmt: *u8, args: ...) -> i32 #foreign;
system :: fn(cmd: *u8) -> i32 #foreign;
malloc :: fn(size: int) -> ?* #foreign;
free   :: fn(ptr: ?*) #foreign;

do_malloc_free :: fn(ptr: ?*, this: *Allocator) {
    free(ptr);
}

do_malloc_allocation :: fn(size: int, this: *Allocator) -> ?* {
    ptr := malloc(size);
    if this.data != null {
		if ptr != null
			set(?ptr, 0, size);
    }

    return ptr;
}

make_malloc_allocator :: fn (zero_on_alloc: bool) -> Allocator {
    return .{
        alloc = do_malloc_allocation,
        free = do_malloc_free,
        data = cast(u64, zero_on_alloc),
    };
}


