; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!SFloat" = type { float, float }
%"__main!Foo" = type { [1024 x ptr] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define <2 x float> @"__main!something"(<2 x float> %0) !dbg !4 {
block_0:
  %1 = alloca %"__main!SFloat", align 8, !dbg !13
  store <2 x float> %0, ptr %1, align 8, !dbg !13
  call void @llvm.dbg.value(metadata ptr %1, metadata !14, metadata !DIExpression()), !dbg !13
  %2 = load <2 x float>, ptr %1, align 8, !dbg !15
  ret <2 x float> %2, !dbg !15
}

define i32 @"__main!sum"(ptr %0) !dbg !16 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !21, metadata !DIExpression()), !dbg !22
  %1 = icmp ne ptr %0, null, !dbg !23
  br i1 %1, label %block_1, label %block_2, !dbg !23

block_1:                                          ; preds = %block_0
  ret i32 1, !dbg !24

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !24

block_3:                                          ; preds = %block_2
  ret i32 0, !dbg !25
}

define ptr @"__main!x"() !dbg !26 {
block_0:
  %0 = alloca ptr, align 8, !dbg !30
  call void @llvm.memset.p0.i32(ptr %0, i8 0, i32 8, i1 false), !dbg !30
  store ptr null, ptr %0, align 8, !dbg !30
  call void @llvm.dbg.declare(metadata ptr %0, metadata !31, metadata !DIExpression()), !dbg !30
  %1 = load ptr, ptr %0, align 8, !dbg !32
  ret ptr %1, !dbg !32
}

define i32 @"__main!main"() !dbg !33 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !36
  call void @llvm.memset.p0.i32(ptr %0, i8 0, i32 8192, i1 false), !dbg !36
  %1 = alloca [1024 x ptr], align 8, !dbg !36
  call void @llvm.memset.p0.i32(ptr %1, i8 0, i32 8192, i1 false), !dbg !36
  %2 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !36
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 8192, i1 false), !dbg !36
  call void @llvm.dbg.declare(metadata ptr %0, metadata !37, metadata !DIExpression()), !dbg !36
  %3 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !45
  %4 = getelementptr [1024 x ptr], ptr %3, i64 0, i64 513, !dbg !45
  store ptr @"__main!sum", ptr %4, align 8, !dbg !45
  %5 = alloca %"__main!SFloat", align 8, !dbg !46
  call void @llvm.memset.p0.i32(ptr %5, i8 0, i32 8, i1 false), !dbg !46
  %6 = getelementptr inbounds %"__main!SFloat", ptr %5, i32 0, i32 0, !dbg !46
  store float 2.000000e+00, ptr %6, align 4, !dbg !46
  %7 = getelementptr inbounds %"__main!SFloat", ptr %5, i32 0, i32 1, !dbg !46
  store float 1.000000e+00, ptr %7, align 4, !dbg !46
  %8 = getelementptr inbounds %"__main!SFloat", ptr %5, i32 0, i32 0, !dbg !46
  %9 = load <2 x float>, ptr %8, align 8, !dbg !46
  %10 = call <2 x float> @"__main!something"(<2 x float> %9), !dbg !46
  %11 = alloca %"__main!SFloat", align 8, !dbg !46
  call void @llvm.memset.p0.i32(ptr %11, i8 0, i32 8, i1 false), !dbg !46
  store <2 x float> %10, ptr %11, align 8, !dbg !46
  call void @llvm.dbg.declare(metadata ptr %11, metadata !47, metadata !DIExpression()), !dbg !46
  %12 = getelementptr inbounds %"__main!SFloat", ptr %11, i32 0, i32 0, !dbg !48
  %13 = load float, ptr %12, align 4, !dbg !48
  %14 = getelementptr inbounds %"__main!SFloat", ptr %11, i32 0, i32 1, !dbg !48
  %15 = load float, ptr %14, align 4, !dbg !48
  %16 = fsub float %13, %15, !dbg !48
  %17 = fptosi float %16 to i32, !dbg !48
  ret i32 %17, !dbg !48
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "something", linkageName: "__main!something", scope: !1, file: !1, line: 12, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!SFloat", scope: !1, file: !1, size: 64, elements: !8)
!8 = !{!9, !11}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1, file: !1, baseType: !10, size: 32, align: 32)
!10 = !DIBasicType(name: "f32", size: 32, encoding: DW_ATE_float)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1, file: !1, baseType: !10, size: 32, align: 32, offset: 32)
!12 = !{}
!13 = !DILocation(line: 12, scope: !4)
!14 = !DILocalVariable(name: "arg", scope: !4, file: !1, line: 12, type: !7)
!15 = !DILocation(line: 13, scope: !4)
!16 = distinct !DISubprogram(name: "sum", linkageName: "__main!sum", scope: !1, file: !1, line: 16, type: !17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !20}
!19 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!21 = !DILocalVariable(name: "a", scope: !16, file: !1, line: 16, type: !20)
!22 = !DILocation(line: 16, scope: !16)
!23 = !DILocation(line: 17, scope: !16)
!24 = !DILocation(line: 18, scope: !16)
!25 = !DILocation(line: 20, scope: !16)
!26 = distinct !DISubprogram(name: "x", linkageName: "__main!x", scope: !1, file: !1, line: 23, type: !27, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!27 = !DISubroutineType(types: !28)
!28 = !{!29}
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*i32", baseType: !19, size: 64, align: 64, dwarfAddressSpace: 0)
!30 = !DILocation(line: 24, scope: !26)
!31 = !DILocalVariable(name: "foo", scope: !26, file: !1, line: 24, type: !20)
!32 = !DILocation(line: 26, scope: !26)
!33 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 29, type: !34, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!34 = !DISubroutineType(types: !35)
!35 = !{!19}
!36 = !DILocation(line: 30, scope: !33)
!37 = !DILocalVariable(name: "foo", scope: !33, file: !1, line: 30, type: !38)
!38 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 65536, elements: !39)
!39 = !{!40}
!40 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, baseType: !41, size: 65536, align: 64)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !42, size: 65536, align: 64, elements: !43)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(?*) -> i32", baseType: !17, size: 64, align: 64, dwarfAddressSpace: 0)
!43 = !{!44}
!44 = !DISubrange(count: 1024, lowerBound: 0)
!45 = !DILocation(line: 31, scope: !33)
!46 = !DILocation(line: 33, scope: !33)
!47 = !DILocalVariable(name: "a", scope: !33, file: !1, line: 33, type: !7)
!48 = !DILocation(line: 35, scope: !33)
