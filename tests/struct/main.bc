; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%"main!Foo" = type { i32, [100 x i32], [4 x i32] }

define void @"main!__!GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"main!main"() {
block_0:
  %0 = alloca %"main!Foo", align 8
  %1 = alloca [100 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %1, i8 0, i64 400, i1 false)
  %2 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %1, i64 400, i1 false)
  %3 = alloca [4 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 16, i1 false)
  %4 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 16, i1 false)
  %5 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 0
  store i32 2, ptr %5, align 4
  %6 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 2
  %7 = getelementptr [4 x i32], ptr %6, i64 0, i64 2
  store i32 3, ptr %7, align 4
  %8 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 1
  %9 = getelementptr [100 x i32], ptr %8, i64 0, i64 50
  store i32 1, ptr %9, align 4
  %10 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 2
  %11 = getelementptr [4 x i32], ptr %10, i64 0, i64 2
  %12 = load i32, ptr %11, align 4
  %13 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 1
  %14 = getelementptr [100 x i32], ptr %13, i64 0, i64 50
  %15 = load i32, ptr %14, align 4
  %16 = sub i32 %12, %15
  %17 = getelementptr inbounds %"main!Foo", ptr %0, i32 0, i32 0
  %18 = load i32, ptr %17, align 4
  %19 = sub i32 %16, %18
  ret i32 %19
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
