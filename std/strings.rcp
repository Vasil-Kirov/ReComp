str

#import mem 
#import array

struct Builder {
    data: []u32,
}

to_int :: fn (str: string) -> int {
    neg := false;
    res := 0;
    for c in str {
        if c == '-' {
            if neg return 0;
            neg = true;
            continue;
        }

        res *= 10;
        
        val := match c {
            '0': return 0;
            '1': return 1;
            '2': return 2;
            '3': return 3;
            '4': return 4;
            '5': return 5;
            '6': return 6;
            '7': return 7;
            '8': return 8;
            '9': return 9;
        };
        res += val;
    }

    if neg res = -res;
    return res;
}

create :: fn (alloc: *mem.Allocator) -> Builder {
    return Builder {
        data = array.create(u32, alloc)
    };
}

append :: fn(b: *Builder, str: string) {
    b := b;
    for c in str {
        array.add(&b.data, c);
    }
}

append_u32 :: fn(b: *Builder, c: u32) {
    b := b;
    array.add(&b.data, c);
}

append_u8 :: fn(b: *Builder, c: u8) {
    b := b;
    array.add(&b.data, @u32 c);
}

from_builder :: fn (b: *Builder, alloc: *mem.Allocator) -> string {
    data := mem.make_slice(u8, b.data.count*4, alloc);
    len := 0;
    as_u8 := @*u8 b.data.data;
    for i := 0; i < b.data.count*4; i += 1 {
        if as_u8[i] == 0 continue;

        data[len] = as_u8[i];
        len += 1;
    }

    return string { len, &data[0] };
}

CONTINUE_BIT :: @u8 0b1000_0000;

substr :: fn(original: string, from: int, to_excl: int) -> string {
    o := original;
    r: string;
    r.data = &o.data[from];
    r.count = to_excl-from;
    return r;
}

get_codepoint_size :: fn(codepoint: *u8) -> int {
    p := codepoint;
    if (*p & CONTINUE_BIT) == 0 {
        return 1;
    }

    size := 1;
    for i := 1; @u32 *p & (@u32 CONTINUE_BIT >> @u32 i); i += 1 {
        size += 1;
    }
    return size;
}

advance :: fn(pos: *u8) -> *u8 {
    size := get_codepoint_size(pos);
    p := pos;
    return &p[size];
}

deref :: fn(pos: *u8) -> u32 {
    p := pos;
    size := get_codepoint_size(p);
    res: u32;
    for i in size {
        res <<= 8;
        res |= p[i];
    }

    return res;
}

index :: fn(s: string, idx: int) -> u32 {
    if idx >= s.count {
        return 0;
    }

    p := s.data;
    for i in idx {
        p = advance(p);
    }
    return deref(p);
}

