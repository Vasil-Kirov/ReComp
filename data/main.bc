; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!Foo" = type { [1024 x ptr] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!sum"(ptr %0) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !10, metadata !DIExpression()), !dbg !11
  %1 = icmp ne ptr %0, null, !dbg !12
  br i1 %1, label %block_1, label %block_2, !dbg !12

block_1:                                          ; preds = %block_0
  ret i32 1, !dbg !13

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !13

block_3:                                          ; preds = %block_2
  ret i32 0, !dbg !14
}

define ptr @"__main!x"() !dbg !15 {
block_0:
  %0 = alloca ptr, align 8, !dbg !19
  call void @llvm.memset.p0.i32(ptr %0, i8 0, i32 8, i1 false), !dbg !19
  store ptr null, ptr %0, align 8, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %0, metadata !20, metadata !DIExpression()), !dbg !19
  %1 = load ptr, ptr %0, align 8, !dbg !21
  ret ptr %1, !dbg !21
}

define i32 @"__main!main"() !dbg !22 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !25
  call void @llvm.memset.p0.i32(ptr %0, i8 0, i32 8192, i1 false), !dbg !25
  %1 = alloca [1024 x ptr], align 8, !dbg !25
  call void @llvm.memset.p0.i32(ptr %1, i8 0, i32 8192, i1 false), !dbg !25
  %2 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !25
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 8192, i1 false), !dbg !25
  call void @llvm.dbg.declare(metadata ptr %0, metadata !26, metadata !DIExpression()), !dbg !25
  %3 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !34
  %4 = getelementptr [1024 x ptr], ptr %3, i64 0, i64 513, !dbg !34
  store ptr @"__main!sum", ptr %4, align 8, !dbg !34
  %5 = call ptr @"__main!x"(), !dbg !35
  %6 = alloca ptr, align 8, !dbg !35
  call void @llvm.memset.p0.i32(ptr %6, i8 0, i32 8, i1 false), !dbg !35
  store ptr %5, ptr %6, align 8, !dbg !35
  call void @llvm.dbg.declare(metadata ptr %6, metadata !36, metadata !DIExpression()), !dbg !35
  %7 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !37
  %8 = getelementptr [1024 x ptr], ptr %7, i64 0, i64 513, !dbg !37
  %9 = load ptr, ptr %8, align 8, !dbg !37
  %10 = load ptr, ptr %6, align 8, !dbg !37
  %11 = call i32 %9(ptr %10), !dbg !37
  ret i32 %11, !dbg !37
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "sum", linkageName: "__main!sum", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!9 = !{}
!10 = !DILocalVariable(name: "a", scope: !4, file: !1, line: 7, type: !8)
!11 = !DILocation(line: 7, scope: !4)
!12 = !DILocation(line: 8, scope: !4)
!13 = !DILocation(line: 9, scope: !4)
!14 = !DILocation(line: 11, scope: !4)
!15 = distinct !DISubprogram(name: "x", linkageName: "__main!x", scope: !1, file: !1, line: 14, type: !16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
!16 = !DISubroutineType(types: !17)
!17 = !{!18}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!19 = !DILocation(line: 15, scope: !15)
!20 = !DILocalVariable(name: "foo", scope: !15, file: !1, line: 15, type: !8)
!21 = !DILocation(line: 17, scope: !15)
!22 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 20, type: !23, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
!23 = !DISubroutineType(types: !24)
!24 = !{!7}
!25 = !DILocation(line: 21, scope: !22)
!26 = !DILocalVariable(name: "foo", scope: !22, file: !1, line: 21, type: !27)
!27 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 65536, elements: !28)
!28 = !{!29}
!29 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, baseType: !30, size: 65536, align: 64)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 65536, align: 64, elements: !32)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(?*) -> i32", baseType: !5, size: 64, align: 64, dwarfAddressSpace: 0)
!32 = !{!33}
!33 = !DISubrange(count: 1024, lowerBound: 0)
!34 = !DILocation(line: 22, scope: !22)
!35 = !DILocation(line: 24, scope: !22)
!36 = !DILocalVariable(name: "x_maybe", scope: !22, file: !1, line: 24, type: !18)
!37 = !DILocation(line: 26, scope: !22)
