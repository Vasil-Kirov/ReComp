; ModuleID = 'main'
source_filename = "iterators.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca [3 x i32], align 4, !dbg !9
  %1 = getelementptr [3 x i32], ptr %0, i64 0, i64 0, !dbg !9
  store i32 1, ptr %1, align 4, !dbg !9
  %2 = getelementptr [3 x i32], ptr %0, i64 0, i64 1, !dbg !9
  store i32 2, ptr %2, align 4, !dbg !9
  %3 = getelementptr [3 x i32], ptr %0, i64 0, i64 2, !dbg !9
  store i32 3, ptr %3, align 4, !dbg !9
  call void @llvm.dbg.declare(metadata ptr %0, metadata !10, metadata !DIExpression()), !dbg !9
  %4 = alloca i32, align 4, !dbg !14
  store i32 0, ptr %4, align 4, !dbg !14
  call void @llvm.dbg.declare(metadata ptr %4, metadata !15, metadata !DIExpression()), !dbg !14
  %5 = alloca i64, align 8, !dbg !16
  store i64 0, ptr %5, align 8, !dbg !16
  %6 = getelementptr [3 x i32], ptr %0, i64 0, i64 0, !dbg !16
  %7 = load i32, ptr %6, align 4, !dbg !16
  %8 = alloca i32, align 4, !dbg !16
  store i32 %7, ptr %8, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %8, metadata !17, metadata !DIExpression()), !dbg !16
  br label %block_1, !dbg !16

block_1:                                          ; preds = %block_3, %block_0
  %9 = load i64, ptr %5, align 8, !dbg !16
  %10 = icmp slt i64 %9, 3, !dbg !16
  br i1 %10, label %block_2, label %block_4, !dbg !16

block_2:                                          ; preds = %block_1
  %11 = load i32, ptr %4, align 4, !dbg !18
  %12 = load i32, ptr %8, align 4, !dbg !18
  %13 = add i32 %11, %12, !dbg !18
  store i32 %13, ptr %4, align 4, !dbg !18
  br label %block_3, !dbg !18

block_3:                                          ; preds = %block_2
  %14 = load i64, ptr %5, align 8, !dbg !18
  %15 = add i64 %14, 1, !dbg !18
  store i64 %15, ptr %5, align 8, !dbg !18
  %16 = getelementptr [3 x i32], ptr %0, i64 0, i64 %15, !dbg !18
  %17 = load i32, ptr %16, align 4, !dbg !18
  store i32 %17, ptr %8, align 4, !dbg !18
  br label %block_1, !dbg !18

block_4:                                          ; preds = %block_1
  %18 = load i32, ptr %4, align 4, !dbg !19
  %19 = sub i32 %18, 6, !dbg !19
  ret i32 %19, !dbg !19
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "iterators.rcp", directory: "D:\\Programming\\ReComp\\tests\\iterators")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 4, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 5, scope: !4)
!10 = !DILocalVariable(name: "arr", scope: !4, file: !1, line: 5, type: !11)
!11 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 96, align: 32, elements: !12)
!12 = !{!13}
!13 = !DISubrange(count: 3, lowerBound: 0)
!14 = !DILocation(line: 6, scope: !4)
!15 = !DILocalVariable(name: "sum", scope: !4, file: !1, line: 6, type: !7)
!16 = !DILocation(line: 7, scope: !4)
!17 = !DILocalVariable(name: "n", scope: !4, file: !1, line: 7, type: !7)
!18 = !DILocation(line: 8, scope: !4)
!19 = !DILocation(line: 10, scope: !4)
