[WARNING] [ MODULE array ]


fn __GlobalInitializerFunction.0() {

	block_0:
		RET

}

fn add:(*[]u32,u32)->void(*[]u32 %0, u32 %1) {

	block_0:
		%102 = ARG #0
		%103 = ALLOC *[]u32
		%103 = STORE *[]u32 %102
		%104 = ARG #1
		%105 = ALLOC u32
		%105 = STORE u32 %104
		%106 = LOAD *[]u32 %103
		%107 = ALLOC *[]u32
		%107 = STORE *[]u32 %106
		%108 = LOAD *[]u32 %107
		%109 = %108[%1] []u32
		%110 = LOAD *u32 %109
		%111 = i64 1
		%112 = int 0
		%113 = int %112 - %111
		%114 = %110[%113] *array.Header
		%115 = ALLOC *array.Header
		%115 = STORE *array.Header %114
		%116 = LOAD *[]u32 %107
		%117 = %116[%0] []u32
		%118 = LOAD int %117
		%119 = LOAD *array.Header %115
		%120 = %119[%0] array.Header
		%121 = LOAD int %120
		%122 = %118 >= %121
		IF %122 goto block_1, else goto block_2


	block_1:
		%123 = LOAD *array.Header %115
		%124 = %123[%0] array.Header
		%125 = LOAD int %124
		%126 = int 2
		%127 = int %125 * %126
		%128 = ALLOC int
		%128 = STORE int %127
		%129 = LOAD *array.Header %115
		%130 = %129[%1] array.Header
		%131 = %130[%0] mem.Allocator
		%132 = LOAD *fn(int, *mem.Allocator) -> ?* %131
		%133 = LOAD int %128
		%134 = u64 4
		%135 = int %133 * %134
		%136 = u64 32
		%137 = int %135 + %136
		%138 = LOAD *array.Header %115
		%139 = %138[%1] array.Header
		%140 = CALL %132(%137, %139)
		%141 = ALLOC ?*array.Header
		%141 = STORE ?*array.Header %140
		%142 = LOAD ?*array.Header %141
		%143 = ?* 0
		%144 = %142 != %143
		%145 = bool 0
		%146 = %144 == %145
		IF %146 goto block_4, else goto block_5


	block_4:
		%147 = LOAD *[]u32 %107
		%148 = %147[%1] []u32
		%149 = ?* 0
		%148 = STORE *u32 %149
		%150 = LOAD *[]u32 %107
		%151 = %150[%0] []u32
		%152 = int 0
		%151 = STORE int %152
		RET


	block_5:
		JMP block_6


	block_6:
		%155 = LOAD ?*array.Header %141
		%156 = ALLOC *array.Header
		%156 = STORE *array.Header %155
		%157 = LOAD *array.Header %156
		%158 = %157[%0] array.Header
		%159 = LOAD int %128
		%158 = STORE int %159
		%160 = LOAD *array.Header %156
		%161 = %160[%1] array.Header
		%162 = LOAD *array.Header %115
		%163 = %162[%1] array.Header
		%161 = STORE mem.Allocator %163
		%164 = LOAD *array.Header %156
		%165 = i64 1
		%166 = %164[%165] *array.Header
		%167 = LOAD *[]u32 %107
		%168 = %167[%1] []u32
		%169 = LOAD *u32 %168
		%170 = LOAD *[]u32 %107
		%171 = %170[%0] []u32
		%172 = LOAD int %171
		%173 = u64 4
		%174 = int %172 * %173
		%175 = CALL %71(%166, %169, %174)
		%176 = LOAD *array.Header %156
		%177 = %176[%1] array.Header
		%178 = %177[%1] mem.Allocator
		%179 = LOAD *fn(*, *mem.Allocator) %178
		%180 = LOAD *array.Header %115
		%181 = LOAD *array.Header %156
		%182 = %181[%1] array.Header
		%183 = CALL %179(%180, %182)
		%184 = LOAD *[]u32 %107
		%185 = %184[%1] []u32
		%186 = LOAD *array.Header %156
		%187 = i64 1
		%188 = %186[%187] *array.Header
		%185 = STORE *u32 %188
		JMP block_3


	block_2:
		JMP block_3


	block_3:
		%191 = LOAD *[]u32 %107
		%192 = LOAD *[]u32 %107
		%193 = %192[%0] []u32
		%194 = LOAD int %193
		%195 = %191[%1] []u32
		%196 = LOAD *u32 %195
		%197 = %196[%194] *u32
		%198 = LOAD u32 %105
		%197 = STORE u32 %198
		%199 = LOAD *[]u32 %107
		%200 = %199[%0] []u32
		%201 = LOAD *[]u32 %107
		%202 = %201[%0] []u32
		%203 = LOAD int %202
		%204 = int 1
		%205 = int %203 + %204
		%200 = STORE int %205
		RET

}

fn create:(type,*mem.Allocator)->[]u8(type %0, *mem.Allocator %1) -> []u8 {

	block_0:
		%102 = ARG #0
		%103 = ALLOC type
		%103 = STORE type %102
		%104 = ARG #1
		%105 = ALLOC *mem.Allocator
		%105 = STORE *mem.Allocator %104
		%106 = int 8
		%107 = ALLOC int
		%107 = STORE int %106
		%108 = LOAD *mem.Allocator %105
		%109 = %108[%0] mem.Allocator
		%110 = LOAD *fn(int, *mem.Allocator) -> ?* %109
		%111 = LOAD int %107
		%112 = u64 1
		%113 = int %111 * %112
		%114 = u64 32
		%115 = int %113 + %114
		%116 = LOAD *mem.Allocator %105
		%117 = CALL %110(%115, %116)
		%118 = ALLOC ?*array.Header
		%118 = STORE ?*array.Header %117
		%119 = LOAD ?*array.Header %118
		%120 = ?* 0
		%121 = %119 != %120
		%122 = bool 0
		%123 = %121 == %122
		IF %123 goto block_1, else goto block_2


	block_1:
		%124 = ALLOC []u8
		RET []u8 %124


	block_2:
		JMP block_3


	block_3:
		%127 = LOAD ?*array.Header %118
		%128 = ALLOC *array.Header
		%128 = STORE *array.Header %127
		%129 = LOAD *array.Header %128
		%130 = %129[%0] array.Header
		%131 = LOAD int %107
		%130 = STORE int %131
		%132 = LOAD *array.Header %128
		%133 = %132[%1] array.Header
		%134 = LOAD *mem.Allocator %105
		%135 = LOAD mem.Allocator %134
		%133 = STORE mem.Allocator %135
		%136 = ALLOC []u8
		%137 = ALLOC []u8
		%137 = STORE []u8 %136
		%138 = %137[%1] []u8
		%139 = LOAD *array.Header %128
		%140 = i64 1
		%141 = %139[%140] *array.Header
		%138 = STORE *u8 %141
		%142 = %137[%0] []u8
		%143 = int 0
		%142 = STORE int %143
		RET []u8 %137

}

fn add:(*[]u8,u8)->void(*[]u8 %0, u8 %1) {

	block_0:
		%102 = ARG #0
		%103 = ALLOC *[]u8
		%103 = STORE *[]u8 %102
		%104 = ARG #1
		%105 = ALLOC u8
		%105 = STORE u8 %104
		%106 = LOAD *[]u8 %103
		%107 = ALLOC *[]u8
		%107 = STORE *[]u8 %106
		%108 = LOAD *[]u8 %107
		%109 = %108[%1] []u8
		%110 = LOAD *u8 %109
		%111 = i64 1
		%112 = int 0
		%113 = int %112 - %111
		%114 = %110[%113] *array.Header
		%115 = ALLOC *array.Header
		%115 = STORE *array.Header %114
		%116 = LOAD *[]u8 %107
		%117 = %116[%0] []u8
		%118 = LOAD int %117
		%119 = LOAD *array.Header %115
		%120 = %119[%0] array.Header
		%121 = LOAD int %120
		%122 = %118 >= %121
		IF %122 goto block_1, else goto block_2


	block_1:
		%123 = LOAD *array.Header %115
		%124 = %123[%0] array.Header
		%125 = LOAD int %124
		%126 = int 2
		%127 = int %125 * %126
		%128 = ALLOC int
		%128 = STORE int %127
		%129 = LOAD *array.Header %115
		%130 = %129[%1] array.Header
		%131 = %130[%0] mem.Allocator
		%132 = LOAD *fn(int, *mem.Allocator) -> ?* %131
		%133 = LOAD int %128
		%134 = u64 1
		%135 = int %133 * %134
		%136 = u64 32
		%137 = int %135 + %136
		%138 = LOAD *array.Header %115
		%139 = %138[%1] array.Header
		%140 = CALL %132(%137, %139)
		%141 = ALLOC ?*array.Header
		%141 = STORE ?*array.Header %140
		%142 = LOAD ?*array.Header %141
		%143 = ?* 0
		%144 = %142 != %143
		%145 = bool 0
		%146 = %144 == %145
		IF %146 goto block_4, else goto block_5


	block_4:
		%147 = LOAD *[]u8 %107
		%148 = %147[%1] []u8
		%149 = ?* 0
		%148 = STORE *u8 %149
		%150 = LOAD *[]u8 %107
		%151 = %150[%0] []u8
		%152 = int 0
		%151 = STORE int %152
		RET


	block_5:
		JMP block_6


	block_6:
		%155 = LOAD ?*array.Header %141
		%156 = ALLOC *array.Header
		%156 = STORE *array.Header %155
		%157 = LOAD *array.Header %156
		%158 = %157[%0] array.Header
		%159 = LOAD int %128
		%158 = STORE int %159
		%160 = LOAD *array.Header %156
		%161 = %160[%1] array.Header
		%162 = LOAD *array.Header %115
		%163 = %162[%1] array.Header
		%161 = STORE mem.Allocator %163
		%164 = LOAD *array.Header %156
		%165 = i64 1
		%166 = %164[%165] *array.Header
		%167 = LOAD *[]u8 %107
		%168 = %167[%1] []u8
		%169 = LOAD *u8 %168
		%170 = LOAD *[]u8 %107
		%171 = %170[%0] []u8
		%172 = LOAD int %171
		%173 = u64 1
		%174 = int %172 * %173
		%175 = CALL %71(%166, %169, %174)
		%176 = LOAD *array.Header %156
		%177 = %176[%1] array.Header
		%178 = %177[%1] mem.Allocator
		%179 = LOAD *fn(*, *mem.Allocator) %178
		%180 = LOAD *array.Header %115
		%181 = LOAD *array.Header %156
		%182 = %181[%1] array.Header
		%183 = CALL %179(%180, %182)
		%184 = LOAD *[]u8 %107
		%185 = %184[%1] []u8
		%186 = LOAD *array.Header %156
		%187 = i64 1
		%188 = %186[%187] *array.Header
		%185 = STORE *u8 %188
		JMP block_3


	block_2:
		JMP block_3


	block_3:
		%191 = LOAD *[]u8 %107
		%192 = LOAD *[]u8 %107
		%193 = %192[%0] []u8
		%194 = LOAD int %193
		%195 = %191[%1] []u8
		%196 = LOAD *u8 %195
		%197 = %196[%194] *u8
		%198 = LOAD u8 %105
		%197 = STORE u8 %198
		%199 = LOAD *[]u8 %107
		%200 = %199[%0] []u8
		%201 = LOAD *[]u8 %107
		%202 = %201[%0] []u8
		%203 = LOAD int %202
		%204 = int 1
		%205 = int %203 + %204
		%200 = STORE int %205
		RET

}

fn create:(type,*mem.Allocator)->[]u32(type %0, *mem.Allocator %1) -> []u32 {

	block_0:
		%102 = ARG #0
		%103 = ALLOC type
		%103 = STORE type %102
		%104 = ARG #1
		%105 = ALLOC *mem.Allocator
		%105 = STORE *mem.Allocator %104
		%106 = int 8
		%107 = ALLOC int
		%107 = STORE int %106
		%108 = LOAD *mem.Allocator %105
		%109 = %108[%0] mem.Allocator
		%110 = LOAD *fn(int, *mem.Allocator) -> ?* %109
		%111 = LOAD int %107
		%112 = u64 4
		%113 = int %111 * %112
		%114 = u64 32
		%115 = int %113 + %114
		%116 = LOAD *mem.Allocator %105
		%117 = CALL %110(%115, %116)
		%118 = ALLOC ?*array.Header
		%118 = STORE ?*array.Header %117
		%119 = LOAD ?*array.Header %118
		%120 = ?* 0
		%121 = %119 != %120
		%122 = bool 0
		%123 = %121 == %122
		IF %123 goto block_1, else goto block_2


	block_1:
		%124 = ALLOC []u32
		RET []u32 %124


	block_2:
		JMP block_3


	block_3:
		%127 = LOAD ?*array.Header %118
		%128 = ALLOC *array.Header
		%128 = STORE *array.Header %127
		%129 = LOAD *array.Header %128
		%130 = %129[%0] array.Header
		%131 = LOAD int %107
		%130 = STORE int %131
		%132 = LOAD *array.Header %128
		%133 = %132[%1] array.Header
		%134 = LOAD *mem.Allocator %105
		%135 = LOAD mem.Allocator %134
		%133 = STORE mem.Allocator %135
		%136 = ALLOC []u32
		%137 = ALLOC []u32
		%137 = STORE []u32 %136
		%138 = %137[%1] []u32
		%139 = LOAD *array.Header %128
		%140 = i64 1
		%141 = %139[%140] *array.Header
		%138 = STORE *u32 %141
		%142 = %137[%0] []u32
		%143 = int 0
		%142 = STORE int %143
		RET []u32 %137

}

fn free:(*[]u32)->void(*[]u32 %0) {

	block_0:
		%102 = ARG #0
		%103 = ALLOC *[]u32
		%103 = STORE *[]u32 %102
		%104 = LOAD *[]u32 %103
		%105 = ALLOC *[]u32
		%105 = STORE *[]u32 %104
		%106 = LOAD *[]u32 %105
		%107 = %106[%1] []u32
		%108 = LOAD *u32 %107
		%109 = i64 1
		%110 = int 0
		%111 = int %110 - %109
		%112 = %108[%111] *array.Header
		%113 = ALLOC *array.Header
		%113 = STORE *array.Header %112
		%114 = LOAD *array.Header %113
		%115 = %114[%1] array.Header
		%116 = %115[%1] mem.Allocator
		%117 = LOAD *fn(*, *mem.Allocator) %116
		%118 = LOAD *array.Header %113
		%119 = LOAD *array.Header %113
		%120 = %119[%1] array.Header
		%121 = CALL %117(%118, %120)
		%122 = LOAD *[]u32 %105
		%123 = %122[%1] []u32
		%124 = ?* 0
		%123 = STORE *u32 %124
		%125 = LOAD *[]u32 %105
		%126 = %125[%0] []u32
		%127 = int 0
		%126 = STORE int %127
		RET

}

fn free:(*[]u8)->void(*[]u8 %0) {

	block_0:
		%102 = ARG #0
		%103 = ALLOC *[]u8
		%103 = STORE *[]u8 %102
		%104 = LOAD *[]u8 %103
		%105 = ALLOC *[]u8
		%105 = STORE *[]u8 %104
		%106 = LOAD *[]u8 %105
		%107 = %106[%1] []u8
		%108 = LOAD *u8 %107
		%109 = i64 1
		%110 = int 0
		%111 = int %110 - %109
		%112 = %108[%111] *array.Header
		%113 = ALLOC *array.Header
		%113 = STORE *array.Header %112
		%114 = LOAD *array.Header %113
		%115 = %114[%1] array.Header
		%116 = %115[%1] mem.Allocator
		%117 = LOAD *fn(*, *mem.Allocator) %116
		%118 = LOAD *array.Header %113
		%119 = LOAD *array.Header %113
		%120 = %119[%1] array.Header
		%121 = CALL %117(%118, %120)
		%122 = LOAD *[]u8 %105
		%123 = %122[%1] []u8
		%124 = ?* 0
		%123 = STORE *u8 %124
		%125 = LOAD *[]u8 %105
		%126 = %125[%0] []u8
		%127 = int 0
		%126 = STORE int %127
		RET

}

Compiling file: ../file1.rcp
Compiling file: ../file2.rcp
[WARNING] [ MODULE array ]


fn __GlobalInitializerFunction.0() {

	block_0:
		RET

}

fn create:(type,*mem.Allocator)->[]string(type %0, *mem.Allocator %1) -> []string {

	block_0:
		%101 = ARG #0
		%102 = ALLOC type
		%102 = STORE type %101
		%103 = ARG #1
		%104 = ALLOC *mem.Allocator
		%104 = STORE *mem.Allocator %103
		%105 = int 8
		%106 = ALLOC int
		%106 = STORE int %105
		%107 = LOAD *mem.Allocator %104
		%108 = %107[%0] mem.Allocator
		%109 = LOAD *fn(int, *mem.Allocator) -> ?* %108
		%110 = LOAD int %106
		%111 = %102[%1] string
		%112 = LOAD int %111
		%113 = int %110 * %112
		%114 = u64 32
		%115 = int %113 + %114
		%116 = LOAD *mem.Allocator %104
		%117 = CALL %109(%115, %116)
		%118 = ALLOC ?*array.Header
		%118 = STORE ?*array.Header %117
		%119 = LOAD ?*array.Header %118
		%120 = ?* 0
		%121 = %119 != %120
		%122 = bool 0
		%123 = %121 == %122
		IF %123 goto block_1, else goto block_2


	block_1:
		%124 = ALLOC []string
		RET []string %124


	block_2:
		JMP block_3


	block_3:
		%127 = LOAD ?*array.Header %118
		%128 = ALLOC *array.Header
		%128 = STORE *array.Header %127
		%129 = LOAD *array.Header %128
		%130 = %129[%0] array.Header
		%131 = LOAD int %106
		%130 = STORE int %131
		%132 = LOAD *array.Header %128
		%133 = %132[%1] array.Header
		%134 = LOAD *mem.Allocator %104
		%135 = LOAD mem.Allocator %134
		%133 = STORE mem.Allocator %135
		%136 = ALLOC []string
		%137 = ALLOC []string
		%137 = STORE []string %136
		%138 = %137[%1] []string
		%139 = LOAD *array.Header %128
		%140 = i64 1
		%141 = %139[%140] *array.Header
		%138 = STORE *string %141
		%142 = %137[%0] []string
		%143 = int 0
		%142 = STORE int %143
		RET []string %137

}

fn add:(*[]string,string)->void(*[]string %0, string %1) {

	block_0:
		%101 = ARG #0
		%102 = ALLOC *[]string
		%102 = STORE *[]string %101
		%103 = ARG #1
		%104 = ALLOC string
		%104 = STORE string %103
		%105 = LOAD *[]string %102
		%106 = ALLOC *[]string
		%106 = STORE *[]string %105
		%107 = LOAD *[]string %106
		%108 = %107[%1] []string
		%109 = LOAD *string %108
		%110 = i64 1
		%111 = int 0
		%112 = int %111 - %110
		%113 = %109[%112] *array.Header
		%114 = ALLOC *array.Header
		%114 = STORE *array.Header %113
		%115 = LOAD *[]string %106
		%116 = %115[%0] []string
		%117 = LOAD int %116
		%118 = LOAD *array.Header %114
		%119 = %118[%0] array.Header
		%120 = LOAD int %119
		%121 = %117 >= %120
		IF %121 goto block_1, else goto block_2


	block_1:
		%122 = LOAD *array.Header %114
		%123 = %122[%0] array.Header
		%124 = LOAD int %123
		%125 = int 2
		%126 = int %124 * %125
		%127 = ALLOC int
		%127 = STORE int %126
		%128 = LOAD *array.Header %114
		%129 = %128[%1] array.Header
		%130 = %129[%0] mem.Allocator
		%131 = LOAD *fn(int, *mem.Allocator) -> ?* %130
		%132 = LOAD int %127
		%133 = uint 1
XXX		%134 = %133[%1] string
		%135 = LOAD int %134
		%136 = int %132 * %135
		%137 = u64 32
		%138 = int %136 + %137
		%139 = LOAD *array.Header %114
		%140 = %139[%1] array.Header
		%141 = CALL %131(%138, %140)
		%142 = ALLOC ?*array.Header
		%142 = STORE ?*array.Header %141
		%143 = LOAD ?*array.Header %142
		%144 = ?* 0
		%145 = %143 != %144
		%146 = bool 0
		%147 = %145 == %146
		IF %147 goto block_4, else goto block_5


	block_4:
		%148 = LOAD *[]string %106
		%149 = %148[%1] []string
		%150 = ?* 0
		%149 = STORE *string %150
		%151 = LOAD *[]string %106
		%152 = %151[%0] []string
		%153 = int 0
		%152 = STORE int %153
		RET


	block_5:
		JMP block_6


	block_6:
		%156 = LOAD ?*array.Header %142
		%157 = ALLOC *array.Header
		%157 = STORE *array.Header %156
		%158 = LOAD *array.Header %157
		%159 = %158[%0] array.Header
		%160 = LOAD int %127
		%159 = STORE int %160
		%161 = LOAD *array.Header %157
		%162 = %161[%1] array.Header
		%163 = LOAD *array.Header %114
		%164 = %163[%1] array.Header
		%162 = STORE mem.Allocator %164
		%165 = LOAD *array.Header %157
		%166 = i64 1
		%167 = %165[%166] *array.Header
		%168 = LOAD *[]string %106
		%169 = %168[%1] []string
		%170 = LOAD *string %169
		%171 = LOAD *[]string %106
		%172 = %171[%0] []string
		%173 = LOAD int %172
		%174 = uint 1
		%175 = %174[%1] string
		%176 = LOAD int %175
		%177 = int %173 * %176
		%178 = CALL %68(%167, %170, %177)
		%179 = LOAD *array.Header %157
		%180 = %179[%1] array.Header
		%181 = %180[%1] mem.Allocator
		%182 = LOAD *fn(*, *mem.Allocator) %181
		%183 = LOAD *array.Header %114
		%184 = LOAD *array.Header %157
		%185 = %184[%1] array.Header
		%186 = CALL %182(%183, %185)
		%187 = LOAD *[]string %106
		%188 = %187[%1] []string
		%189 = LOAD *array.Header %157
		%190 = i64 1
		%191 = %189[%190] *array.Header
		%188 = STORE *string %191
		JMP block_3


	block_2:
		JMP block_3


	block_3:
		%194 = LOAD *[]string %106
		%195 = LOAD *[]string %106
		%196 = %195[%0] []string
		%197 = LOAD int %196
		%198 = %194[%1] []string
		%199 = LOAD *string %198
		%200 = %199[%197] *string
		%200 = STORE string %104
		%201 = LOAD *[]string %106
		%202 = %201[%0] []string
		%203 = LOAD *[]string %106
		%204 = %203[%0] []string
		%205 = LOAD int %204
		%206 = int 1
		%207 = int %205 + %206
		%202 = STORE int %207
		RET

}

fn add:(*[]u32,u32)->void(*[]u32 %0, u32 %1) {

	block_0:
		%101 = ARG #0
		%102 = ALLOC *[]u32
		%102 = STORE *[]u32 %101
		%103 = ARG #1
		%104 = ALLOC u32
		%104 = STORE u32 %103
		%105 = LOAD *[]u32 %102
		%106 = ALLOC *[]u32
		%106 = STORE *[]u32 %105
		%107 = LOAD *[]u32 %106
		%108 = %107[%1] []u32
		%109 = LOAD *u32 %108
		%110 = i64 1
		%111 = int 0
		%112 = int %111 - %110
		%113 = %109[%112] *array.Header
		%114 = ALLOC *array.Header
		%114 = STORE *array.Header %113
		%115 = LOAD *[]u32 %106
		%116 = %115[%0] []u32
		%117 = LOAD int %116
		%118 = LOAD *array.Header %114
		%119 = %118[%0] array.Header
		%120 = LOAD int %119
		%121 = %117 >= %120
		IF %121 goto block_1, else goto block_2


	block_1:
		%122 = LOAD *array.Header %114
		%123 = %122[%0] array.Header
		%124 = LOAD int %123
		%125 = int 2
		%126 = int %124 * %125
		%127 = ALLOC int
		%127 = STORE int %126
		%128 = LOAD *array.Header %114
		%129 = %128[%1] array.Header
		%130 = %129[%0] mem.Allocator
		%131 = LOAD *fn(int, *mem.Allocator) -> ?* %130
		%132 = LOAD int %127
		%133 = u64 4
		%134 = int %132 * %133
		%135 = u64 32
		%136 = int %134 + %135
		%137 = LOAD *array.Header %114
		%138 = %137[%1] array.Header
		%139 = CALL %131(%136, %138)
		%140 = ALLOC ?*array.Header
		%140 = STORE ?*array.Header %139
		%141 = LOAD ?*array.Header %140
		%142 = ?* 0
		%143 = %141 != %142
		%144 = bool 0
		%145 = %143 == %144
		IF %145 goto block_4, else goto block_5


	block_4:
		%146 = LOAD *[]u32 %106
		%147 = %146[%1] []u32
		%148 = ?* 0
		%147 = STORE *u32 %148
		%149 = LOAD *[]u32 %106
		%150 = %149[%0] []u32
		%151 = int 0
		%150 = STORE int %151
		RET


	block_5:
		JMP block_6


	block_6:
		%154 = LOAD ?*array.Header %140
		%155 = ALLOC *array.Header
		%155 = STORE *array.Header %154
		%156 = LOAD *array.Header %155
		%157 = %156[%0] array.Header
		%158 = LOAD int %127
		%157 = STORE int %158
		%159 = LOAD *array.Header %155
		%160 = %159[%1] array.Header
		%161 = LOAD *array.Header %114
		%162 = %161[%1] array.Header
		%160 = STORE mem.Allocator %162
		%163 = LOAD *array.Header %155
		%164 = i64 1
		%165 = %163[%164] *array.Header
		%166 = LOAD *[]u32 %106
		%167 = %166[%1] []u32
		%168 = LOAD *u32 %167
		%169 = LOAD *[]u32 %106
		%170 = %169[%0] []u32
		%171 = LOAD int %170
		%172 = u64 4
		%173 = int %171 * %172
		%174 = CALL %68(%165, %168, %173)
		%175 = LOAD *array.Header %155
		%176 = %175[%1] array.Header
		%177 = %176[%1] mem.Allocator
		%178 = LOAD *fn(*, *mem.Allocator) %177
		%179 = LOAD *array.Header %114
		%180 = LOAD *array.Header %155
		%181 = %180[%1] array.Header
		%182 = CALL %178(%179, %181)
		%183 = LOAD *[]u32 %106
		%184 = %183[%1] []u32
		%185 = LOAD *array.Header %155
		%186 = i64 1
		%187 = %185[%186] *array.Header
		%184 = STORE *u32 %187
		JMP block_3


	block_2:
		JMP block_3


	block_3:
		%190 = LOAD *[]u32 %106
		%191 = LOAD *[]u32 %106
		%192 = %191[%0] []u32
		%193 = LOAD int %192
		%194 = %190[%1] []u32
		%195 = LOAD *u32 %194
		%196 = %195[%193] *u32
		%197 = LOAD u32 %104
		%196 = STORE u32 %197
		%198 = LOAD *[]u32 %106
		%199 = %198[%0] []u32
		%200 = LOAD *[]u32 %106
		%201 = %200[%0] []u32
		%202 = LOAD int %201
		%203 = int 1
		%204 = int %202 + %203
		%199 = STORE int %204
		RET

}

fn create:(type,*mem.Allocator)->[]u8(type %0, *mem.Allocator %1) -> []u8 {

	block_0:
		%101 = ARG #0
		%102 = ALLOC type
		%102 = STORE type %101
		%103 = ARG #1
		%104 = ALLOC *mem.Allocator
		%104 = STORE *mem.Allocator %103
		%105 = int 8
		%106 = ALLOC int
		%106 = STORE int %105
		%107 = LOAD *mem.Allocator %104
		%108 = %107[%0] mem.Allocator
		%109 = LOAD *fn(int, *mem.Allocator) -> ?* %108
		%110 = LOAD int %106
		%111 = u64 1
		%112 = int %110 * %111
		%113 = u64 32
		%114 = int %112 + %113
		%115 = LOAD *mem.Allocator %104
		%116 = CALL %109(%114, %115)
		%117 = ALLOC ?*array.Header
		%117 = STORE ?*array.Header %116
		%118 = LOAD ?*array.Header %117
		%119 = ?* 0
		%120 = %118 != %119
		%121 = bool 0
		%122 = %120 == %121
		IF %122 goto block_1, else goto block_2


	block_1:
		%123 = ALLOC []u8
		RET []u8 %123


	block_2:
		JMP block_3


	block_3:
		%126 = LOAD ?*array.Header %117
		%127 = ALLOC *array.Header
		%127 = STORE *array.Header %126
		%128 = LOAD *array.Header %127
		%129 = %128[%0] array.Header
		%130 = LOAD int %106
		%129 = STORE int %130
		%131 = LOAD *array.Header %127
		%132 = %131[%1] array.Header
		%133 = LOAD *mem.Allocator %104
		%134 = LOAD mem.Allocator %133
		%132 = STORE mem.Allocator %134
		%135 = ALLOC []u8
		%136 = ALLOC []u8
		%136 = STORE []u8 %135
		%137 = %136[%1] []u8
		%138 = LOAD *array.Header %127
		%139 = i64 1
		%140 = %138[%139] *array.Header
		%137 = STORE *u8 %140
		%141 = %136[%0] []u8
		%142 = int 0
		%141 = STORE int %142
		RET []u8 %136

}

fn add:(*[]u8,u8)->void(*[]u8 %0, u8 %1) {

	block_0:
		%101 = ARG #0
		%102 = ALLOC *[]u8
		%102 = STORE *[]u8 %101
		%103 = ARG #1
		%104 = ALLOC u8
		%104 = STORE u8 %103
		%105 = LOAD *[]u8 %102
		%106 = ALLOC *[]u8
		%106 = STORE *[]u8 %105
		%107 = LOAD *[]u8 %106
		%108 = %107[%1] []u8
		%109 = LOAD *u8 %108
		%110 = i64 1
		%111 = int 0
		%112 = int %111 - %110
		%113 = %109[%112] *array.Header
		%114 = ALLOC *array.Header
		%114 = STORE *array.Header %113
		%115 = LOAD *[]u8 %106
		%116 = %115[%0] []u8
		%117 = LOAD int %116
		%118 = LOAD *array.Header %114
		%119 = %118[%0] array.Header
		%120 = LOAD int %119
		%121 = %117 >= %120
		IF %121 goto block_1, else goto block_2


	block_1:
		%122 = LOAD *array.Header %114
		%123 = %122[%0] array.Header
		%124 = LOAD int %123
		%125 = int 2
		%126 = int %124 * %125
		%127 = ALLOC int
		%127 = STORE int %126
		%128 = LOAD *array.Header %114
		%129 = %128[%1] array.Header
		%130 = %129[%0] mem.Allocator
		%131 = LOAD *fn(int, *mem.Allocator) -> ?* %130
		%132 = LOAD int %127
		%133 = u64 1
		%134 = int %132 * %133
		%135 = u64 32
		%136 = int %134 + %135
		%137 = LOAD *array.Header %114
		%138 = %137[%1] array.Header
		%139 = CALL %131(%136, %138)
		%140 = ALLOC ?*array.Header
		%140 = STORE ?*array.Header %139
		%141 = LOAD ?*array.Header %140
		%142 = ?* 0
		%143 = %141 != %142
		%144 = bool 0
		%145 = %143 == %144
		IF %145 goto block_4, else goto block_5


	block_4:
		%146 = LOAD *[]u8 %106
		%147 = %146[%1] []u8
		%148 = ?* 0
		%147 = STORE *u8 %148
		%149 = LOAD *[]u8 %106
		%150 = %149[%0] []u8
		%151 = int 0
		%150 = STORE int %151
		RET


	block_5:
		JMP block_6


	block_6:
		%154 = LOAD ?*array.Header %140
		%155 = ALLOC *array.Header
		%155 = STORE *array.Header %154
		%156 = LOAD *array.Header %155
		%157 = %156[%0] array.Header
		%158 = LOAD int %127
		%157 = STORE int %158
		%159 = LOAD *array.Header %155
		%160 = %159[%1] array.Header
		%161 = LOAD *array.Header %114
		%162 = %161[%1] array.Header
		%160 = STORE mem.Allocator %162
		%163 = LOAD *array.Header %155
		%164 = i64 1
		%165 = %163[%164] *array.Header
		%166 = LOAD *[]u8 %106
		%167 = %166[%1] []u8
		%168 = LOAD *u8 %167
		%169 = LOAD *[]u8 %106
		%170 = %169[%0] []u8
		%171 = LOAD int %170
		%172 = u64 1
		%173 = int %171 * %172
		%174 = CALL %68(%165, %168, %173)
		%175 = LOAD *array.Header %155
		%176 = %175[%1] array.Header
		%177 = %176[%1] mem.Allocator
		%178 = LOAD *fn(*, *mem.Allocator) %177
		%179 = LOAD *array.Header %114
		%180 = LOAD *array.Header %155
		%181 = %180[%1] array.Header
		%182 = CALL %178(%179, %181)
		%183 = LOAD *[]u8 %106
		%184 = %183[%1] []u8
		%185 = LOAD *array.Header %155
		%186 = i64 1
		%187 = %185[%186] *array.Header
		%184 = STORE *u8 %187
		JMP block_3


	block_2:
		JMP block_3


	block_3:
		%190 = LOAD *[]u8 %106
		%191 = LOAD *[]u8 %106
		%192 = %191[%0] []u8
		%193 = LOAD int %192
		%194 = %190[%1] []u8
		%195 = LOAD *u8 %194
		%196 = %195[%193] *u8
		%197 = LOAD u8 %104
		%196 = STORE u8 %197
		%198 = LOAD *[]u8 %106
		%199 = %198[%0] []u8
		%200 = LOAD *[]u8 %106
		%201 = %200[%0] []u8
		%202 = LOAD int %201
		%203 = int 1
		%204 = int %202 + %203
		%199 = STORE int %204
		RET

}

fn create:(type,*mem.Allocator)->[]u32(type %0, *mem.Allocator %1) -> []u32 {

	block_0:
		%101 = ARG #0
		%102 = ALLOC type
		%102 = STORE type %101
		%103 = ARG #1
		%104 = ALLOC *mem.Allocator
		%104 = STORE *mem.Allocator %103
		%105 = int 8
		%106 = ALLOC int
		%106 = STORE int %105
		%107 = LOAD *mem.Allocator %104
		%108 = %107[%0] mem.Allocator
		%109 = LOAD *fn(int, *mem.Allocator) -> ?* %108
		%110 = LOAD int %106
		%111 = u64 4
		%112 = int %110 * %111
		%113 = u64 32
		%114 = int %112 + %113
		%115 = LOAD *mem.Allocator %104
		%116 = CALL %109(%114, %115)
		%117 = ALLOC ?*array.Header
		%117 = STORE ?*array.Header %116
		%118 = LOAD ?*array.Header %117
		%119 = ?* 0
		%120 = %118 != %119
		%121 = bool 0
		%122 = %120 == %121
		IF %122 goto block_1, else goto block_2


	block_1:
		%123 = ALLOC []u32
		RET []u32 %123


	block_2:
		JMP block_3


	block_3:
		%126 = LOAD ?*array.Header %117
		%127 = ALLOC *array.Header
		%127 = STORE *array.Header %126
		%128 = LOAD *array.Header %127
		%129 = %128[%0] array.Header
		%130 = LOAD int %106
		%129 = STORE int %130
		%131 = LOAD *array.Header %127
		%132 = %131[%1] array.Header
		%133 = LOAD *mem.Allocator %104
		%134 = LOAD mem.Allocator %133
		%132 = STORE mem.Allocator %134
		%135 = ALLOC []u32
		%136 = ALLOC []u32
		%136 = STORE []u32 %135
		%137 = %136[%1] []u32
		%138 = LOAD *array.Header %127
		%139 = i64 1
		%140 = %138[%139] *array.Header
		%137 = STORE *u32 %140
		%141 = %136[%0] []u32
		%142 = int 0
		%141 = STORE int %142
		RET []u32 %136

}

fn free:(*[]u32)->void(*[]u32 %0) {

	block_0:
		%101 = ARG #0
		%102 = ALLOC *[]u32
		%102 = STORE *[]u32 %101
		%103 = LOAD *[]u32 %102
		%104 = ALLOC *[]u32
		%104 = STORE *[]u32 %103
		%105 = LOAD *[]u32 %104
		%106 = %105[%1] []u32
		%107 = LOAD *u32 %106
		%108 = i64 1
		%109 = int 0
		%110 = int %109 - %108
		%111 = %107[%110] *array.Header
		%112 = ALLOC *array.Header
		%112 = STORE *array.Header %111
		%113 = LOAD *array.Header %112
		%114 = %113[%1] array.Header
		%115 = %114[%1] mem.Allocator
		%116 = LOAD *fn(*, *mem.Allocator) %115
		%117 = LOAD *array.Header %112
		%118 = LOAD *array.Header %112
		%119 = %118[%1] array.Header
		%120 = CALL %116(%117, %119)
		%121 = LOAD *[]u32 %104
		%122 = %121[%1] []u32
		%123 = ?* 0
		%122 = STORE *u32 %123
		%124 = LOAD *[]u32 %104
		%125 = %124[%0] []u32
		%126 = int 0
		%125 = STORE int %126
		RET

}

fn free:(*[]u8)->void(*[]u8 %0) {

	block_0:
		%101 = ARG #0
		%102 = ALLOC *[]u8
		%102 = STORE *[]u8 %101
		%103 = LOAD *[]u8 %102
		%104 = ALLOC *[]u8
		%104 = STORE *[]u8 %103
		%105 = LOAD *[]u8 %104
		%106 = %105[%1] []u8
		%107 = LOAD *u8 %106
		%108 = i64 1
		%109 = int 0
		%110 = int %109 - %108
		%111 = %107[%110] *array.Header
		%112 = ALLOC *array.Header
		%112 = STORE *array.Header %111
		%113 = LOAD *array.Header %112
		%114 = %113[%1] array.Header
		%115 = %114[%1] mem.Allocator
		%116 = LOAD *fn(*, *mem.Allocator) %115
		%117 = LOAD *array.Header %112
		%118 = LOAD *array.Header %112
		%119 = %118[%1] array.Header
		%120 = CALL %116(%117, %119)
		%121 = LOAD *[]u8 %104
		%122 = %121[%1] []u8
		%123 = ?* 0
		%122 = STORE *u8 %123
		%124 = LOAD *[]u8 %104
		%125 = %124[%0] []u8
		%126 = int 0
		%125 = STORE int %126
		RET

}

