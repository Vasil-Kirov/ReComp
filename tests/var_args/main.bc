; ModuleID = 'main'
source_filename = "var_args.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.1 = type { i64, ptr }
%"__init!Arg" = type { i64, ptr }
%slice.2 = type { i64, ptr }
%slice.3 = type { i64, ptr }

define void @"__main!__GlobalInitializerFunction.0"() {
block_0:
  ret void
}

define i32 @"__main!foo"(ptr %0) !dbg !4 {
block_0:
  %1 = alloca %slice.1, align 8, !dbg !9
  %2 = alloca i64, align 8, !dbg !10
  %3 = alloca i64, align 8, !dbg !11
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !10
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !11
  %4 = alloca %"__init!Arg", align 8, !dbg !12
  %5 = alloca %"__init!Arg", align 8, !dbg !12
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 16, i1 false), !dbg !12
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !9
  call void @llvm.dbg.value(metadata ptr %1, metadata !13, metadata !DIExpression()), !dbg !9
  store i64 0, ptr %2, align 8, !dbg !10
  call void @llvm.dbg.declare(metadata ptr %2, metadata !26, metadata !DIExpression()), !dbg !10
  %6 = getelementptr inbounds %slice.2, ptr %1, i32 0, i32 0, !dbg !11
  %7 = load i64, ptr %6, align 8, !dbg !11
  store i64 0, ptr %3, align 8, !dbg !11
  call void @llvm.dbg.declare(metadata ptr %3, metadata !27, metadata !DIExpression()), !dbg !11
  br label %block_1, !dbg !11

block_1:                                          ; preds = %block_3, %block_0
  %8 = load i64, ptr %3, align 8, !dbg !11
  %9 = icmp ult i64 %8, %7, !dbg !11
  br i1 %9, label %block_2, label %block_4, !dbg !11

block_2:                                          ; preds = %block_1
  %10 = load i64, ptr %3, align 8, !dbg !12
  %11 = getelementptr inbounds %slice.2, ptr %1, i32 0, i32 1, !dbg !12
  %12 = load ptr, ptr %11, align 8, !dbg !12
  %13 = getelementptr %"__init!Arg", ptr %12, i64 %10, !dbg !12
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %13, i64 16, i1 false), !dbg !12
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 16, i1 false), !dbg !12
  call void @llvm.dbg.declare(metadata ptr %5, metadata !28, metadata !DIExpression()), !dbg !12
  %14 = getelementptr inbounds %"__init!Arg", ptr %5, i32 0, i32 0, !dbg !29
  %15 = load i64, ptr %14, align 8, !dbg !29
  %16 = icmp eq i64 %15, 9, !dbg !29
  br i1 %16, label %block_5, label %block_6, !dbg !29

block_5:                                          ; preds = %block_2
  %17 = load i64, ptr %2, align 8, !dbg !30
  %18 = getelementptr inbounds %"__init!Arg", ptr %5, i32 0, i32 1, !dbg !30
  %19 = load ptr, ptr %18, align 8, !dbg !30
  %20 = load i32, ptr %19, align 4, !dbg !30
  %21 = sext i32 %20 to i64, !dbg !30
  %22 = add i64 %17, %21, !dbg !30
  store i64 %22, ptr %2, align 8, !dbg !30
  br label %block_7, !dbg !30

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !30

block_7:                                          ; preds = %block_6, %block_5
  br label %block_3, !dbg !30

block_3:                                          ; preds = %block_7
  %23 = load i64, ptr %3, align 8, !dbg !30
  %24 = add i64 %23, 1, !dbg !30
  store i64 %24, ptr %3, align 8, !dbg !30
  br label %block_1, !dbg !30

block_4:                                          ; preds = %block_1
  %25 = load i64, ptr %2, align 8, !dbg !31
  %26 = trunc i64 %25 to i32, !dbg !31
  ret i32 %26, !dbg !31
}

define i32 @"__main!main"() !dbg !32 {
block_0:
  %0 = alloca %slice.3, align 8, !dbg !33
  %1 = alloca [4 x %"__init!Arg"], align 8, !dbg !33
  %2 = alloca i64, align 8, !dbg !33
  %3 = alloca i32, align 4, !dbg !33
  %4 = alloca i32, align 4, !dbg !33
  %5 = alloca i64, align 8, !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 64, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 4 %4, i8 0, i32 4, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !33
  %6 = getelementptr inbounds %slice.3, ptr %0, i32 0, i32 0, !dbg !33
  %7 = getelementptr inbounds %slice.3, ptr %0, i32 0, i32 1, !dbg !33
  store i64 4, ptr %6, align 8, !dbg !33
  store ptr %1, ptr %7, align 8, !dbg !33
  store i64 1, ptr %2, align 8, !dbg !33
  %8 = getelementptr [4 x %"__init!Arg"], ptr %1, i64 0, i64 0, !dbg !33
  %9 = getelementptr inbounds %"__init!Arg", ptr %8, i32 0, i32 0, !dbg !33
  %10 = getelementptr inbounds %"__init!Arg", ptr %8, i32 0, i32 1, !dbg !33
  store i64 15, ptr %9, align 8, !dbg !33
  store ptr %2, ptr %10, align 8, !dbg !33
  store i32 2, ptr %3, align 4, !dbg !33
  %11 = getelementptr [4 x %"__init!Arg"], ptr %1, i64 0, i64 1, !dbg !33
  %12 = getelementptr inbounds %"__init!Arg", ptr %11, i32 0, i32 0, !dbg !33
  %13 = getelementptr inbounds %"__init!Arg", ptr %11, i32 0, i32 1, !dbg !33
  store i64 9, ptr %12, align 8, !dbg !33
  store ptr %3, ptr %13, align 8, !dbg !33
  store i32 3, ptr %4, align 4, !dbg !33
  %14 = getelementptr [4 x %"__init!Arg"], ptr %1, i64 0, i64 2, !dbg !33
  %15 = getelementptr inbounds %"__init!Arg", ptr %14, i32 0, i32 0, !dbg !33
  %16 = getelementptr inbounds %"__init!Arg", ptr %14, i32 0, i32 1, !dbg !33
  store i64 9, ptr %15, align 8, !dbg !33
  store ptr %4, ptr %16, align 8, !dbg !33
  store i64 4, ptr %5, align 8, !dbg !33
  %17 = getelementptr [4 x %"__init!Arg"], ptr %1, i64 0, i64 3, !dbg !33
  %18 = getelementptr inbounds %"__init!Arg", ptr %17, i32 0, i32 0, !dbg !33
  %19 = getelementptr inbounds %"__init!Arg", ptr %17, i32 0, i32 1, !dbg !33
  store i64 15, ptr %18, align 8, !dbg !33
  store ptr %5, ptr %19, align 8, !dbg !33
  %20 = call i32 @"__main!foo"(ptr %0), !dbg !33
  %21 = sub i32 %20, 5, !dbg !33
  ret i32 %21, !dbg !33
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "var_args.rcp", directory: "E:\\C_Projects\\ReComp\\tests\\var_args")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "foo", linkageName: "__main!foo", scope: !1, file: !1, line: 3, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 3, scope: !4)
!10 = !DILocation(line: 4, scope: !4)
!11 = !DILocation(line: 5, scope: !4)
!12 = !DILocation(line: 6, scope: !4)
!13 = !DILocalVariable(name: "list", scope: !4, file: !1, line: 3, type: !14)
!14 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !15)
!15 = !{!16, !24}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !17, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__init!Arg", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!18 = !DICompositeType(tag: DW_TAG_structure_type, name: "__init!Arg", scope: !1, file: !1, size: 128, elements: !19)
!19 = !{!20, !22}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !1, file: !1, baseType: !21, size: 64, align: 64)
!21 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1, file: !1, baseType: !23, size: 64, align: 64, offset: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !25, size: 64, align: 64, offset: 64)
!25 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!26 = !DILocalVariable(name: "sum", scope: !4, file: !1, line: 4, type: !25)
!27 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 5, type: !25)
!28 = !DILocalVariable(name: "it", scope: !4, file: !1, line: 6, type: !18)
!29 = !DILocation(line: 7, scope: !4)
!30 = !DILocation(line: 8, scope: !4)
!31 = !DILocation(line: 11, scope: !4)
!32 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 14, type: !5, spFlags: DISPFlagDefinition, unit: !0)
!33 = !DILocation(line: 15, scope: !32)
