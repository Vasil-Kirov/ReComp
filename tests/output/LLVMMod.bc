; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%Foo = type { [100 x i32], [4 x i32] }

define i32 @main() {
block_0:
  %0 = alloca %Foo, align 8
  %1 = alloca [100 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %1, i8 0, i64 400, i1 false)
  %2 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %1, i64 400, i1 false)
  %3 = alloca [4 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 16, i1 false)
  %4 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 16, i1 false)
  %5 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 1
  %6 = getelementptr [4 x i32], ptr %5, i64 0, i64 2
  store i32 3, ptr %6, align 4
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 0
  %9 = getelementptr [100 x i32], ptr %8, i64 0, i64 50
  store i32 1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  %11 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 1
  %12 = getelementptr [4 x i32], ptr %11, i64 0, i64 2
  %13 = load i32, ptr %12, align 4
  %14 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 0
  %15 = getelementptr [100 x i32], ptr %14, i64 0, i64 50
  %16 = load i32, ptr %15, align 4
  %17 = sub i32 %13, %16
  %18 = sub i32 %17, 2
  ret i32 %18
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
