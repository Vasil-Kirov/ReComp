; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!Foo" = type { [100 x i32] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !9
  %1 = alloca %"__main!Foo", align 8, !dbg !9
  %2 = alloca ptr, align 8, !dbg !10
  %3 = alloca [100 x i32], align 4, !dbg !11
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 400, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 400, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !10
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 4 %0, i64 400, i1 false), !dbg !9
  call void @llvm.dbg.declare(metadata ptr %1, metadata !12, metadata !DIExpression()), !dbg !9
  store ptr null, ptr %2, align 8, !dbg !10
  call void @llvm.dbg.declare(metadata ptr %2, metadata !19, metadata !DIExpression()), !dbg !10
  %4 = load ptr, ptr %2, align 8, !dbg !11
  %5 = getelementptr inbounds %"__main!Foo", ptr %4, i32 0, i32 0, !dbg !11
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %3, ptr align 4 %5, i64 400, i1 false), !dbg !11
  %6 = getelementptr [100 x i32], ptr %3, i64 0, i64 0, !dbg !11
  %7 = load i32, ptr %6, align 4, !dbg !11
  ret i32 %7, !dbg !11
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 8, scope: !4)
!10 = !DILocation(line: 9, scope: !4)
!11 = !DILocation(line: 10, scope: !4)
!12 = !DILocalVariable(name: "x", scope: !4, file: !1, line: 8, type: !13)
!13 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, size: 3200, elements: !14)
!14 = !{!15}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1, file: !1, baseType: !16, size: 3200, align: 32)
!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 3200, align: 32, elements: !17)
!17 = !{!18}
!18 = !DISubrange(count: 100, lowerBound: 0)
!19 = !DILocalVariable(name: "my_x", scope: !4, file: !1, line: 9, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*__main!Foo", baseType: !13, size: 64, align: 64, dwarfAddressSpace: 0)
