; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!foo" = type { %"__main!bar" }
%"__main!bar" = type { i64 }

@"__main!my_c" = global %"__main!foo" zeroinitializer

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  %0 = alloca %"__main!foo", align 8
  %1 = alloca %"__main!bar", align 8
  %2 = getelementptr inbounds %"__main!bar", ptr %1, i32 0, i32 0
  store i64 10, ptr %2, align 8
  %3 = getelementptr inbounds %"__main!foo", ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 8, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 @"__main!my_c", ptr align 8 %0, i64 8, i1 false)
  ret void
}

define i64 @"__main!give"() !dbg !4 {
block_0:
  %0 = alloca %"__main!bar", align 8, !dbg !12
  %1 = getelementptr inbounds %"__main!bar", ptr %0, i32 0, i32 0, !dbg !12
  store i64 10, ptr %1, align 8, !dbg !12
  call void @llvm.dbg.declare(metadata ptr %0, metadata !13, metadata !DIExpression()), !dbg !12
  %2 = load i64, ptr %0, align 8, !dbg !14
  ret i64 %2, !dbg !14
}

define i32 @"__main!main"() !dbg !15 {
block_0:
  %0 = call i64 @"__main!give"(), !dbg !19
  %1 = alloca %"__main!bar", align 8, !dbg !19
  store i64 %0, ptr %1, align 8, !dbg !19
  %2 = getelementptr inbounds %"__main!bar", ptr %1, i32 0, i32 0, !dbg !19
  %3 = load i64, ptr %2, align 8, !dbg !19
  %4 = trunc i64 %3 to i32, !dbg !19
  ret i32 %4, !dbg !19
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "D:\\Programming\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "give", linkageName: "__main!give", scope: !1, file: !1, line: 17, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !11)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!bar", scope: !1, file: !1, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1, file: !1, baseType: !10, size: 64, align: 64)
!10 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!11 = !{}
!12 = !DILocation(line: 18, scope: !4)
!13 = !DILocalVariable(name: "res", scope: !4, file: !1, line: 18, type: !7)
!14 = !DILocation(line: 19, scope: !4)
!15 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 22, type: !16, spFlags: DISPFlagDefinition, unit: !0)
!16 = !DISubroutineType(types: !17)
!17 = !{!18}
!18 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!19 = !DILocation(line: 23, scope: !15)
