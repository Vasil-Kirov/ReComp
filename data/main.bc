; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__memory!Allocator" = type { ptr, ptr }
%slice = type { i64, ptr }
%slice.1 = type { i64, ptr }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

declare void @puts(ptr)

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca %"__memory!Allocator", align 8, !dbg !9
  %1 = alloca %"__memory!Allocator", align 8, !dbg !9
  %2 = alloca %slice, align 8, !dbg !10
  %3 = alloca %slice, align 8, !dbg !10
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 16, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 16, i1 false), !dbg !10
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 16, i1 false), !dbg !10
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !9
  call void @llvm.dbg.declare(metadata ptr %1, metadata !11, metadata !DIExpression()), !dbg !9
  call void @"make_slice@*__memory!Allocator_type_int_@[]i32"(ptr %2, ptr %1, i64 9, i64 10), !dbg !10
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %2, i64 16, i1 false), !dbg !10
  call void @llvm.dbg.declare(metadata ptr %3, metadata !21, metadata !DIExpression()), !dbg !10
  %4 = getelementptr inbounds %slice, ptr %3, i32 0, i32 0, !dbg !27
  %5 = load i64, ptr %4, align 8, !dbg !27
  %6 = trunc i64 %5 to i32, !dbg !27
  ret i32 %6, !dbg !27
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

define private void @"make_slice@*__memory!Allocator_type_int_@[]i32"(ptr %0, ptr %1, i64 %2, i64 %3) !dbg !28 {
block_0:
  %4 = alloca ptr, align 8, !dbg !33
  %5 = alloca i64, align 8, !dbg !33
  %6 = alloca i64, align 8, !dbg !33
  %7 = alloca %slice.1, align 8, !dbg !34
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %5, i8 0, i32 8, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %6, i8 0, i32 8, i1 false), !dbg !33
  call void @llvm.memset.p0.i32(ptr align 8 %7, i8 0, i32 16, i1 false), !dbg !34
  store ptr %1, ptr %4, align 8, !dbg !33
  call void @llvm.dbg.value(metadata ptr %4, metadata !35, metadata !DIExpression()), !dbg !33
  store i64 %2, ptr %5, align 8, !dbg !33
  call void @llvm.dbg.value(metadata ptr %5, metadata !36, metadata !DIExpression()), !dbg !33
  store i64 %3, ptr %6, align 8, !dbg !33
  call void @llvm.dbg.value(metadata ptr %6, metadata !37, metadata !DIExpression()), !dbg !33
  %8 = load ptr, ptr %4, align 8, !dbg !34
  %9 = getelementptr inbounds %"__memory!Allocator", ptr %8, i32 0, i32 0, !dbg !34
  %10 = load ptr, ptr %9, align 8, !dbg !34
  %11 = load i64, ptr %6, align 8, !dbg !34
  %12 = load ptr, ptr %4, align 8, !dbg !34
  %13 = call ptr %10(i64 %11, ptr %12), !dbg !34
  %14 = load i64, ptr %6, align 8, !dbg !34
  %15 = getelementptr inbounds %slice.1, ptr %7, i32 0, i32 0, !dbg !34
  %16 = getelementptr inbounds %slice.1, ptr %7, i32 0, i32 1, !dbg !34
  store ptr %13, ptr %16, align 8, !dbg !34
  store i64 %14, ptr %15, align 8, !dbg !34
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !34
  ret void, !dbg !34
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 7, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 8, scope: !4)
!10 = !DILocation(line: 9, scope: !4)
!11 = !DILocalVariable(name: "alloc", scope: !4, file: !1, line: 8, type: !12)
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, elements: !13)
!13 = !{!14, !20}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !15, size: 64, align: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *) -> *", baseType: !16, size: 64, align: 64, dwarfAddressSpace: 0)
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !19, !18}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!19 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !18, size: 64, align: 64, offset: 64)
!21 = !DILocalVariable(name: "x", scope: !4, file: !1, line: 9, type: !22)
!22 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !23)
!23 = !{!24, !26}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !25, size: 64, align: 64)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*i32", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !19, size: 64, align: 64, offset: 64)
!27 = !DILocation(line: 10, scope: !4)
!28 = distinct !DISubprogram(name: "make_slice@*__memory!Allocator_type_int_@[]i32", linkageName: "__main!make_slice@*__memory!Allocator_type_int_@[]i32", scope: !1, file: !1, line: 10, type: !29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = !DISubroutineType(types: !30)
!30 = !{!22, !31, !32, !19}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !12, size: 64, align: 64, dwarfAddressSpace: 0)
!32 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!33 = !DILocation(line: 10, scope: !28)
!34 = !DILocation(line: 11, scope: !28)
!35 = !DILocalVariable(name: "allocator", scope: !28, file: !1, line: 10, type: !31)
!36 = !DILocalVariable(name: "T", arg: 1, scope: !28, file: !1, line: 10, type: !32)
!37 = !DILocalVariable(name: "size", arg: 2, scope: !28, file: !1, line: 10, type: !19)
