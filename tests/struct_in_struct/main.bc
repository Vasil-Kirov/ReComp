; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%"main!vv" = type { %"main!v2", i64 }
%"main!v2" = type { float, i64 }

define void @"main!__!GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"main!main"() {
block_0:
  %0 = alloca %"main!vv", align 8
  %1 = alloca %"main!v2", align 8
  %2 = getelementptr inbounds %"main!v2", ptr %1, i32 0, i32 0
  store float 1.000000e+01, ptr %2, align 4
  %3 = getelementptr inbounds %"main!v2", ptr %1, i32 0, i32 1
  store i64 20, ptr %3, align 8
  %4 = getelementptr inbounds %"main!vv", ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 16, i1 false)
  %5 = getelementptr inbounds %"main!vv", ptr %0, i32 0, i32 1
  store i64 30, ptr %5, align 8
  %6 = getelementptr inbounds %"main!vv", ptr %0, i32 0, i32 0
  %7 = getelementptr inbounds %"main!v2", ptr %6, i32 0, i32 0
  %8 = load float, ptr %7, align 4
  %9 = fptosi float %8 to i64
  %10 = sub i64 60, %9
  %11 = getelementptr inbounds %"main!vv", ptr %0, i32 0, i32 0
  %12 = getelementptr inbounds %"main!v2", ptr %11, i32 0, i32 1
  %13 = load i64, ptr %12, align 8
  %14 = sub i64 %10, %13
  %15 = getelementptr inbounds %"main!vv", ptr %0, i32 0, i32 1
  %16 = load i64, ptr %15, align 8
  %17 = sub i64 %14, %16
  %18 = trunc i64 %17 to i32
  ret i32 %18
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
