; ModuleID = 'main'
source_filename = "struct.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!Foo" = type { i32, [100 x i32], [4 x i32] }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca %"__main!Foo", align 8, !dbg !9
  %1 = alloca [100 x i32], align 4, !dbg !9
  call void @llvm.memset.p0.i64(ptr align 4 %1, i8 0, i64 400, i1 false), !dbg !9
  %2 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 1, !dbg !9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %2, ptr align 4 %1, i64 400, i1 false), !dbg !9
  %3 = alloca [4 x i32], align 4, !dbg !9
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 16, i1 false), !dbg !9
  %4 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 2, !dbg !9
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 16, i1 false), !dbg !9
  %5 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !9
  store i32 2, ptr %5, align 4, !dbg !9
  call void @llvm.dbg.declare(metadata ptr %0, metadata !10, metadata !DIExpression()), !dbg !9
  %6 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 2, !dbg !12
  %7 = getelementptr [4 x i32], ptr %6, i64 0, i64 2, !dbg !12
  store i32 3, ptr %7, align 4, !dbg !12
  %8 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 1, !dbg !13
  %9 = getelementptr [100 x i32], ptr %8, i64 0, i64 50, !dbg !13
  store i32 1, ptr %9, align 4, !dbg !13
  %10 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 2, !dbg !14
  %11 = getelementptr [4 x i32], ptr %10, i64 0, i64 2, !dbg !14
  %12 = load i32, ptr %11, align 4, !dbg !14
  %13 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 1, !dbg !14
  %14 = getelementptr [100 x i32], ptr %13, i64 0, i64 50, !dbg !14
  %15 = load i32, ptr %14, align 4, !dbg !14
  %16 = sub i32 %12, %15, !dbg !14
  %17 = getelementptr inbounds %"__main!Foo", ptr %0, i32 0, i32 0, !dbg !14
  %18 = load i32, ptr %17, align 4, !dbg !14
  %19 = sub i32 %16, %18, !dbg !14
  ret i32 %19, !dbg !14
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "struct.rcp", directory: "D:\\Programming\\ReComp\\tests\\struct")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 10, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 11, scope: !4)
!10 = !DILocalVariable(name: "x", scope: !4, file: !1, line: 11, type: !11)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!Foo", scope: !1, file: !1, flags: DIFlagFwdDecl, elements: !8)
!12 = !DILocation(line: 12, scope: !4)
!13 = !DILocation(line: 13, scope: !4)
!14 = !DILocation(line: 14, scope: !4)
