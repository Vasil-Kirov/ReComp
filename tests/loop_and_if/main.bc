; ModuleID = 'main'
source_filename = "loop_and_if.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

define void @"__main!__GlobalInitializerFunction.0"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca i64, align 8, !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 8, i1 false), !dbg !9
  %1 = alloca i64, align 8, !dbg !10
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false), !dbg !10
  %2 = alloca i64, align 8, !dbg !11
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !11
  store i64 0, ptr %0, align 8, !dbg !9
  call void @llvm.dbg.declare(metadata ptr %0, metadata !12, metadata !DIExpression()), !dbg !9
  br label %block_1, !dbg !14

block_1:                                          ; preds = %block_6, %block_0
  br label %block_2, !dbg !14

block_2:                                          ; preds = %block_1
  %3 = load i64, ptr %0, align 8, !dbg !15
  %4 = icmp eq i64 %3, 5, !dbg !15
  br i1 %4, label %block_4, label %block_5, !dbg !15

block_4:                                          ; preds = %block_2
  br label %block_3, !dbg !16

block_5:                                          ; preds = %block_2
  br label %block_6, !dbg !16

block_6:                                          ; preds = %block_5
  %5 = load i64, ptr %0, align 8, !dbg !17
  %6 = add i64 %5, 1, !dbg !17
  store i64 %6, ptr %0, align 8, !dbg !17
  br label %block_1, !dbg !17

block_3:                                          ; preds = %block_4
  br label %block_7, !dbg !18

block_7:                                          ; preds = %block_8, %block_3
  %7 = load i64, ptr %0, align 8, !dbg !18
  %8 = icmp slt i64 %7, 10, !dbg !18
  br i1 %8, label %block_8, label %block_9, !dbg !18

block_8:                                          ; preds = %block_7
  %9 = load i64, ptr %0, align 8, !dbg !19
  %10 = add i64 %9, 1, !dbg !19
  store i64 %10, ptr %0, align 8, !dbg !19
  br label %block_7, !dbg !19

block_9:                                          ; preds = %block_7
  store i64 0, ptr %1, align 8, !dbg !10
  call void @llvm.dbg.declare(metadata ptr %1, metadata !20, metadata !DIExpression()), !dbg !10
  br label %block_10, !dbg !10

block_10:                                         ; preds = %block_12, %block_9
  %11 = load i64, ptr %1, align 8, !dbg !10
  %12 = icmp slt i64 %11, 10, !dbg !10
  br i1 %12, label %block_11, label %block_13, !dbg !10

block_11:                                         ; preds = %block_10
  %13 = load i64, ptr %0, align 8, !dbg !21
  %14 = add i64 %13, 1, !dbg !21
  store i64 %14, ptr %0, align 8, !dbg !21
  br label %block_12, !dbg !21

block_12:                                         ; preds = %block_11
  %15 = load i64, ptr %1, align 8, !dbg !21
  %16 = add i64 %15, 1, !dbg !21
  store i64 %16, ptr %1, align 8, !dbg !21
  %17 = load i64, ptr %1, align 8, !dbg !21
  br label %block_10, !dbg !21

block_13:                                         ; preds = %block_10
  store i64 0, ptr %2, align 8, !dbg !11
  call void @llvm.dbg.declare(metadata ptr %2, metadata !22, metadata !DIExpression()), !dbg !11
  br label %block_14, !dbg !11

block_14:                                         ; preds = %block_16, %block_13
  %18 = load i64, ptr %2, align 8, !dbg !11
  %19 = icmp ult i64 %18, 10, !dbg !11
  br i1 %19, label %block_15, label %block_17, !dbg !11

block_15:                                         ; preds = %block_14
  %20 = load i64, ptr %0, align 8, !dbg !23
  %21 = add i64 %20, 1, !dbg !23
  store i64 %21, ptr %0, align 8, !dbg !23
  br label %block_16, !dbg !23

block_16:                                         ; preds = %block_15
  %22 = load i64, ptr %2, align 8, !dbg !23
  %23 = add i64 %22, 1, !dbg !23
  store i64 %23, ptr %2, align 8, !dbg !23
  br label %block_14, !dbg !23

block_17:                                         ; preds = %block_14
  %24 = load i64, ptr %0, align 8, !dbg !24
  %25 = sub i64 %24, 30, !dbg !24
  %26 = trunc i64 %25 to i32, !dbg !24
  ret i32 %26, !dbg !24
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "loop_and_if.rcp", directory: "E:\\C_Projects\\ReComp\\tests\\loop_and_if")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 3, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 4, scope: !4)
!10 = !DILocation(line: 16, scope: !4)
!11 = !DILocation(line: 21, scope: !4)
!12 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 4, type: !13)
!13 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!14 = !DILocation(line: 5, scope: !4)
!15 = !DILocation(line: 6, scope: !4)
!16 = !DILocation(line: 7, scope: !4)
!17 = !DILocation(line: 9, scope: !4)
!18 = !DILocation(line: 12, scope: !4)
!19 = !DILocation(line: 13, scope: !4)
!20 = !DILocalVariable(name: "idx", scope: !4, file: !1, line: 16, type: !13)
!21 = !DILocation(line: 17, scope: !4)
!22 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 21, type: !13)
!23 = !DILocation(line: 22, scope: !4)
!24 = !DILocation(line: 25, scope: !4)
