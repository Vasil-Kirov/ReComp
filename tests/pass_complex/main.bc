; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%"main!BigStruct" = type { [100 x i32] }
%"main!SmallStruct" = type { i16, i16 }

define void @"main!__!GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"main!make_bs"(ptr %0, i32 %1) {
block_0:
  %2 = alloca %"main!BigStruct", align 8
  %3 = alloca [100 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 400, i1 false)
  %4 = getelementptr inbounds %"main!BigStruct", ptr %2, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 400, i1 false)
  %5 = alloca i64, align 8
  store i64 0, ptr %5, align 8
  br label %block_1

block_1:                                          ; preds = %block_3, %block_0
  %6 = load i64, ptr %5, align 8
  %7 = icmp slt i64 %6, 100
  br i1 %7, label %block_2, label %block_4

block_2:                                          ; preds = %block_1
  %8 = getelementptr inbounds %"main!BigStruct", ptr %2, i32 0, i32 0
  %9 = load i64, ptr %5, align 8
  %10 = getelementptr [100 x i32], ptr %8, i64 0, i64 %9
  store i32 %1, ptr %10, align 4
  br label %block_3

block_3:                                          ; preds = %block_2
  %11 = load i64, ptr %5, align 8
  %12 = add i64 %11, 1
  store i64 %12, ptr %5, align 8
  %13 = load i64, ptr %5, align 8
  br label %block_1

block_4:                                          ; preds = %block_1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false)
  ret void
}

define void @"main!make_ss"(ptr %0, i32 %1) {
block_0:
  %2 = alloca %"main!SmallStruct", align 8
  %3 = trunc i32 %1 to i16
  %4 = getelementptr inbounds %"main!SmallStruct", ptr %2, i32 0, i32 0
  store i16 %3, ptr %4, align 2
  %5 = trunc i32 %1 to i16
  %6 = getelementptr inbounds %"main!SmallStruct", ptr %2, i32 0, i32 1
  store i16 %5, ptr %6, align 2
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 %2, i64 4, i1 false)
  ret void
}

define void @"main!make_array"(ptr %0, i32 %1) {
block_0:
  %2 = alloca [100 x i32], align 4
  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 400, i1 false)
  %3 = alloca i64, align 8
  store i64 0, ptr %3, align 8
  br label %block_1

block_1:                                          ; preds = %block_3, %block_0
  %4 = load i64, ptr %3, align 8
  %5 = icmp slt i64 %4, 50
  br i1 %5, label %block_2, label %block_4

block_2:                                          ; preds = %block_1
  %6 = load i64, ptr %3, align 8
  %7 = getelementptr [100 x i32], ptr %2, i64 0, i64 %6
  store i32 %1, ptr %7, align 4
  br label %block_3

block_3:                                          ; preds = %block_2
  %8 = load i64, ptr %3, align 8
  %9 = add i64 %8, 1
  store i64 %9, ptr %3, align 8
  %10 = load i64, ptr %3, align 8
  br label %block_1

block_4:                                          ; preds = %block_1
  %11 = alloca i64, align 8
  store i64 50, ptr %11, align 8
  br label %block_5

block_5:                                          ; preds = %block_7, %block_4
  %12 = load i64, ptr %11, align 8
  %13 = icmp slt i64 %12, 100
  br i1 %13, label %block_6, label %block_8

block_6:                                          ; preds = %block_5
  %14 = load i64, ptr %11, align 8
  %15 = getelementptr [100 x i32], ptr %2, i64 0, i64 %14
  %16 = mul i32 %1, 2
  store i32 %16, ptr %15, align 4
  br label %block_7

block_7:                                          ; preds = %block_6
  %17 = load i64, ptr %11, align 8
  %18 = add i64 %17, 1
  store i64 %18, ptr %11, align 8
  %19 = load i64, ptr %11, align 8
  br label %block_5

block_8:                                          ; preds = %block_5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false)
  ret void
}

define i32 @"main!main"() {
block_0:
  %0 = alloca %"main!BigStruct", align 8
  call void @"main!make_bs"(ptr %0, i32 100)
  %1 = alloca %"main!SmallStruct", align 8
  call void @"main!make_ss"(ptr %1, i32 25)
  %2 = alloca [100 x i32], align 4
  call void @"main!make_array"(ptr %2, i32 25)
  %3 = getelementptr inbounds %"main!BigStruct", ptr %0, i32 0, i32 0
  %4 = getelementptr [100 x i32], ptr %3, i64 0, i64 50
  %5 = load i32, ptr %4, align 4
  %6 = getelementptr inbounds %"main!SmallStruct", ptr %1, i32 0, i32 1
  %7 = load i16, ptr %6, align 2
  %8 = sext i16 %7 to i32
  %9 = sub i32 %5, %8
  %10 = getelementptr [100 x i32], ptr %2, i64 0, i64 0
  %11 = load i32, ptr %10, align 4
  %12 = sub i32 %9, %11
  %13 = getelementptr [100 x i32], ptr %2, i64 0, i64 50
  %14 = load i32, ptr %13, align 4
  %15 = sub i32 %12, %14
  ret i32 %15
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
