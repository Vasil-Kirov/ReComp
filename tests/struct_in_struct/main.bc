; ModuleID = 'main'
source_filename = "struct_in_struct.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!vv" = type { %"__main!v2", i64 }
%"__main!v2" = type { float, i64 }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define i32 @"__main!main"() !dbg !4 {
block_0:
  %0 = alloca %"__main!vv", align 8, !dbg !9
  %1 = alloca %"__main!v2", align 8, !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %0, i8 0, i32 24, i1 false), !dbg !9
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 16, i1 false), !dbg !9
  %2 = getelementptr inbounds %"__main!v2", ptr %1, i32 0, i32 0, !dbg !9
  store float 1.000000e+01, ptr %2, align 4, !dbg !9
  %3 = getelementptr inbounds %"__main!v2", ptr %1, i32 0, i32 1, !dbg !9
  store i64 20, ptr %3, align 8, !dbg !9
  %4 = getelementptr inbounds %"__main!vv", ptr %0, i32 0, i32 0, !dbg !9
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 16, i1 false), !dbg !9
  %5 = getelementptr inbounds %"__main!vv", ptr %0, i32 0, i32 1, !dbg !9
  store i64 30, ptr %5, align 8, !dbg !9
  call void @llvm.dbg.declare(metadata ptr %0, metadata !10, metadata !DIExpression()), !dbg !9
  %6 = getelementptr inbounds %"__main!vv", ptr %0, i32 0, i32 0, !dbg !21
  %7 = getelementptr inbounds %"__main!v2", ptr %6, i32 0, i32 0, !dbg !21
  %8 = load float, ptr %7, align 4, !dbg !21
  %9 = fptosi float %8 to i64, !dbg !21
  %10 = sub i64 60, %9, !dbg !21
  %11 = getelementptr inbounds %"__main!vv", ptr %0, i32 0, i32 0, !dbg !21
  %12 = getelementptr inbounds %"__main!v2", ptr %11, i32 0, i32 1, !dbg !21
  %13 = load i64, ptr %12, align 8, !dbg !21
  %14 = sub i64 %10, %13, !dbg !21
  %15 = getelementptr inbounds %"__main!vv", ptr %0, i32 0, i32 1, !dbg !21
  %16 = load i64, ptr %15, align 8, !dbg !21
  %17 = sub i64 %14, %16, !dbg !21
  %18 = trunc i64 %17 to i32, !dbg !21
  ret i32 %18, !dbg !21
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "struct_in_struct.rcp", directory: "D:\\Programming\\ReComp\\tests\\struct_in_struct")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 13, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!8 = !{}
!9 = !DILocation(line: 14, scope: !4)
!10 = !DILocalVariable(name: "bar", scope: !4, file: !1, line: 14, type: !11)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!vv", scope: !1, file: !1, size: 192, elements: !12)
!12 = !{!13, !20}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !1, file: !1, baseType: !14, size: 128, align: 64)
!14 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!v2", scope: !1, file: !1, size: 128, elements: !15)
!15 = !{!16, !18}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1, file: !1, baseType: !17, size: 32, align: 32)
!17 = !DIBasicType(name: "f32", size: 32, encoding: DW_ATE_float)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1, file: !1, baseType: !19, size: 64, align: 64, offset: 64)
!19 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1, file: !1, baseType: !19, size: 64, align: 64, offset: 128)
!21 = !DILocation(line: 15, scope: !4)
