module main

_ :: #import "data/vmem.rcp";

/*
struct Method {
	print: *fn(fmt: string, args: ...),
	print_the_fl: *fn(m: *Method, fl := #file_location),
}
*/

main :: fn () -> i32 #foreign {
	a := make_arena_alloc(128);
	f := ?new_t(i32, &a);


	return *f;
}

printf :: fn(fmt: *u8, arg: i32) -> i32 #foreign {

	return 0;
}


//#run main();


//	foo = .{"asd"};
//
//	malloc_alloc := libc.make_malloc_allocator(true);
//	lexer := make_lexer(&malloc_alloc);
//	add_compiler_keywords(&lexer);
//	tokens := lex_string(&lexer, "main :: fn() -> i32;", &malloc_alloc, .{"text", 1, 1});
//	for token in tokens {
//		println("token: %", token);
//	}
