; ModuleID = 'main'
source_filename = "file1.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@"__main!foo" = global i64 0
@0 = private unnamed_addr constant [3 x i8] c"11\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"22\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"1\00", align 1

define void @"__main!__GlobalInitializerFunction.0"() {
block_0:
  ret void
}

declare void @puts(ptr)

declare ptr @malloc(i64)

define ptr @"__main!allocator_alloc"(i64 %0, ptr %1) !dbg !4 {
block_0:
  %2 = alloca i64, align 8, !dbg !20
  %3 = alloca ptr, align 8, !dbg !20
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false), !dbg !20
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false), !dbg !20
  store i64 %0, ptr %2, align 8, !dbg !20
  call void @llvm.dbg.value(metadata ptr %2, metadata !21, metadata !DIExpression()), !dbg !20
  store ptr %1, ptr %3, align 8, !dbg !20
  call void @llvm.dbg.value(metadata ptr %3, metadata !22, metadata !DIExpression()), !dbg !20
  %4 = load i64, ptr %2, align 8, !dbg !23
  %5 = call ptr @malloc(i64 %4), !dbg !23
  ret ptr %5, !dbg !23
}

define i32 @"__main!main"() !dbg !24 {
block_0:
  call void @puts(ptr @0), !dbg !28
  call void @puts(ptr @1), !dbg !29
  call void @puts(ptr @2), !dbg !30
  call void @puts(ptr @3), !dbg !31
  call void @puts(ptr @4), !dbg !32
  call void @puts(ptr @5), !dbg !33
  ret i32 4014, !dbg !33
}

declare i64 @"__main!give_one"()

declare i32 @"__main!give_two"()

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "file1.rcp", directory: "E:\\C_Projects\\ReComp")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "allocator_alloc", linkageName: "__main!allocator_alloc", scope: !1, file: !1, line: 8, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!8 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !10, size: 64, align: 64, dwarfAddressSpace: 0)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, elements: !11)
!11 = !{!12, !18}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !13, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *__memory!Allocator) -> *", baseType: !14, size: 64, align: 64, dwarfAddressSpace: 0)
!14 = !DISubroutineType(types: !15)
!15 = !{!7, !8, !16}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__memory!Allocator", baseType: !17, size: 64, align: 64, dwarfAddressSpace: 0)
!17 = !DICompositeType(tag: DW_TAG_structure_type, name: "__memory!Allocator", scope: !1, file: !1, size: 128, align: 64, flags: DIFlagFwdDecl)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !7, size: 64, align: 64, offset: 64)
!19 = !{}
!20 = !DILocation(line: 8, scope: !4)
!21 = !DILocalVariable(name: "size", scope: !4, file: !1, line: 8, type: !8)
!22 = !DILocalVariable(name: "this", arg: 1, scope: !4, file: !1, line: 8, type: !9)
!23 = !DILocation(line: 9, scope: !4)
!24 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 12, type: !25, spFlags: DISPFlagDefinition, unit: !0)
!25 = !DISubroutineType(types: !26)
!26 = !{!27}
!27 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!28 = !DILocation(line: 25, scope: !24)
!29 = !DILocation(line: 24, scope: !24)
!30 = !DILocation(line: 23, scope: !24)
!31 = !DILocation(line: 21, scope: !24)
!32 = !DILocation(line: 20, scope: !24)
!33 = !DILocation(line: 19, scope: !24)
