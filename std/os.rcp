module os

assert :: fn(cond: bool, reason: string) {
	if !cond {
		header := "Assert Failed!\n";
		print(header.data, header.count as u32);
		print(reason.data, reason.count as u32);
		abort();
	}
}

#if Windows {
    STD_INPUT_HANDLE  :: (-10) as u32;
    STD_OUTPUT_HANDLE :: (-11) as u32;
    STD_ERROR_HANDLE  :: (-12) as u32;
    INVALID_HANDLE_VALUE :: cast(?*, ((-1) as u64));

    CP_UTF7 :: 65000 as u32;      // UTF-7 translation
    CP_UTF8 :: 65001 as u32;      // UTF-8 translation

    MEM_COMMIT  :: 0x00001000 as u32;
    MEM_RESERVE :: 0x00002000 as u32; 
    MEM_RELEASE :: 0x00008000 as u32;


    PAGE_NOACCESS          :: 0x001 as u32;
    PAGE_READONLY          :: 0x002 as u32;
    PAGE_READWRITE         :: 0x004 as u32;
    PAGE_WRITECOPY         :: 0x008 as u32;
    PAGE_EXECUTE           :: 0x010 as u32;
    PAGE_EXECUTE_READ      :: 0x020 as u32;
    PAGE_EXECUTE_READWRITE :: 0x040 as u32;
    PAGE_EXECUTE_WRITECOPY :: 0x080 as u32;
    PAGE_GUARD             :: 0x100 as u32;
    PAGE_NOCACHE           :: 0x200 as u32;
    PAGE_WRITECOMBINE      :: 0x400 as u32;

    struct LARGE_INTEGER_STRUCT {
        LowPart: u32,
        HighPart: i32,
    }

    union LARGE_INTEGER {
        u: LARGE_INTEGER_STRUCT,
        QuadPart: i64,
    }

    CreateFileA :: fn #foreign(name: *u8, access: u32, shared: u32, security_attributes: ?*,
        creation_disposition: u32, flags_and_attribs: u32, template: ?*) -> ?*;
    WriteFile :: fn #foreign(hFile: *, lpBuff: *, nBytesToWrite: u32, lpBytesWritten: *u32, lpOverlapped: ?*) -> bool;
    GetStdHandle :: fn #foreign(Handle: u32) -> ?*;
    ExitProcess :: fn #foreign(ExitCode: u32);
    SetConsoleOutputCP :: fn #foreign(code_page: u32) -> i32; // win32 bool
    VirtualAlloc :: fn #foreign(addr: ?*, size: uint, type: u32, protect: u32) -> ?*;
    VirtualFree :: fn #foreign(addr: ?*, size: uint, type: u32) -> bool;
    ReadConsoleA :: fn #foreign(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: u32, lpNumberOfCharsRead: *u32, pInputControl: ?*) -> bool;
    GetFileSizeEx :: fn #foreign(file: *, out: *LARGE_INTEGER) -> bool;
    ReadFile :: fn #foreign(file: *, buf: *, bytes_to_read: u32, bytes_read: ?*u32, overlapped: ?*) -> bool;
    CloseHandle :: fn #foreign(handle: *) -> bool;

    abort :: fn() {
        ExitProcess(1);
        return;
    }

    print :: fn(data: *u8, count: u32) {
        SetConsoleOutputCP(CP_UTF8);
        handle := GetStdHandle(STD_OUTPUT_HANDLE);
        written: u32;
        if (handle != null) && (handle != INVALID_HANDLE_VALUE) {
            WriteFile(?handle, data, count, &written, null);
        }
    }

	alloc :: fn(size: int) -> ?* {
        return VirtualAlloc(null, size as uint, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
    }

	free :: fn(ptr: *) {
        VirtualFree(ptr, 0, MEM_RELEASE);
    }

    GENERIC_READ   :: 0x80000000 as u32;
    GENERIC_WRITE  :: 0x40000000 as u32;
    CREATE_NEW          :: 1 as u32;
    CREATE_ALWAYS       :: 2 as u32;
    OPEN_EXISTING       :: 3 as u32;
    OPEN_ALWAYS         :: 4 as u32;
    TRUNCATE_EXISTING   :: 5 as u32;
    FILE_ATTRIBUTE_READONLY             :: 0x00000001 as u32;
    FILE_ATTRIBUTE_HIDDEN               :: 0x00000002 as u32;
    FILE_ATTRIBUTE_SYSTEM               :: 0x00000004 as u32;
    FILE_ATTRIBUTE_DIRECTORY            :: 0x00000010 as u32;
    FILE_ATTRIBUTE_ARCHIVE              :: 0x00000020 as u32;
    FILE_ATTRIBUTE_DEVICE               :: 0x00000040 as u32;
    FILE_ATTRIBUTE_NORMAL               :: 0x00000080 as u32;
    FILE_ATTRIBUTE_TEMPORARY            :: 0x00000100 as u32;
    FILE_ATTRIBUTE_SPARSE_FILE          :: 0x00000200 as u32;
    FILE_ATTRIBUTE_REPARSE_POINT        :: 0x00000400 as u32;
    FILE_ATTRIBUTE_COMPRESSED           :: 0x00000800 as u32;
    FILE_ATTRIBUTE_OFFLINE              :: 0x00001000 as u32;
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED  :: 0x00002000 as u32;
    FILE_ATTRIBUTE_ENCRYPTED            :: 0x00004000 as u32;
    FILE_ATTRIBUTE_INTEGRITY_STREAM     :: 0x00008000 as u32;
    FILE_ATTRIBUTE_VIRTUAL              :: 0x00010000 as u32;
    FILE_ATTRIBUTE_NO_SCRUB_DATA        :: 0x00020000 as u32;
    FILE_ATTRIBUTE_EA                   :: 0x00040000 as u32;
    FILE_ATTRIBUTE_PINNED               :: 0x00080000 as u32;
    FILE_ATTRIBUTE_UNPINNED             :: 0x00100000 as u32;
    FILE_ATTRIBUTE_RECALL_ON_OPEN       :: 0x00040000 as u32;
    FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS :: 0x00400000 as u32;

	stdin :: fn() -> * {
        h := GetStdHandle(STD_INPUT_HANDLE);
        #assert h;
        return ?h;
	}

	stdout :: fn() -> * {
        h := GetStdHandle(STD_OUTPUT_HANDLE);
        #assert h;
        return ?h;
	}

	open :: fn(name: string) -> ?* {
        h := CreateFileA(name.data, GENERIC_READ | GENERIC_WRITE, 0, null, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, null);

        if h == null || h == INVALID_HANDLE_VALUE return null;
        return h;
    }

	write :: fn(file: *, buf: *u8, count: int) -> int {
        // @TODO: 64 bit file writes
        written: u32;
        if !WriteFile(file, buf, count as u32, &written, null) return 0;
        return written as int;
	}
    
	read :: fn(file: *, buf: *, size: int) -> int {
        read: u32;
        // @TODO: 64 bit file reads
        if !ReadFile(file, buf, size as u32, &read, null) return 0;
        return read as int;
        
    }

    close :: fn(handle: *) {
        CloseHandle(handle);
    }

	get_file_size :: fn(handle: *) -> int {
        out: LARGE_INTEGER;
        if GetFileSizeEx(handle, &out) == false return 0;
		return out.QuadPart as int;
	}

    struct CONSOLE_READCONSOLE_CONTROL {
        nLength: u32,
        nInitialChars: u32,
        dwCtrlWakeupMask: u32,
        dwControlKeyState: u32,
    }

    read_stdin_line :: fn(buffer: *, size: u32) -> u32 {
        handle := GetStdHandle(STD_INPUT_HANDLE);
        control := CONSOLE_READCONSOLE_CONTROL {
            dwCtrlWakeupMask = (1 << '\n'),
        };

        if handle == null {
            return 0;
        }

        read := 0 as u32;
        if ReadConsoleA(?handle, buffer, size, &read, &control) == false {
            return 0;
        }

        as_chars := buffer as *u8;

        // remove /r/n
        as_chars[read-2] = 0;
        return read - 2;
    }
}
#elif Unix {

#private
		handle_stdin  :: 0;
        handle_stdout :: 1;
        handle_stderr :: 2;

#public
#if x64 {
	SYS_read  	:: 0;
	SYS_write  	:: 1;
	SYS_open   	:: 2;
	SYS_close	:: 3;
	SYS_mmap   	:: 9;
	SYS_munmap 	:: 11;
	SYS_exit	:: 60;
	SYS_fstat	:: 5;
    SYS_clock_gettime :: 228;
	struct stat {
		pad0: [48]u8,
		st_size: int,
		pad1: [88]u8,
	}
}
#elif x86 {
	SYS_read      :: 3;
    SYS_write     :: 4;
    SYS_open      :: 5;
    SYS_close     :: 6;
    SYS_mmap      :: 90;
    SYS_munmap    :: 91;
    SYS_exit      :: 1;
    SYS_clock_gettime :: 228;
}
#elif arm32 {
    SYS_read    :: 3;
    SYS_write   :: 4;
    SYS_open    :: 5;
	SYS_close	:: 6;
    SYS_mmap    :: 90;
    SYS_munmap  :: 91;
    SYS_exit    :: 1;
    SYS_clock_gettime :: 263;
}
#elif arm64 {
    SYS_read    :: 63;
    SYS_write   :: 64;
    SYS_open    :: 56;
	SYS_close	:: 57;
    SYS_mmap    :: 222;
    SYS_munmap  :: 215;
    SYS_exit    :: 93;
    SYS_clock_gettime :: 113;
    SYS_fstat   :: 80;
}
    CLOCK_MONOTONIC :: 1;

    struct __old_kernel_stat {
        st_dev  : u16,
        st_ino  : u16,
        st_mode : u16,
        st_nlink: u16,
        st_uid  : u16,
        st_gid  : u16,
        st_rdev : u16,
        st_size : u64,
        st_atime: u64,
        st_mtime: u64,
        st_ctime: u64,
    }

    struct timespec {
        tv_sec:     int,       //* seconds */
        tv_nsec:    int,       //* nanoseconds */
    };

	syscall :: fn #foreign(number: int, args: ...) -> int;
	print :: fn(data: *u8, count: u32) {
		syscall(SYS_write, 1, data, count);
	}
	
	struct AllocCtx {
		size: int
	}

	PROT_READ  :: 0x1;
	PROT_WRITE :: 0x2;
	PROT_EXEC  :: 0x4;
	PROT_NONE  :: 0x0;

	MAP_SHARED		:: 0x00001;
	MAP_PRIVATE		:: 0x00002;
	MAP_ANONYMOUS	:: 0x00020;
	MAP_ANON		:: 0x00020;
	MAP_NORESERVE	:: 0x04000;

	O_RDONLY 	:: 0x0;
	O_WRONLY 	:: 0x1;
	O_RDWR 		:: 0x2;
	O_CREAT		:: 0x40;
	O_EXCL		:: 0x80;
	O_NOCTTY	:: 0x100;
	O_TRUNC		:: 0x200;
	O_APPEND 	:: 0x400;
	O_NONBLOCK	:: 0x800;

#if LIBC {
	exit :: fn #foreign(code: int);
	
	abort :: fn() {
		exit(1);
	}
}
#else {
	abort :: fn() {
		syscall(SYS_exit, 1);
	}
}

	alloc :: fn(size: int) -> ?* {
		myb_ctx := syscall(SYS_mmap,
		null,						// Address
		size + size_of AllocCtx,	// Size
		PROT_READ | PROT_WRITE,		// Prot
		MAP_PRIVATE | MAP_ANON | MAP_NORESERVE,	// Flags
		-1,							// FD
		0) as ?*AllocCtx;			// Offset
        FAILED :: -1;
        if myb_ctx == cast(?*void, FAILED) || myb_ctx == null {
            return null;
        }

        ctx := ?myb_ctx;
		
		ctx.size = size + size_of AllocCtx;
		return ctx + 1;
	}

	stdin :: fn() -> * {
		return handle_stdin as *void;
	}

	stdout :: fn() -> * {
		return handle_stdout as *void;
	}

    // @TODO: other platforms
#if x64 {
	get_file_size :: fn(fd: *) -> int {
		fstat := stat {};
		syscall(SYS_fstat, fd, &fstat);
		return fstat.st_size;
	}
}
#elif arm64 {
    get_file_size :: fn(fd: *) -> int {
        fstat := __old_kernel_stat {};
        syscall(SYS_fstat, fd, &fstat);
        return cast(int, fstat.st_size);
    }
}

	open :: fn(name: string) -> ?* {
		fd := syscall(SYS_open, name.data, O_RDWR | O_APPEND);
		if fd == -1 return null;
		return fd as *void;
	}

	write :: fn(fd: *, buf: *u8, count: int) -> int {
        written := syscall(SYS_write, fd, buf, count);
        if written == -1 return 0;
        return written;
	}

	close :: fn(fd: *) {
		syscall(SYS_close, fd);
	}

	free :: fn(ptr: *) {
		ctx := cast(*AllocCtx, ptr) - 1;
		syscall(SYS_munmap, ctx, ctx.size);
	}

    read_stdin_line :: fn(buffer: *, size: u32) -> u32 {
		buf := cast(*u8, buffer);
		count := cast(u32, 0);
		for count < size {
			c := cast(u8, 0);
			syscall(SYS_read, stdin(), &c, 1);
			if c == '\n' {
				break;
			}
			buf[count] = c;
			count += 1;
		}
		return count;
	}

	read :: fn(fd: *, buf: *, size: int) -> int {
		return syscall(SYS_read, fd, buf, size);
	}
}

