; ModuleID = 'main'
source_filename = "pass_complex.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!BigStruct" = type { [100 x i32] }
%"__main!SmallStruct" = type { i16, i16 }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"__main!make_bs"(ptr %0, i32 %1) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !10, metadata !DIExpression()), !dbg !11
  %2 = alloca %"__main!BigStruct", align 8, !dbg !12
  %3 = alloca [100 x i32], align 4, !dbg !12
  call void @llvm.memset.p0.i64(ptr align 4 %3, i8 0, i64 400, i1 false), !dbg !12
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 0, !dbg !12
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 400, i1 false), !dbg !12
  call void @llvm.dbg.declare(metadata ptr %2, metadata !13, metadata !DIExpression()), !dbg !12
  %5 = alloca i64, align 8, !dbg !14
  call void @llvm.dbg.declare(metadata ptr %5, metadata !15, metadata !DIExpression()), !dbg !14
  store i64 0, ptr %5, align 8, !dbg !14
  br label %block_1, !dbg !14

block_1:                                          ; preds = %block_3, %block_0
  %6 = load i64, ptr %5, align 8, !dbg !14
  %7 = icmp slt i64 %6, 100, !dbg !14
  br i1 %7, label %block_2, label %block_4, !dbg !14

block_2:                                          ; preds = %block_1
  %8 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 0, !dbg !17
  %9 = load i64, ptr %5, align 8, !dbg !17
  %10 = getelementptr [100 x i32], ptr %8, i64 0, i64 %9, !dbg !17
  store i32 %1, ptr %10, align 4, !dbg !17
  br label %block_3, !dbg !17

block_3:                                          ; preds = %block_2
  %11 = load i64, ptr %5, align 8, !dbg !17
  %12 = add i64 %11, 1, !dbg !17
  store i64 %12, ptr %5, align 8, !dbg !17
  %13 = load i64, ptr %5, align 8, !dbg !17
  br label %block_1, !dbg !17

block_4:                                          ; preds = %block_1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false), !dbg !18
  ret void, !dbg !18
}

define void @"__main!make_ss"(ptr %0, i32 %1) !dbg !19 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !23, metadata !DIExpression()), !dbg !24
  %2 = alloca %"__main!SmallStruct", align 8, !dbg !25
  %3 = trunc i32 %1 to i16, !dbg !25
  %4 = getelementptr inbounds %"__main!SmallStruct", ptr %2, i32 0, i32 0, !dbg !25
  store i16 %3, ptr %4, align 2, !dbg !25
  %5 = trunc i32 %1 to i16, !dbg !25
  %6 = getelementptr inbounds %"__main!SmallStruct", ptr %2, i32 0, i32 1, !dbg !25
  store i16 %5, ptr %6, align 2, !dbg !25
  call void @llvm.dbg.declare(metadata ptr %2, metadata !26, metadata !DIExpression()), !dbg !25
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 2 %2, i64 4, i1 false), !dbg !27
  ret void, !dbg !27
}

define void @"__main!make_array"(ptr %0, i32 %1) !dbg !28 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !34, metadata !DIExpression()), !dbg !35
  %2 = alloca [100 x i32], align 4, !dbg !36
  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 400, i1 false), !dbg !36
  call void @llvm.dbg.declare(metadata ptr %2, metadata !37, metadata !DIExpression()), !dbg !36
  %3 = alloca i64, align 8, !dbg !38
  call void @llvm.dbg.declare(metadata ptr %3, metadata !39, metadata !DIExpression()), !dbg !38
  store i64 0, ptr %3, align 8, !dbg !38
  br label %block_1, !dbg !38

block_1:                                          ; preds = %block_3, %block_0
  %4 = load i64, ptr %3, align 8, !dbg !38
  %5 = icmp slt i64 %4, 50, !dbg !38
  br i1 %5, label %block_2, label %block_4, !dbg !38

block_2:                                          ; preds = %block_1
  %6 = load i64, ptr %3, align 8, !dbg !40
  %7 = getelementptr [100 x i32], ptr %2, i64 0, i64 %6, !dbg !40
  store i32 %1, ptr %7, align 4, !dbg !40
  br label %block_3, !dbg !40

block_3:                                          ; preds = %block_2
  %8 = load i64, ptr %3, align 8, !dbg !40
  %9 = add i64 %8, 1, !dbg !40
  store i64 %9, ptr %3, align 8, !dbg !40
  %10 = load i64, ptr %3, align 8, !dbg !40
  br label %block_1, !dbg !40

block_4:                                          ; preds = %block_1
  %11 = alloca i64, align 8, !dbg !41
  call void @llvm.dbg.declare(metadata ptr %11, metadata !42, metadata !DIExpression()), !dbg !41
  store i64 50, ptr %11, align 8, !dbg !41
  br label %block_5, !dbg !41

block_5:                                          ; preds = %block_7, %block_4
  %12 = load i64, ptr %11, align 8, !dbg !41
  %13 = icmp slt i64 %12, 100, !dbg !41
  br i1 %13, label %block_6, label %block_8, !dbg !41

block_6:                                          ; preds = %block_5
  %14 = load i64, ptr %11, align 8, !dbg !43
  %15 = getelementptr [100 x i32], ptr %2, i64 0, i64 %14, !dbg !43
  %16 = mul i32 %1, 2, !dbg !43
  store i32 %16, ptr %15, align 4, !dbg !43
  br label %block_7, !dbg !43

block_7:                                          ; preds = %block_6
  %17 = load i64, ptr %11, align 8, !dbg !43
  %18 = add i64 %17, 1, !dbg !43
  store i64 %18, ptr %11, align 8, !dbg !43
  %19 = load i64, ptr %11, align 8, !dbg !43
  br label %block_5, !dbg !43

block_8:                                          ; preds = %block_5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false), !dbg !44
  ret void, !dbg !44
}

define ptr @"__main!get_fn"() !dbg !45 {
block_0:
  ret ptr @__lambda_pass_complex.rcp39, !dbg !45
}

define i32 @"__main!main"() !dbg !50 {
block_0:
  %0 = alloca %"__main!BigStruct", align 8, !dbg !53
  call void @"__main!make_bs"(ptr %0, i32 100), !dbg !53
  call void @llvm.dbg.declare(metadata ptr %0, metadata !54, metadata !DIExpression()), !dbg !53
  %1 = alloca %"__main!SmallStruct", align 8, !dbg !55
  call void @"__main!make_ss"(ptr %1, i32 25), !dbg !55
  call void @llvm.dbg.declare(metadata ptr %1, metadata !56, metadata !DIExpression()), !dbg !55
  %2 = alloca [100 x i32], align 4, !dbg !57
  call void @"__main!make_array"(ptr %2, i32 25), !dbg !57
  call void @llvm.dbg.declare(metadata ptr %2, metadata !58, metadata !DIExpression()), !dbg !57
  %3 = call ptr @"__main!get_fn"(), !dbg !59
  %4 = alloca %"__main!BigStruct", align 8, !dbg !59
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %0, i64 400, i1 false), !dbg !59
  %5 = load i32, ptr %1, align 4, !dbg !59
  %6 = alloca [100 x i32], align 4, !dbg !59
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %2, i64 400, i1 false), !dbg !59
  %7 = call i32 %3(ptr %4, i32 %5, ptr %6), !dbg !59
  ret i32 %7, !dbg !59
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

define private i32 @__lambda_pass_complex.rcp39(ptr %0, i32 %1, ptr %2) !dbg !60 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !61, metadata !DIExpression()), !dbg !62
  %3 = alloca %"__main!SmallStruct", align 8, !dbg !62
  store i32 %1, ptr %3, align 4, !dbg !62
  call void @llvm.dbg.value(metadata ptr %3, metadata !63, metadata !DIExpression()), !dbg !62
  call void @llvm.dbg.value(metadata ptr %2, metadata !64, metadata !DIExpression()), !dbg !62
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %0, i32 0, i32 0, !dbg !65
  %5 = getelementptr [100 x i32], ptr %4, i64 0, i64 50, !dbg !65
  %6 = load i32, ptr %5, align 4, !dbg !65
  %7 = getelementptr inbounds %"__main!SmallStruct", ptr %3, i32 0, i32 1, !dbg !65
  %8 = load i16, ptr %7, align 2, !dbg !65
  %9 = sext i16 %8 to i32, !dbg !65
  %10 = sub i32 %6, %9, !dbg !65
  %11 = getelementptr [100 x i32], ptr %2, i64 0, i64 0, !dbg !65
  %12 = load i32, ptr %11, align 4, !dbg !65
  %13 = sub i32 %10, %12, !dbg !65
  %14 = getelementptr [100 x i32], ptr %2, i64 0, i64 50, !dbg !65
  %15 = load i32, ptr %14, align 4, !dbg !65
  %16 = sub i32 %13, %15, !dbg !65
  ret i32 %16, !dbg !65
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "pass_complex.rcp", directory: "D:\\Programming\\ReComp\\tests\\pass_complex")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "make_bs", linkageName: "__main!make_bs", scope: !1, file: !1, line: 13, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !9}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!BigStruct", scope: !1, file: !1, flags: DIFlagFwdDecl, elements: !8)
!8 = !{}
!9 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!10 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 13, type: !9)
!11 = !DILocation(line: 13, scope: !4)
!12 = !DILocation(line: 14, scope: !4)
!13 = !DILocalVariable(name: "res", scope: !4, file: !1, line: 14, type: !7)
!14 = !DILocation(line: 15, scope: !4)
!15 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 15, type: !16)
!16 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!17 = !DILocation(line: 16, scope: !4)
!18 = !DILocation(line: 19, scope: !4)
!19 = distinct !DISubprogram(name: "make_ss", linkageName: "__main!make_ss", scope: !1, file: !1, line: 22, type: !20, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !9}
!22 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!SmallStruct", scope: !1, file: !1, flags: DIFlagFwdDecl, elements: !8)
!23 = !DILocalVariable(name: "num", scope: !19, file: !1, line: 22, type: !9)
!24 = !DILocation(line: 22, scope: !19)
!25 = !DILocation(line: 23, scope: !19)
!26 = !DILocalVariable(name: "res", scope: !19, file: !1, line: 23, type: !22)
!27 = !DILocation(line: 24, scope: !19)
!28 = distinct !DISubprogram(name: "make_array", linkageName: "__main!make_array", scope: !1, file: !1, line: 27, type: !29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!29 = !DISubroutineType(types: !30)
!30 = !{!31, !9}
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 3200, align: 32, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 100, lowerBound: 0)
!34 = !DILocalVariable(name: "num", scope: !28, file: !1, line: 27, type: !9)
!35 = !DILocation(line: 27, scope: !28)
!36 = !DILocation(line: 28, scope: !28)
!37 = !DILocalVariable(name: "arr", scope: !28, file: !1, line: 28, type: !31)
!38 = !DILocation(line: 29, scope: !28)
!39 = !DILocalVariable(name: "i", scope: !28, file: !1, line: 29, type: !16)
!40 = !DILocation(line: 30, scope: !28)
!41 = !DILocation(line: 32, scope: !28)
!42 = !DILocalVariable(name: "i", scope: !28, file: !1, line: 32, type: !16)
!43 = !DILocation(line: 33, scope: !28)
!44 = !DILocation(line: 35, scope: !28)
!45 = distinct !DISubprogram(name: "get_fn", linkageName: "__main!get_fn", scope: !1, file: !1, line: 38, type: !46, spFlags: DISPFlagDefinition, unit: !0)
!46 = !DISubroutineType(types: !47)
!47 = !{!48}
!48 = !DISubroutineType(types: !49)
!49 = !{!9, !7, !22, !31}
!50 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 44, type: !51, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!51 = !DISubroutineType(types: !52)
!52 = !{!9}
!53 = !DILocation(line: 45, scope: !50)
!54 = !DILocalVariable(name: "foo1", scope: !50, file: !1, line: 45, type: !7)
!55 = !DILocation(line: 46, scope: !50)
!56 = !DILocalVariable(name: "foo2", scope: !50, file: !1, line: 46, type: !22)
!57 = !DILocation(line: 47, scope: !50)
!58 = !DILocalVariable(name: "foo3", scope: !50, file: !1, line: 47, type: !31)
!59 = !DILocation(line: 49, scope: !50)
!60 = distinct !DISubprogram(name: "__lambda_pass_complex.rcp39", linkageName: "__main!__lambda_pass_complex.rcp39", scope: !1, file: !1, line: 39, type: !48, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!61 = !DILocalVariable(name: "foo1", scope: !60, file: !1, line: 39, type: !7)
!62 = !DILocation(line: 39, scope: !60)
!63 = !DILocalVariable(name: "foo2", arg: 1, scope: !60, file: !1, line: 39, type: !22)
!64 = !DILocalVariable(name: "foo3", arg: 2, scope: !60, file: !1, line: 39, type: !31)
!65 = !DILocation(line: 40, scope: !60)
