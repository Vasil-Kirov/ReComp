; ModuleID = 'pass'
source_filename = "pass"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

%"pass!Foo" = type { [1024 x i8] }

define i32 @"pass!give_struct"(ptr %0) {
block_0:
  %1 = getelementptr inbounds %"pass!Foo", ptr %0, i32 0, i32 0
  %2 = getelementptr [1024 x i8], ptr %1, i64 0, i64 5
  %3 = load i8, ptr %2, align 1
  %4 = sext i8 %3 to i32
  ret i32 %4
}

define i32 @main() {
block_0:
  %0 = alloca %"pass!Foo", align 8
  %1 = alloca [1024 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 0, i64 1024, i1 false)
  %2 = getelementptr inbounds %"pass!Foo", ptr %0, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr align 1 %1, i64 1024, i1 false)
  %3 = getelementptr inbounds %"pass!Foo", ptr %0, i32 0, i32 0
  %4 = getelementptr [1024 x i8], ptr %3, i64 0, i64 5
  store i8 32, ptr %4, align 1
  %5 = alloca %"pass!Foo", align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %5, ptr align 1 %0, i64 1024, i1 false)
  %6 = call i32 @"pass!give_struct"(ptr %5)
  %7 = sub i32 %6, 32
  ret i32 %7
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
