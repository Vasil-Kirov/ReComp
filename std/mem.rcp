mem

struct Allocator {
    alloc: fn(size: int, this: *Allocator) -> ?*,
    free:  fn(ptr: *, this: *Allocator),
    data: *,
}

//__raw_slice :: fn #intr (T: type, data: *T, size: int) -> []T;

make_slice :: fn (allocator: *Allocator, T: type, size: int) -> []T {
    res := []T{};
    res.data  = allocator.alloc(size, allocator);
    res.count = size;
    return res;
}

memcpy :: fn #foreign(dst: *, src: *, size: int) -> *;

