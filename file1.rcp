module main

_ :: #import io;
_ :: #import base;


print_number :: fn(x: FileLocation) {
	println("%", x);
}

struct Methods {
	foo: *fn(x := #file_location),
}

main :: fn() -> i32 {

	m := Methods {
		foo = print_number,
	};

	m.foo();
	m.foo();
	m.foo();


	return 0;
}

#run main();

malloc :: fn(size: int) -> ?* #foreign;

struct Foo
{
	x: int,
	y: int,
}

//#run main();


//	foo = .{"asd"};
//
//	malloc_alloc := libc.make_malloc_allocator(true);
//	lexer := make_lexer(&malloc_alloc);
//	add_compiler_keywords(&lexer);
//	tokens := lex_string(&lexer, "main :: fn() -> i32;", &malloc_alloc, .{"text", 1, 1});
//	for token in tokens {
//		println("token: %", token);
//	}
