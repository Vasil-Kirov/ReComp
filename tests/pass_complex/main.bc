; ModuleID = 'main'
source_filename = "pass_complex.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%"__main!BigStruct" = type { [100 x i32] }
%"__main!SmallStruct" = type { i16, i16 }

define void @"__main!__GlobalInitializerFunction"() {
block_0:
  ret void
}

define void @"__main!make_bs"(ptr %0, i32 %1) !dbg !4 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !15, metadata !DIExpression()), !dbg !16
  %2 = alloca %"__main!BigStruct", align 8, !dbg !17
  %3 = alloca [100 x i32], align 4, !dbg !17
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 0, !dbg !17
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %4, ptr align 4 %3, i64 400, i1 false), !dbg !17
  call void @llvm.dbg.declare(metadata ptr %2, metadata !18, metadata !DIExpression()), !dbg !17
  %5 = alloca i64, align 8, !dbg !19
  store i64 0, ptr %5, align 8, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %5, metadata !20, metadata !DIExpression()), !dbg !19
  br label %block_1, !dbg !19

block_1:                                          ; preds = %block_3, %block_0
  %6 = load i64, ptr %5, align 8, !dbg !19
  %7 = icmp slt i64 %6, 100, !dbg !19
  br i1 %7, label %block_2, label %block_4, !dbg !19

block_2:                                          ; preds = %block_1
  %8 = getelementptr inbounds %"__main!BigStruct", ptr %2, i32 0, i32 0, !dbg !22
  %9 = load i64, ptr %5, align 8, !dbg !22
  %10 = getelementptr [100 x i32], ptr %8, i64 0, i64 %9, !dbg !22
  store i32 %1, ptr %10, align 4, !dbg !22
  br label %block_3, !dbg !22

block_3:                                          ; preds = %block_2
  %11 = load i64, ptr %5, align 8, !dbg !22
  %12 = add i64 %11, 1, !dbg !22
  store i64 %12, ptr %5, align 8, !dbg !22
  %13 = load i64, ptr %5, align 8, !dbg !22
  br label %block_1, !dbg !22

block_4:                                          ; preds = %block_1
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false), !dbg !23
  ret void, !dbg !23
}

define i32 @"__main!make_ss"(i32 %0) !dbg !24 {
block_0:
  call void @llvm.dbg.value(metadata i32 %0, metadata !32, metadata !DIExpression()), !dbg !33
  %1 = alloca %"__main!SmallStruct", align 8, !dbg !34
  %2 = trunc i32 %0 to i16, !dbg !34
  %3 = getelementptr inbounds %"__main!SmallStruct", ptr %1, i32 0, i32 0, !dbg !34
  store i16 %2, ptr %3, align 2, !dbg !34
  %4 = trunc i32 %0 to i16, !dbg !34
  %5 = getelementptr inbounds %"__main!SmallStruct", ptr %1, i32 0, i32 1, !dbg !34
  store i16 %4, ptr %5, align 2, !dbg !34
  call void @llvm.dbg.declare(metadata ptr %1, metadata !35, metadata !DIExpression()), !dbg !34
  %6 = load i32, ptr %1, align 4, !dbg !36
  ret i32 %6, !dbg !36
}

define void @"__main!make_array"(ptr %0, i32 %1) !dbg !37 {
block_0:
  call void @llvm.dbg.value(metadata i32 %1, metadata !40, metadata !DIExpression()), !dbg !41
  %2 = alloca [100 x i32], align 4, !dbg !42
  call void @llvm.dbg.declare(metadata ptr %2, metadata !43, metadata !DIExpression()), !dbg !42
  %3 = alloca i64, align 8, !dbg !44
  store i64 0, ptr %3, align 8, !dbg !44
  call void @llvm.dbg.declare(metadata ptr %3, metadata !45, metadata !DIExpression()), !dbg !44
  br label %block_1, !dbg !44

block_1:                                          ; preds = %block_3, %block_0
  %4 = load i64, ptr %3, align 8, !dbg !44
  %5 = icmp slt i64 %4, 50, !dbg !44
  br i1 %5, label %block_2, label %block_4, !dbg !44

block_2:                                          ; preds = %block_1
  %6 = load i64, ptr %3, align 8, !dbg !46
  %7 = getelementptr [100 x i32], ptr %2, i64 0, i64 %6, !dbg !46
  store i32 %1, ptr %7, align 4, !dbg !46
  br label %block_3, !dbg !46

block_3:                                          ; preds = %block_2
  %8 = load i64, ptr %3, align 8, !dbg !46
  %9 = add i64 %8, 1, !dbg !46
  store i64 %9, ptr %3, align 8, !dbg !46
  %10 = load i64, ptr %3, align 8, !dbg !46
  br label %block_1, !dbg !46

block_4:                                          ; preds = %block_1
  %11 = alloca i64, align 8, !dbg !47
  store i64 50, ptr %11, align 8, !dbg !47
  call void @llvm.dbg.declare(metadata ptr %11, metadata !48, metadata !DIExpression()), !dbg !47
  br label %block_5, !dbg !47

block_5:                                          ; preds = %block_7, %block_4
  %12 = load i64, ptr %11, align 8, !dbg !47
  %13 = icmp slt i64 %12, 100, !dbg !47
  br i1 %13, label %block_6, label %block_8, !dbg !47

block_6:                                          ; preds = %block_5
  %14 = load i64, ptr %11, align 8, !dbg !49
  %15 = getelementptr [100 x i32], ptr %2, i64 0, i64 %14, !dbg !49
  %16 = mul i32 %1, 2, !dbg !49
  store i32 %16, ptr %15, align 4, !dbg !49
  br label %block_7, !dbg !49

block_7:                                          ; preds = %block_6
  %17 = load i64, ptr %11, align 8, !dbg !49
  %18 = add i64 %17, 1, !dbg !49
  store i64 %18, ptr %11, align 8, !dbg !49
  %19 = load i64, ptr %11, align 8, !dbg !49
  br label %block_5, !dbg !49

block_8:                                          ; preds = %block_5
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 4 %2, i64 400, i1 false), !dbg !50
  ret void, !dbg !50
}

define ptr @"__main!get_fn"() !dbg !51 {
block_0:
  ret ptr @__lambda_pass_complex.rcp39, !dbg !55
}

define i32 @"__main!main"() !dbg !56 {
block_0:
  %0 = alloca %"__main!BigStruct", align 8, !dbg !59
  call void @"__main!make_bs"(ptr %0, i32 100), !dbg !59
  call void @llvm.dbg.declare(metadata ptr %0, metadata !60, metadata !DIExpression()), !dbg !59
  %1 = call i32 @"__main!make_ss"(i32 25), !dbg !61
  %2 = alloca %"__main!SmallStruct", align 8, !dbg !61
  store i32 %1, ptr %2, align 4, !dbg !61
  call void @llvm.dbg.declare(metadata ptr %2, metadata !62, metadata !DIExpression()), !dbg !61
  %3 = alloca [100 x i32], align 4, !dbg !63
  call void @"__main!make_array"(ptr %3, i32 25), !dbg !63
  call void @llvm.dbg.declare(metadata ptr %3, metadata !64, metadata !DIExpression()), !dbg !63
  %4 = call ptr @"__main!get_fn"(), !dbg !65
  %5 = alloca %"__main!BigStruct", align 8, !dbg !65
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %0, i64 400, i1 false), !dbg !65
  %6 = load i32, ptr %2, align 4, !dbg !65
  %7 = alloca [100 x i32], align 4, !dbg !65
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %7, ptr align 4 %3, i64 400, i1 false), !dbg !65
  %8 = call i32 %4(ptr %5, i32 %6, ptr %7), !dbg !65
  ret i32 %8, !dbg !65
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

define private i32 @__lambda_pass_complex.rcp39(ptr %0, i32 %1, ptr %2) !dbg !66 {
block_0:
  call void @llvm.dbg.value(metadata ptr %0, metadata !69, metadata !DIExpression()), !dbg !70
  %3 = alloca %"__main!SmallStruct", align 8, !dbg !70
  store i32 %1, ptr %3, align 4, !dbg !70
  call void @llvm.dbg.value(metadata ptr %3, metadata !71, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.value(metadata ptr %2, metadata !72, metadata !DIExpression()), !dbg !70
  %4 = getelementptr inbounds %"__main!BigStruct", ptr %0, i32 0, i32 0, !dbg !73
  %5 = getelementptr [100 x i32], ptr %4, i64 0, i64 50, !dbg !73
  %6 = load i32, ptr %5, align 4, !dbg !73
  %7 = getelementptr inbounds %"__main!SmallStruct", ptr %3, i32 0, i32 1, !dbg !73
  %8 = load i16, ptr %7, align 2, !dbg !73
  %9 = sext i16 %8 to i32, !dbg !73
  %10 = sub i32 %6, %9, !dbg !73
  %11 = getelementptr [100 x i32], ptr %2, i64 0, i64 0, !dbg !73
  %12 = load i32, ptr %11, align 4, !dbg !73
  %13 = sub i32 %10, %12, !dbg !73
  %14 = getelementptr [100 x i32], ptr %2, i64 0, i64 50, !dbg !73
  %15 = load i32, ptr %14, align 4, !dbg !73
  %16 = sub i32 %13, %15, !dbg !73
  ret i32 %16, !dbg !73
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "pass_complex.rcp", directory: "D:\\Programming\\ReComp\\tests\\pass_complex")
!2 = !{i32 2, !"CodeView", i32 1}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "make_bs", linkageName: "__main!make_bs", scope: !1, file: !1, line: 13, type: !5, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !11}
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!BigStruct", scope: !1, file: !1, size: 3200, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1, file: !1, baseType: !10, size: 3200, align: 32)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 3200, align: 32, elements: !12)
!11 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!12 = !{!13}
!13 = !DISubrange(count: 100, lowerBound: 0)
!14 = !{}
!15 = !DILocalVariable(name: "num", scope: !4, file: !1, line: 13, type: !11)
!16 = !DILocation(line: 13, scope: !4)
!17 = !DILocation(line: 14, scope: !4)
!18 = !DILocalVariable(name: "res", scope: !4, file: !1, line: 14, type: !7)
!19 = !DILocation(line: 15, scope: !4)
!20 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 15, type: !21)
!21 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
!22 = !DILocation(line: 16, scope: !4)
!23 = !DILocation(line: 19, scope: !4)
!24 = distinct !DISubprogram(name: "make_ss", linkageName: "__main!make_ss", scope: !1, file: !1, line: 22, type: !25, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!25 = !DISubroutineType(types: !26)
!26 = !{!27, !11}
!27 = !DICompositeType(tag: DW_TAG_structure_type, name: "__main!SmallStruct", scope: !1, file: !1, size: 32, elements: !28)
!28 = !{!29, !31}
!29 = !DIDerivedType(tag: DW_TAG_member, name: "num1", scope: !1, file: !1, baseType: !30, size: 16, align: 16)
!30 = !DIBasicType(name: "i16", size: 16, encoding: DW_ATE_signed)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "num2", scope: !1, file: !1, baseType: !30, size: 16, align: 16, offset: 16)
!32 = !DILocalVariable(name: "num", scope: !24, file: !1, line: 22, type: !11)
!33 = !DILocation(line: 22, scope: !24)
!34 = !DILocation(line: 23, scope: !24)
!35 = !DILocalVariable(name: "res", scope: !24, file: !1, line: 23, type: !27)
!36 = !DILocation(line: 24, scope: !24)
!37 = distinct !DISubprogram(name: "make_array", linkageName: "__main!make_array", scope: !1, file: !1, line: 27, type: !38, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!38 = !DISubroutineType(types: !39)
!39 = !{!10, !11}
!40 = !DILocalVariable(name: "num", scope: !37, file: !1, line: 27, type: !11)
!41 = !DILocation(line: 27, scope: !37)
!42 = !DILocation(line: 28, scope: !37)
!43 = !DILocalVariable(name: "arr", scope: !37, file: !1, line: 28, type: !10)
!44 = !DILocation(line: 29, scope: !37)
!45 = !DILocalVariable(name: "i", scope: !37, file: !1, line: 29, type: !21)
!46 = !DILocation(line: 30, scope: !37)
!47 = !DILocation(line: 32, scope: !37)
!48 = !DILocalVariable(name: "i", scope: !37, file: !1, line: 32, type: !21)
!49 = !DILocation(line: 33, scope: !37)
!50 = !DILocation(line: 35, scope: !37)
!51 = distinct !DISubprogram(name: "get_fn", linkageName: "__main!get_fn", scope: !1, file: !1, line: 38, type: !52, spFlags: DISPFlagDefinition, unit: !0)
!52 = !DISubroutineType(types: !53)
!53 = !{!54}
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!55 = !DILocation(line: 39, scope: !51)
!56 = distinct !DISubprogram(name: "main", linkageName: "__main!main", scope: !1, file: !1, line: 44, type: !57, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!57 = !DISubroutineType(types: !58)
!58 = !{!11}
!59 = !DILocation(line: 45, scope: !56)
!60 = !DILocalVariable(name: "foo1", scope: !56, file: !1, line: 45, type: !7)
!61 = !DILocation(line: 46, scope: !56)
!62 = !DILocalVariable(name: "foo2", scope: !56, file: !1, line: 46, type: !27)
!63 = !DILocation(line: 47, scope: !56)
!64 = !DILocalVariable(name: "foo3", scope: !56, file: !1, line: 47, type: !10)
!65 = !DILocation(line: 49, scope: !56)
!66 = distinct !DISubprogram(name: "__lambda_pass_complex.rcp39", linkageName: "__main!__lambda_pass_complex.rcp39", scope: !1, file: !1, line: 39, type: !67, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
!67 = !DISubroutineType(types: !68)
!68 = !{!11, !7, !27, !10}
!69 = !DILocalVariable(name: "foo1", scope: !66, file: !1, line: 39, type: !7)
!70 = !DILocation(line: 39, scope: !66)
!71 = !DILocalVariable(name: "foo2", arg: 1, scope: !66, file: !1, line: 39, type: !27)
!72 = !DILocalVariable(name: "foo3", arg: 2, scope: !66, file: !1, line: 39, type: !10)
!73 = !DILocation(line: 40, scope: !66)
