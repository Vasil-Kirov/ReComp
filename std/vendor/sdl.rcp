module sdl;

INIT_AUDIO    :u32 : 0x00000010;
INIT_VIDEO    :u32 : 0x00000020;
INIT_JOYSTICK :u32 : 0x00000200;
INIT_HAPTIC   :u32 : 0x00001000;
INIT_GAMEPAD  :u32 : 0x00002000;
INIT_EVENTS   :u32 : 0x00004000;
INIT_SENSOR   :u32 : 0x00008000;
INIT_CAMERA   :u32 : 0x00010000;


WINDOW_FULLSCREEN           :u64 : 0x0000000000000001;   // < window is in fullscreen mode */
WINDOW_OPENGL               :u64 : 0x0000000000000002;   // < window usable with OpenGL context */
WINDOW_OCCLUDED             :u64 : 0x0000000000000004;   // < window is occluded */
WINDOW_HIDDEN               :u64 : 0x0000000000000008;   // < window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; SDL_ShowWindow() is required for it to become visible */
WINDOW_BORDERLESS           :u64 : 0x0000000000000010;   // < no window decoration */
WINDOW_RESIZABLE            :u64 : 0x0000000000000020;   // < window can be resized */
WINDOW_MINIMIZED            :u64 : 0x0000000000000040;   // < window is minimized */
WINDOW_MAXIMIZED            :u64 : 0x0000000000000080;   // < window is maximized */
WINDOW_MOUSE_GRABBED        :u64 : 0x0000000000000100;   // < window has grabbed mouse input */
WINDOW_INPUT_FOCUS          :u64 : 0x0000000000000200;   // < window has input focus */
WINDOW_MOUSE_FOCUS          :u64 : 0x0000000000000400;   // < window has mouse focus */
WINDOW_EXTERNAL             :u64 : 0x0000000000000800;   // < window not created by SDL */
WINDOW_MODAL                :u64 : 0x0000000000001000;   // < window is modal */
WINDOW_HIGH_PIXEL_DENSITY   :u64 : 0x0000000000002000;   // < window uses high pixel density back buffer if possible */
WINDOW_MOUSE_CAPTURE        :u64 : 0x0000000000004000;   // < window has mouse captured (unrelated to MOUSE_GRABBED) */
WINDOW_MOUSE_RELATIVE_MODE  :u64 : 0x0000000000008000;   // < window has relative mode enabled */
WINDOW_ALWAYS_ON_TOP        :u64 : 0x0000000000010000;   // < window should always be above others */
WINDOW_UTILITY              :u64 : 0x0000000000020000;   // < window should be treated as a utility window, not showing in the task bar and window list */
WINDOW_TOOLTIP              :u64 : 0x0000000000040000;   // < window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window */
WINDOW_POPUP_MENU           :u64 : 0x0000000000080000;   // < window should be treated as a popup menu, requires a parent window */
WINDOW_KEYBOARD_GRABBED     :u64 : 0x0000000000100000;   // < window has grabbed keyboard input */
WINDOW_VULKAN               :u64 : 0x0000000010000000;   // < window usable for Vulkan surface */
WINDOW_METAL                :u64 : 0x0000000020000000;   // < window usable for Metal view */
WINDOW_TRANSPARENT          :u64 : 0x0000000040000000;   // < window with transparent buffer */
WINDOW_NOT_FOCUSABLE        :u64 : 0x0000000080000000;   // < window should not be focusable */

Init :: fn #link="SDL_Init"(flags: u32) -> bool;
SetAppMetadata :: fn #link="SDL_SetAppMetadata"(appname: *u8, appversion: *u8, appidentifier: *u8) -> bool;
CreateWindow :: fn #link="SDL_CreateWindow"(title: *u8, w: i32, h: i32, flags: u64) -> ?*Window;
CreateWindowAndRenderer :: fn #link="SDL_CreateWindowAndRenderer"(
    title: *u8, width: i32, height: i32, window_flags: u64,
    window: *?*Window, renderer: *?*Renderer
) -> bool;
GL_CreateContext :: fn #link="SDL_GL_CreateContext"(window: *Window) -> ?*GLContext;
GL_SwapWindow :: fn #link="SDL_GL_SwapWindow"(window: *Window) -> bool;
GL_SetAttribute :: fn #link="SDL_GL_SetAttribute"(attr: GLattr, value: i32) -> bool;
PollEvent :: fn #link="SDL_PollEvent"(event: *Event) -> bool;
GetError :: fn #link="SDL_GetError"() -> *u8;
GetTicks :: fn #link="SDL_GetTicks"() -> u64;
GL_SetSwapInterval :: fn #link="SDL_GL_SetSwapInterval"(interval: i32) -> bool;
GetKeyboardState :: fn #link="SDL_GetKeyboardState"(numkeys: ?*i32) -> *bool;
GetMouseState :: fn #link="SDL_GetMouseState"(x: *f32, y: *f32) -> u32;
PumpEvents :: fn #link="SDL_PumpEvents"();

BUTTON_LEFT     :u32 : 1;
BUTTON_MIDDLE   :u32 : 2;
BUTTON_RIGHT    :u32 : 3;
BUTTON_X1       :u32 : 4;
BUTTON_X2       :u32 : 5;

BUTTON_MASK		:: fn (X: u32) -> u32 { return (1 << ((X)-1)); }
BUTTON_LMASK	:: fn () -> u32 { return BUTTON_MASK(BUTTON_LEFT); }
BUTTON_MMASK	:: fn () -> u32 { return BUTTON_MASK(BUTTON_MIDDLE); }
BUTTON_RMASK	:: fn () -> u32 { return BUTTON_MASK(BUTTON_RIGHT); }
BUTTON_X1MASK	:: fn () -> u32 { return BUTTON_MASK(BUTTON_X1); }
BUTTON_X2MASK	:: fn () -> u32 { return BUTTON_MASK(BUTTON_X2); }

struct Window {}
struct GLContext {}
struct GPUDevice {}
struct Renderer {}
struct IOStream {}
struct GPUTexture {}

struct Texture {};

struct Surface {
    flags: u32,             /**< The flags of the surface, read-only */
    pixel_format: PixelFormat, /**< The format of the surface, read-only */
    w: i32,                 /**< The width of the surface, read-only. */
    h: i32,                 /**< The height of the surface, read-only. */
    pitch: i32,             /**< The distance in bytes between rows of pixels, read-only */
    pixels: ?*void,         /**< A pointer to the pixels of the surface, the pixels are writeable if non-NULL */

    ref_count: i32,         /**< Application reference count, used when freeing surface */

    reserved: ?*void,       /**< Reserved for internal use */
}

struct FPoint {
	x: f32,
	y: f32,
}

struct FRect {
	x: f32,
	y: f32,
	w: f32,
	h: f32,
}

struct Rect {
	x: i32,
	y: i32,
	w: i32,
	h: i32,
}

struct Color {
	r: u8,
	g: u8,
	b: u8,
	a: u8,
}

struct PixelFormatDetails
{
    format: PixelFormat,
    bits_per_pixel: u8,
    bytes_per_pixel: u8,
    padding: [2]u8,
    Rmask: u32,
    Gmask: u32,
    Bmask: u32,
    Amask: u32,
    Rbits: u8,
    Gbits: u8,
    Bbits: u8,
    Abits: u8,
    Rshift: u8,
    Gshift: u8,
    Bshift: u8,
    Ashift: u8,
}

struct Palette
{
    ncolors: i32,       /**< number of elements in `colors`. */
    colors: *Color,     /**< an array of colors, `ncolors` long. */
    version: u32,       /**< internal use only, do not touch. */
    refcount: i32       /**< internal use only, do not touch. */
}

struct QuitEvent {
    type: EventType, //*< SDL_EVENT_QUIT */
    reserved: u32,
    timestamp: u64, //*< In nanoseconds, populated using SDL_GetTicksNS() */
}

struct MouseMotionEvent
{
    type: EventType, //**< SDL_EVENT_MOUSE_MOTION */
    reserved: u32,
    timestamp: u64,   //**< In nanoseconds, populated using SDL_GetTicksNS() */
    windowID: u32,  //**< The window with mouse focus, if any */
    which: u32,     //**< The mouse instance id or SDL_TOUCH_MOUSEID */
    state: u32,     //**< The current button state */
    x: f32,         //**< X coordinate, relative to window */
    y: f32,         //**< Y coordinate, relative to window */
    xrel: f32,      //**< The relative motion in the X direction */
    yrel: f32,      //**< The relative motion in the Y direction */
}

struct MouseButtonEvent
{
    type: EventType, //**< SDL_EVENT_MOUSE_MOTION */
    reserved: u32,
    timestamp: u64,   //**< In nanoseconds, populated using SDL_GetTicksNS() */
    windowID: u32,  //**< The window with mouse focus, if any */
    which: u32,     //**< The mouse instance id or SDL_TOUCH_MOUSEID */
    button: u8,     //**< The mouse button index */
    down: u8,       //**< true if the button is pressed */
    clicks: u8,       //**< 1 for single-click, 2 for double-click, etc. */
    padding: u8,
    x: f32,         //**< X coordinate, relative to window */
    y: f32,         //**< Y coordinate, relative to window */
}

union Event {
    type: EventType,
    quit: QuitEvent,
    motion: MouseMotionEvent,            //**< Mouse motion event data */
    button: MouseButtonEvent,            //**< Mouse button event data */
    padding: [128]u8,
}

enum EventType: u32
{
    FIRST     = 0,
    QUIT      = 0x100, //**< User-requested quit */
    MOUSE_MOTION        = 0x400, //**< Mouse moved */
    MOUSE_BUTTON_DOWN   = 0x401, //**< Mouse button pressed */
    MOUSE_BUTTON_UP     = 0x402, //**< Mouse button released */
}

enum GLattr: u32 {
    RED_SIZE,                    
    GREEN_SIZE,                  
    BLUE_SIZE,                   
    ALPHA_SIZE,                  
    BUFFER_SIZE,                 
    DOUBLEBUFFER,                
    DEPTH_SIZE,                  
    STENCIL_SIZE,                
    ACCUM_RED_SIZE,              
    ACCUM_GREEN_SIZE,            
    ACCUM_BLUE_SIZE,             
    ACCUM_ALPHA_SIZE,            
    STEREO,                      
    MULTISAMPLEBUFFERS,          
    MULTISAMPLESAMPLES,          
    ACCELERATED_VISUAL,          
    RETAINED_BACKING,            
    CONTEXT_MAJOR_VERSION,       
    CONTEXT_MINOR_VERSION,       
    CONTEXT_FLAGS,               
    CONTEXT_PROFILE_MASK,        
    SHARE_WITH_CURRENT_CONTEXT,  
    FRAMEBUFFER_SRGB_CAPABLE,    
    CONTEXT_RELEASE_BEHAVIOR,    
    CONTEXT_RESET_NOTIFICATION,  
    CONTEXT_NO_ERROR,
    FLOATBUFFERS,
    EGL_PLATFORM
}


GL_CONTEXT_PROFILE_CORE          :i32 : 0x0001;
GL_CONTEXT_PROFILE_COMPATIBILITY :i32 : 0x0002;
GL_CONTEXT_PROFILE_ES            :i32 : 0x0004;

GL_CONTEXT_DEBUG_FLAG               :i32 : 0x0001;
GL_CONTEXT_FORWARD_COMPATIBLE_FLAG  :i32 : 0x0002;
GL_CONTEXT_ROBUST_ACCESS_FLAG       :i32 : 0x0004;
GL_CONTEXT_RESET_ISOLATION_FLAG     :i32 : 0x0008;

SCANCODE_MASK :: (1<<30);

SCANCODE_TO_KEYCODE :: fn(X: int) -> int {
	return X | SCANCODE_MASK;
}

K_UNKNOWN               :: 0x00000000; //**< 0 */
K_RETURN                :: 0x0000000d; //**< '\r' */
K_ESCAPE                :: 0x0000001b; //**< '\x1B' */
K_BACKSPACE             :: 0x00000008; //**< '\b' */
K_TAB                   :: 0x00000009; //**< '\t' */
K_SPACE                 :: 0x00000020; //**< ' ' */
K_EXCLAIM               :: 0x00000021; //**< '!' */
K_DBLAPOSTROPHE         :: 0x00000022; //**< '"' */
K_HASH                  :: 0x00000023; //**< '#' */
K_DOLLAR                :: 0x00000024; //**< '$' */
K_PERCENT               :: 0x00000025; //**< '%' */
K_AMPERSAND             :: 0x00000026; //**< '&' */
K_APOSTROPHE            :: 0x00000027; //**< '\'' */
K_LEFTPAREN             :: 0x00000028; //**< '(' */
K_RIGHTPAREN            :: 0x00000029; //**< ')' */
K_ASTERISK              :: 0x0000002a; //**< '*' */
K_PLUS                  :: 0x0000002b; //**< '+' */
K_COMMA                 :: 0x0000002c; //**< ',' */
K_MINUS                 :: 0x0000002d; //**< '-' */
K_PERIOD                :: 0x0000002e; //**< '.' */
K_SLASH                 :: 0x0000002f; //**< '/' */
K_0                     :: 0x00000030; //**< '0' */
K_1                     :: 0x00000031; //**< '1' */
K_2                     :: 0x00000032; //**< '2' */
K_3                     :: 0x00000033; //**< '3' */
K_4                     :: 0x00000034; //**< '4' */
K_5                     :: 0x00000035; //**< '5' */
K_6                     :: 0x00000036; //**< '6' */
K_7                     :: 0x00000037; //**< '7' */
K_8                     :: 0x00000038; //**< '8' */
K_9                     :: 0x00000039; //**< '9' */
K_COLON                 :: 0x0000003a; //**< ':' */
K_SEMICOLON             :: 0x0000003b; //**< ';' */
K_LESS                  :: 0x0000003c; //**< '<' */
K_EQUALS                :: 0x0000003d; //**< '=' */
K_GREATER               :: 0x0000003e; //**< '>' */
K_QUESTION              :: 0x0000003f; //**< '?' */
K_AT                    :: 0x00000040; //**< '@' */
K_LEFTBRACKET           :: 0x0000005b; //**< '[' */
K_BACKSLASH             :: 0x0000005c; //**< '\\' */
K_RIGHTBRACKET          :: 0x0000005d; //**< ']' */
K_CARET                 :: 0x0000005e; //**< '^' */
K_UNDERSCORE            :: 0x0000005f; //**< '_' */
K_GRAVE                 :: 0x00000060; //**< '`' */
K_A                     :: 0x00000061; //**< 'a' */
K_B                     :: 0x00000062; //**< 'b' */
K_C                     :: 0x00000063; //**< 'c' */
K_D                     :: 0x00000064; //**< 'd' */
K_E                     :: 0x00000065; //**< 'e' */
K_F                     :: 0x00000066; //**< 'f' */
K_G                     :: 0x00000067; //**< 'g' */
K_H                     :: 0x00000068; //**< 'h' */
K_I                     :: 0x00000069; //**< 'i' */
K_J                     :: 0x0000006a; //**< 'j' */
K_K                     :: 0x0000006b; //**< 'k' */
K_L                     :: 0x0000006c; //**< 'l' */
K_M                     :: 0x0000006d; //**< 'm' */
K_N                     :: 0x0000006e; //**< 'n' */
K_O                     :: 0x0000006f; //**< 'o' */
K_P                     :: 0x00000070; //**< 'p' */
K_Q                     :: 0x00000071; //**< 'q' */
K_R                     :: 0x00000072; //**< 'r' */
K_S                     :: 0x00000073; //**< 's' */
K_T                     :: 0x00000074; //**< 't' */
K_U                     :: 0x00000075; //**< 'u' */
K_V                     :: 0x00000076; //**< 'v' */
K_W                     :: 0x00000077; //**< 'w' */
K_X                     :: 0x00000078; //**< 'x' */
K_Y                     :: 0x00000079; //**< 'y' */
K_Z                     :: 0x0000007a; //**< 'z' */
K_LEFTBRACE             :: 0x0000007b; //**< '{' */
K_PIPE                  :: 0x0000007c; //**< '|' */
K_RIGHTBRACE            :: 0x0000007d; //**< '}' */
K_TILDE                 :: 0x0000007e; //**< '~' */
K_DELETE                :: 0x0000007f; //**< '\x7F' */
K_PLUSMINUS             :: 0x000000b1; //**< '\xB1' */
K_CAPSLOCK              :: 0x40000039; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK) */
K_F1                    :: 0x4000003a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1) */
K_F2                    :: 0x4000003b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2) */
K_F3                    :: 0x4000003c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3) */
K_F4                    :: 0x4000003d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4) */
K_F5                    :: 0x4000003e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5) */
K_F6                    :: 0x4000003f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6) */
K_F7                    :: 0x40000040; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7) */
K_F8                    :: 0x40000041; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8) */
K_F9                    :: 0x40000042; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9) */
K_F10                   :: 0x40000043; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10) */
K_F11                   :: 0x40000044; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11) */
K_F12                   :: 0x40000045; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12) */
K_PRINTSCREEN           :: 0x40000046; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN) */
K_SCROLLLOCK            :: 0x40000047; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK) */
K_PAUSE                 :: 0x40000048; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE) */
K_INSERT                :: 0x40000049; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT) */
K_HOME                  :: 0x4000004a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME) */
K_PAGEUP                :: 0x4000004b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP) */
K_END                   :: 0x4000004d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END) */
K_PAGEDOWN              :: 0x4000004e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN) */
K_RIGHT                 :: 0x4000004f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT) */
K_LEFT                  :: 0x40000050; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT) */
K_DOWN                  :: 0x40000051; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN) */
K_UP                    :: 0x40000052; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP) */
K_NUMLOCKCLEAR          :: 0x40000053; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR) */
K_KP_DIVIDE             :: 0x40000054; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE) */
K_KP_MULTIPLY           :: 0x40000055; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY) */
K_KP_MINUS              :: 0x40000056; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS) */
K_KP_PLUS               :: 0x40000057; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS) */
K_KP_ENTER              :: 0x40000058; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER) */
K_KP_1                  :: 0x40000059; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1) */
K_KP_2                  :: 0x4000005a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2) */
K_KP_3                  :: 0x4000005b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3) */
K_KP_4                  :: 0x4000005c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4) */
K_KP_5                  :: 0x4000005d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5) */
K_KP_6                  :: 0x4000005e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6) */
K_KP_7                  :: 0x4000005f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7) */
K_KP_8                  :: 0x40000060; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8) */
K_KP_9                  :: 0x40000061; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9) */
K_KP_0                  :: 0x40000062; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0) */
K_KP_PERIOD             :: 0x40000063; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD) */
K_APPLICATION           :: 0x40000065; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION) */
K_POWER                 :: 0x40000066; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER) */
K_KP_EQUALS             :: 0x40000067; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS) */
K_F13                   :: 0x40000068; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13) */
K_F14                   :: 0x40000069; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14) */
K_F15                   :: 0x4000006a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15) */
K_F16                   :: 0x4000006b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16) */
K_F17                   :: 0x4000006c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17) */
K_F18                   :: 0x4000006d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18) */
K_F19                   :: 0x4000006e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19) */
K_F20                   :: 0x4000006f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20) */
K_F21                   :: 0x40000070; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21) */
K_F22                   :: 0x40000071; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22) */
K_F23                   :: 0x40000072; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23) */
K_F24                   :: 0x40000073; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24) */
K_EXECUTE               :: 0x40000074; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE) */
K_HELP                  :: 0x40000075; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP) */
K_MENU                  :: 0x40000076; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU) */
K_SELECT                :: 0x40000077; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT) */
K_STOP                  :: 0x40000078; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP) */
K_AGAIN                 :: 0x40000079; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN) */
K_UNDO                  :: 0x4000007a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO) */
K_CUT                   :: 0x4000007b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT) */
K_COPY                  :: 0x4000007c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY) */
K_PASTE                 :: 0x4000007d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE) */
K_FIND                  :: 0x4000007e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND) */
K_MUTE                  :: 0x4000007f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE) */
K_VOLUMEUP              :: 0x40000080; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP) */
K_VOLUMEDOWN            :: 0x40000081; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN) */
K_KP_COMMA              :: 0x40000085; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA) */
K_KP_EQUALSAS400        :: 0x40000086; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400) */
K_ALTERASE              :: 0x40000099; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE) */
K_SYSREQ                :: 0x4000009a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ) */
K_CANCEL                :: 0x4000009b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL) */
K_CLEAR                 :: 0x4000009c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR) */
K_PRIOR                 :: 0x4000009d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR) */
K_RETURN2               :: 0x4000009e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2) */
K_SEPARATOR             :: 0x4000009f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR) */
K_OUT                   :: 0x400000a0; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT) */
K_OPER                  :: 0x400000a1; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER) */
K_CLEARAGAIN            :: 0x400000a2; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN) */
K_CRSEL                 :: 0x400000a3; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL) */
K_EXSEL                 :: 0x400000a4; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL) */
K_KP_00                 :: 0x400000b0; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00) */
K_KP_000                :: 0x400000b1; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000) */
K_THOUSANDSSEPARATOR    :: 0x400000b2; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR) */
K_DECIMALSEPARATOR      :: 0x400000b3; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR) */
K_CURRENCYUNIT          :: 0x400000b4; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT) */
K_CURRENCYSUBUNIT       :: 0x400000b5; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT) */
K_KP_LEFTPAREN          :: 0x400000b6; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN) */
K_KP_RIGHTPAREN         :: 0x400000b7; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN) */
K_KP_LEFTBRACE          :: 0x400000b8; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE) */
K_KP_RIGHTBRACE         :: 0x400000b9; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE) */
K_KP_TAB                :: 0x400000ba; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB) */
K_KP_BACKSPACE          :: 0x400000bb; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE) */
K_KP_A                  :: 0x400000bc; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A) */
K_KP_B                  :: 0x400000bd; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B) */
K_KP_C                  :: 0x400000be; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C) */
K_KP_D                  :: 0x400000bf; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D) */
K_KP_E                  :: 0x400000c0; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E) */
K_KP_F                  :: 0x400000c1; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F) */
K_KP_XOR                :: 0x400000c2; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR) */
K_KP_POWER              :: 0x400000c3; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER) */
K_KP_PERCENT            :: 0x400000c4; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT) */
K_KP_LESS               :: 0x400000c5; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS) */
K_KP_GREATER            :: 0x400000c6; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER) */
K_KP_AMPERSAND          :: 0x400000c7; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND) */
K_KP_DBLAMPERSAND       :: 0x400000c8; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND) */
K_KP_VERTICALBAR        :: 0x400000c9; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR) */
K_KP_DBLVERTICALBAR     :: 0x400000ca; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR) */
K_KP_COLON              :: 0x400000cb; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON) */
K_KP_HASH               :: 0x400000cc; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH) */
K_KP_SPACE              :: 0x400000cd; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE) */
K_KP_AT                 :: 0x400000ce; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT) */
K_KP_EXCLAM             :: 0x400000cf; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM) */
K_KP_MEMSTORE           :: 0x400000d0; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE) */
K_KP_MEMRECALL          :: 0x400000d1; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL) */
K_KP_MEMCLEAR           :: 0x400000d2; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR) */
K_KP_MEMADD             :: 0x400000d3; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD) */
K_KP_MEMSUBTRACT        :: 0x400000d4; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT) */
K_KP_MEMMULTIPLY        :: 0x400000d5; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY) */
K_KP_MEMDIVIDE          :: 0x400000d6; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE) */
K_KP_PLUSMINUS          :: 0x400000d7; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS) */
K_KP_CLEAR              :: 0x400000d8; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR) */
K_KP_CLEARENTRY         :: 0x400000d9; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY) */
K_KP_BINARY             :: 0x400000da; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY) */
K_KP_OCTAL              :: 0x400000db; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL) */
K_KP_DECIMAL            :: 0x400000dc; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL) */
K_KP_HEXADECIMAL        :: 0x400000dd; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL) */
K_LCTRL                 :: 0x400000e0; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL) */
K_LSHIFT                :: 0x400000e1; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT) */
K_LALT                  :: 0x400000e2; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT) */
K_LGUI                  :: 0x400000e3; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI) */
K_RCTRL                 :: 0x400000e4; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL) */
K_RSHIFT                :: 0x400000e5; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT) */
K_RALT                  :: 0x400000e6; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT) */
K_RGUI                  :: 0x400000e7; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI) */
K_MODE                  :: 0x40000101; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE) */
K_SLEEP                 :: 0x40000102; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP) */
K_WAKE                  :: 0x40000103; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WAKE) */
K_CHANNEL_INCREMENT     :: 0x40000104; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_INCREMENT) */
K_CHANNEL_DECREMENT     :: 0x40000105; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_DECREMENT) */
K_MEDIA_PLAY            :: 0x40000106; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY) */
K_MEDIA_PAUSE           :: 0x40000107; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PAUSE) */
K_MEDIA_RECORD          :: 0x40000108; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_RECORD) */
K_MEDIA_FAST_FORWARD    :: 0x40000109; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_FAST_FORWARD) */
K_MEDIA_REWIND          :: 0x4000010a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_REWIND) */
K_MEDIA_NEXT_TRACK      :: 0x4000010b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_NEXT_TRACK) */
K_MEDIA_PREVIOUS_TRACK  :: 0x4000010c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PREVIOUS_TRACK) */
K_MEDIA_STOP            :: 0x4000010d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_STOP) */
K_MEDIA_EJECT           :: 0x4000010e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_EJECT) */
K_MEDIA_PLAY_PAUSE      :: 0x4000010f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY_PAUSE) */
K_MEDIA_SELECT          :: 0x40000110; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_SELECT) */
K_AC_NEW                :: 0x40000111; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_NEW) */
K_AC_OPEN               :: 0x40000112; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_OPEN) */
K_AC_CLOSE              :: 0x40000113; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_CLOSE) */
K_AC_EXIT               :: 0x40000114; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_EXIT) */
K_AC_SAVE               :: 0x40000115; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SAVE) */
K_AC_PRINT              :: 0x40000116; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PRINT) */
K_AC_PROPERTIES         :: 0x40000117; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PROPERTIES) */
K_AC_SEARCH             :: 0x40000118; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH) */
K_AC_HOME               :: 0x40000119; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME) */
K_AC_BACK               :: 0x4000011a; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK) */
K_AC_FORWARD            :: 0x4000011b; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD) */
K_AC_STOP               :: 0x4000011c; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP) */
K_AC_REFRESH            :: 0x4000011d; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH) */
K_AC_BOOKMARKS          :: 0x4000011e; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS) */
K_SOFTLEFT              :: 0x4000011f; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT) */
K_SOFTRIGHT             :: 0x40000120; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT) */
K_CALL                  :: 0x40000121; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL) */
K_ENDCALL               :: 0x40000122; //**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL) */

enum Scancode
{
    UNKNOWN = 0,

    //**
    // *  \name Usage page 0x07
    // *
    // *  These values are from usage page 0x07 (USB keyboard page).
    // */
    //* @{ */

    A = 4,
    B = 5,
    C = 6,
    D = 7,
    E = 8,
    F = 9,
    G = 10,
    H = 11,
    I = 12,
    J = 13,
    K = 14,
    L = 15,
    M = 16,
    N = 17,
    O = 18,
    P = 19,
    Q = 20,
    R = 21,
    S = 22,
    T = 23,
    U = 24,
    V = 25,
    W = 26,
    X = 27,
    Y = 28,
    Z = 29,

    _1 = 30,
    _2 = 31,
    _3 = 32,
    _4 = 33,
    _5 = 34,
    _6 = 35,
    _7 = 36,
    _8 = 37,
    _9 = 38,
    _0 = 39,

    RETURN = 40,
    ESCAPE = 41,
    BACKSPACE = 42,
    TAB = 43,
    SPACE = 44,

    MINUS = 45,
    EQUALS = 46,
    LEFTBRACKET = 47,
    RIGHTBRACKET = 48,
    BACKSLASH = 49, ///**< Located at the lower left of the return
                    // *   key on ISO keyboards and at the right end
                    // *   of the QWERTY row on ANSI keyboards.
                    // *   Produces REVERSE SOLIDUS (backslash) and
                    // *   VERTICAL LINE in a US layout, REVERSE
                    // *   SOLIDUS and VERTICAL LINE in a UK Mac
                    // *   layout, NUMBER SIGN and TILDE in a UK
                    // *   Windows layout, DOLLAR SIGN and POUND SIGN
                    // *   in a Swiss German layout, NUMBER SIGN and
                    // *   APOSTROPHE in a German layout, GRAVE
                    // *   ACCENT and POUND SIGN in a French Mac
                    // *   layout, and ASTERISK and MICRO SIGN in a
                    // *   French Windows layout.
                    // */
    NONUSHASH = 50, ///**< ISO USB keyboards actually use this code
                    // *   instead of 49 for the same key, but all
                    // *   OSes I've seen treat the two codes
                    // *   identically. So, as an implementor, unless
                    // *   your keyboard generates both of those
                    // *   codes and your OS treats them differently,
                    // *   you should generate SDL_SCANCODE_BACKSLASH
                    // *   instead of this code. As a user, you
                    // *   should not rely on this code because SDL
                    // *   will never generate it with most (all?)
                    // *   keyboards.
                    // */
    SEMICOLON = 51,
    APOSTROPHE = 52,
    GRAVE = 53, ///**< Located in the top left corner (on both ANSI
                // *   and ISO keyboards). Produces GRAVE ACCENT and
                // *   TILDE in a US Windows layout and in US and UK
                // *   Mac layouts on ANSI keyboards, GRAVE ACCENT
                // *   and NOT SIGN in a UK Windows layout, SECTION
                // *   SIGN and PLUS-MINUS SIGN in US and UK Mac
                // *   layouts on ISO keyboards, SECTION SIGN and
                // *   DEGREE SIGN in a Swiss German layout (Mac:
                // *   only on ISO keyboards), CIRCUMFLEX ACCENT and
                // *   DEGREE SIGN in a German layout (Mac: only on
                // *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
                // *   French Windows layout, COMMERCIAL AT and
                // *   NUMBER SIGN in a French Mac layout on ISO
                // *   keyboards, and LESS-THAN SIGN and GREATER-THAN
                // *   SIGN in a Swiss German, German, or French Mac
                // *   layout on ANSI keyboards.
                // */
    COMMA = 54,
    PERIOD = 55,
    SLASH = 56,

    CAPSLOCK = 57,

    F1 = 58,
    F2 = 59,
    F3 = 60,
    F4 = 61,
    F5 = 62,
    F6 = 63,
    F7 = 64,
    F8 = 65,
    F9 = 66,
    F10 = 67,
    F11 = 68,
    F12 = 69,

    PRINTSCREEN = 70,
    SCROLLLOCK = 71,
    PAUSE = 72,
    INSERT = 73, ///**< insert on PC, help on some Mac keyboards (but
                      //does send code 73, not 117) */
    HOME = 74,
    PAGEUP = 75,
    DELETE = 76,
    END = 77,
    PAGEDOWN = 78,
    RIGHT = 79,
    LEFT = 80,
    DOWN = 81,
    UP = 82,

    NUMLOCKCLEAR = 83, ///**< num lock on PC, clear on Mac keyboards
                       // */
    KP_DIVIDE = 84,
    KP_MULTIPLY = 85,
    KP_MINUS = 86,
    KP_PLUS = 87,
    KP_ENTER = 88,
    KP_1 = 89,
    KP_2 = 90,
    KP_3 = 91,
    KP_4 = 92,
    KP_5 = 93,
    KP_6 = 94,
    KP_7 = 95,
    KP_8 = 96,
    KP_9 = 97,
    KP_0 = 98,
    KP_PERIOD = 99,

    NONUSBACKSLASH = 100, ///**< This is the additional key that ISO
                          // *   keyboards have over ANSI ones,
                          // *   located between left shift and Y.
                          // *   Produces GRAVE ACCENT and TILDE in a
                          // *   US or UK Mac layout, REVERSE SOLIDUS
                          // *   (backslash) and VERTICAL LINE in a
                          // *   US or UK Windows layout, and
                          // *   LESS-THAN SIGN and GREATER-THAN SIGN
                          // *   in a Swiss German, German, or French
                          // *   layout. */
    APPLICATION = 101, ///**< windows contextual menu, compose */
    POWER = 102, ///**< The USB document says this is a status flag,
                 // *   not a physical key - but some Mac keyboards
                 // *   do have a power key. */
    KP_EQUALS = 103,
    F13 = 104,
    F14 = 105,
    F15 = 106,
    F16 = 107,
    F17 = 108,
    F18 = 109,
    F19 = 110,
    F20 = 111,
    F21 = 112,
    F22 = 113,
    F23 = 114,
    F24 = 115,
    EXECUTE = 116,
    HELP = 117,    ///**< AL Integrated Help Center */
    MENU = 118,    ///**< Menu (show menu) */
    SELECT = 119,
    STOP = 120,    ///**< AC Stop */
    AGAIN = 121,   ///**< AC Redo/Repeat */
    UNDO = 122,    ///**< AC Undo */
    CUT = 123,     ///**< AC Cut */
    COPY = 124,    ///**< AC Copy */
    PASTE = 125,   ///**< AC Paste */
    FIND = 126,    ///**< AC Find */
    MUTE = 127,
    VOLUMEUP = 128,
    VOLUMEDOWN = 129,
//* not sure whether there's a reason to enable these */
//*     LOCKINGCAPSLOCK = 130,  */
//*     LOCKINGNUMLOCK = 131, */
//*     LOCKINGSCROLLLOCK = 132, */
    KP_COMMA = 133,
    KP_EQUALSAS400 = 134,

    INTERNATIONAL1 = 135, ///**< used on Asian keyboards, see
                          //     footnotes in USB doc */
    INTERNATIONAL2 = 136,
    INTERNATIONAL3 = 137, ///**< Yen */
    INTERNATIONAL4 = 138,
    INTERNATIONAL5 = 139,
    INTERNATIONAL6 = 140,
    INTERNATIONAL7 = 141,
    INTERNATIONAL8 = 142,
    INTERNATIONAL9 = 143,
    LANG1 = 144, ///**< Hangul/English toggle */
    LANG2 = 145, ///**< Hanja conversion */
    LANG3 = 146, ///**< Katakana */
    LANG4 = 147, ///**< Hiragana */
    LANG5 = 148, ///**< Zenkaku/Hankaku */
    LANG6 = 149, ///**< reserved */
    LANG7 = 150, ///**< reserved */
    LANG8 = 151, ///**< reserved */
    LANG9 = 152, ///**< reserved */

    ALTERASE = 153,    ///**< Erase-Eaze */
    SYSREQ = 154,
    CANCEL = 155,      ///**< AC Cancel */
    CLEAR = 156,
    PRIOR = 157,
    RETURN2 = 158,
    SEPARATOR = 159,
    OUT = 160,
    OPER = 161,
    CLEARAGAIN = 162,
    CRSEL = 163,
    EXSEL = 164,

    KP_00 = 176,
    KP_000 = 177,
    THOUSANDSSEPARATOR = 178,
    DECIMALSEPARATOR = 179,
    CURRENCYUNIT = 180,
    CURRENCYSUBUNIT = 181,
    KP_LEFTPAREN = 182,
    KP_RIGHTPAREN = 183,
    KP_LEFTBRACE = 184,
    KP_RIGHTBRACE = 185,
    KP_TAB = 186,
    KP_BACKSPACE = 187,
    KP_A = 188,
    KP_B = 189,
    KP_C = 190,
    KP_D = 191,
    KP_E = 192,
    KP_F = 193,
    KP_XOR = 194,
    KP_POWER = 195,
    KP_PERCENT = 196,
    KP_LESS = 197,
    KP_GREATER = 198,
    KP_AMPERSAND = 199,
    KP_DBLAMPERSAND = 200,
    KP_VERTICALBAR = 201,
    KP_DBLVERTICALBAR = 202,
    KP_COLON = 203,
    KP_HASH = 204,
    KP_SPACE = 205,
    KP_AT = 206,
    KP_EXCLAM = 207,
    KP_MEMSTORE = 208,
    KP_MEMRECALL = 209,
    KP_MEMCLEAR = 210,
    KP_MEMADD = 211,
    KP_MEMSUBTRACT = 212,
    KP_MEMMULTIPLY = 213,
    KP_MEMDIVIDE = 214,
    KP_PLUSMINUS = 215,
    KP_CLEAR = 216,
    KP_CLEARENTRY = 217,
    KP_BINARY = 218,
    KP_OCTAL = 219,
    KP_DECIMAL = 220,
    KP_HEXADECIMAL = 221,

    LCTRL = 224,
    LSHIFT = 225,
    LALT = 226, ///**< alt, option */
    LGUI = 227, ///**< windows, command (apple), meta */
    RCTRL = 228,
    RSHIFT = 229,
    RALT = 230, ///**< alt gr, option */
    RGUI = 231, ///**< windows, command (apple), meta */

    MODE = 257,    ///**< I'm not sure if this is really not covered
                   //              *   by any of the above, but since there's a
                   //              *   special SDL_KMOD_MODE for it I'm adding it here
                   //              */

    ///* @} *//* Usage page 0x07 */

    ///**
    // *  \name Usage page 0x0C
    // *
    // *  These values are mapped from usage page 0x0C (USB consumer page).
    // *
    // *  There are way more keys in the spec than we can represent in the
    // *  current scancode range, so pick the ones that commonly come up in
    // *  real world usage.
    // */
    ///* @{ */

    SLEEP = 258,                   ///**< Sleep */
    WAKE = 259,                    ///**< Wake */

    CHANNEL_INCREMENT = 260,       ///**< Channel Increment */
    CHANNEL_DECREMENT = 261,       ///**< Channel Decrement */

    MEDIA_PLAY = 262,          ///**< Play */
    MEDIA_PAUSE = 263,         ///**< Pause */
    MEDIA_RECORD = 264,        ///**< Record */
    MEDIA_FAST_FORWARD = 265,  ///**< Fast Forward */
    MEDIA_REWIND = 266,        ///**< Rewind */
    MEDIA_NEXT_TRACK = 267,    ///**< Next Track */
    MEDIA_PREVIOUS_TRACK = 268,// /**< Previous Track */
    MEDIA_STOP = 269,          ///**< Stop */
    MEDIA_EJECT = 270,         ///**< Eject */
    MEDIA_PLAY_PAUSE = 271,    ///**< Play / Pause */
    MEDIA_SELECT = 272,        ///* Media Select */

    AC_NEW = 273,              ///**< AC New */
    AC_OPEN = 274,             ///**< AC Open */
    AC_CLOSE = 275,            ///**< AC Close */
    AC_EXIT = 276,             ///**< AC Exit */
    AC_SAVE = 277,             ///**< AC Save */
    AC_PRINT = 278,            ///**< AC Print */
    AC_PROPERTIES = 279,       ///**< AC Properties */

    AC_SEARCH = 280,           ///**< AC Search */
    AC_HOME = 281,             ///**< AC Home */
    AC_BACK = 282,             ///**< AC Back */
    AC_FORWARD = 283,          ///**< AC Forward */
    AC_STOP = 284,             ///**< AC Stop */
    AC_REFRESH = 285,          ///**< AC Refresh */
    AC_BOOKMARKS = 286,        ///**< AC Bookmarks */

    ///* @} *//* Usage page 0x0C */


    ///**
    // *  \name Mobile keys
    // *
    // *  These are values that are often used on mobile phones.
    // */
    ///* @{ */

    SOFTLEFT = 287, ///**< Usually situated below the display on phones and
                    //     used as a multi-function feature key for selecting
                    //     a software defined function shown on the bottom left
                    //     of the display. */
    SOFTRIGHT = 288,// /**< Usually situated below the display on phones and
                    //      used as a multi-function feature key for selecting
                    //      a software defined function shown on the bottom right
                    //      of the display. */
    CALL = 289,     ///**< Used for accepting phone calls. */
    ENDCALL = 290,  ///**< Used for rejecting phone calls. */

    ///* @} *//* Mobile keys */

    ///* Add any other keys here. */

    RESERVED = 400,    ///**< 400-500 reserved for dynamic keycodes */

    COUNT = 512 ///**< not a key, just marks the number of scancodes for array bounds */
}


enum PixelFormat: u32 {
    UNKNOWN = 0,
    INDEX1LSB = 0x11100100,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0), */
    INDEX1MSB = 0x11200100,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0), */
    INDEX2LSB = 0x1c100200,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_4321, 0, 2, 0), */
    INDEX2MSB = 0x1c200200,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_1234, 0, 2, 0), */
    INDEX4LSB = 0x12100400,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0), */
    INDEX4MSB = 0x12200400,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0), */
    INDEX8 = 0x13000801,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1), */
    RGB332 = 0x14110801,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1), */
    XRGB4444 = 0x15120c02,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2), */
    XBGR4444 = 0x15520c02,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_4444, 12, 2), */
    XRGB1555 = 0x15130f02,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2), */
    XBGR1555 = 0x15530f02,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2), */
    ARGB4444 = 0x15321002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2), */
    RGBA4444 = 0x15421002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2), */
    ABGR4444 = 0x15721002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2), */
    BGRA4444 = 0x15821002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2), */
    ARGB1555 = 0x15331002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2), */
    RGBA5551 = 0x15441002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2), */
    ABGR1555 = 0x15731002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2), */
    BGRA5551 = 0x15841002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2), */
    RGB565 = 0x15151002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2), */
    BGR565 = 0x15551002,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2), */
    RGB24 = 0x17101803,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3), */
    BGR24 = 0x17401803,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3), */
    XRGB8888 = 0x16161804,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4), */
    RGBX8888 = 0x16261804,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4), */
    XBGR8888 = 0x16561804,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4), */
    BGRX8888 = 0x16661804,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4), */
    ARGB8888 = 0x16362004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4), */
    RGBA8888 = 0x16462004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4), */
    ABGR8888 = 0x16762004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4), */
    BGRA8888 = 0x16862004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4), */
    XRGB2101010 = 0x16172004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
    XBGR2101010 = 0x16572004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
    ARGB2101010 = 0x16372004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
    ABGR2101010 = 0x16772004,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
    RGB48 = 0x18103006,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
    BGR48 = 0x18403006,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
    RGBA64 = 0x18204008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
    ARGB64 = 0x18304008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
    BGRA64 = 0x18504008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
    ABGR64 = 0x18604008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
    RGB48_FLOAT = 0x1a103006,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
    BGR48_FLOAT = 0x1a403006,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
    RGBA64_FLOAT = 0x1a204008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
    ARGB64_FLOAT = 0x1a304008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
    BGRA64_FLOAT = 0x1a504008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
    ABGR64_FLOAT = 0x1a604008,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
    RGB96_FLOAT = 0x1b10600c,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGB, 0, 96, 12), */
    BGR96_FLOAT = 0x1b40600c,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGR, 0, 96, 12), */
    RGBA128_FLOAT = 0x1b208010,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGBA, 0, 128, 16), */
    ARGB128_FLOAT = 0x1b308010,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ARGB, 0, 128, 16), */
    BGRA128_FLOAT = 0x1b508010,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGRA, 0, 128, 16), */
    ABGR128_FLOAT = 0x1b608010,
        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ABGR, 0, 128, 16), */

    YV12 = 0x32315659,      /**< Planar mode: Y + V + U  (3 planes) */
        /* SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'), */
    IYUV = 0x56555949,      /**< Planar mode: Y + U + V  (3 planes) */
        /* SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'), */
    YUY2 = 0x32595559,      /**< Packed mode: Y0+U0+Y1+V0 (1 plane) */
        /* SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'), */
    UYVY = 0x59565955,      /**< Packed mode: U0+Y0+V0+Y1 (1 plane) */
        /* SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'), */
    YVYU = 0x55595659,      /**< Packed mode: Y0+V0+Y1+U0 (1 plane) */
        /* SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U'), */
    NV12 = 0x3231564e,      /**< Planar mode: Y + U/V interleaved  (2 planes) */
        /* SDL_DEFINE_PIXELFOURCC('N', 'V', '1', '2'), */
    NV21 = 0x3132564e,      /**< Planar mode: Y + V/U interleaved  (2 planes) */
        /* SDL_DEFINE_PIXELFOURCC('N', 'V', '2', '1'), */
    P010 = 0x30313050,      /**< Planar mode: Y + U/V interleaved  (2 planes) */
        /* SDL_DEFINE_PIXELFOURCC('P', '0', '1', '0'), */
    EXTERNAL_OES = 0x2053454,     /**< Android video texture format */
        /* SDL_DEFINE_PIXELFOURCC('O', 'E', 'S', ' ') */

    MJPG = 0x47504a4d,     /**< Motion JPEG */
        /* SDL_DEFINE_PIXELFOURCC('M', 'J', 'P', 'G') */

    RGBA32 = 0x16362004,
    ARGB32 = 0x16862004,
    BGRA32 = 0x16362004,
    ABGR32 = 0x16462004,
    RGBX32 = 0x16561804,
    XRGB32 = 0x16661804,
    BGRX32 = 0x16161804,
    XBGR32 = 0x16261804,
}

enum TextureAccess
{
    STATIC,    /**< Changes rarely, not lockable */
    STREAMING, /**< Changes frequently, lockable */
    TARGET     /**< Texture can be used as a render target */
}

//
// 
//                  Textures & Surfaces
// 
// 

CreateTexture :: fn #link="SDL_CreateTexture"(renderer: *Renderer, format: PixelFormat, access: TextureAccess, w: i32, h: i32) -> ?*Texture;
CreateTextureFromSurface :: fn #link="SDL_CreateTextureFromSurface"(renderer: *Renderer, surface: *Surface) -> ?*Texture;
LockTextureToSurface :: fn #link="SDL_LockTextureToSurface"(texture: *Texture, rect: *Rect, surface: **Surface) -> bool;
UnlockTexture :: fn #link="SDL_UnlockTexture"(texture: *Texture);
CreateSurface :: fn #link="SDL_CreateSurface"(width: i32, height: i32, format: PixelFormat) -> ?*Surface;
FillSurfaceRect :: fn #link="SDL_FillSurfaceRect"(dst: *Surface, rect: *Rect, color: u32) -> bool;
MapRGB :: fn #link="SDL_MapRGB"(format: *PixelFormatDetails, palette: ?*Palette, r: u8, g: u8, b: u8) -> u32;
GetPixelFormatDetails :: fn #link="SDL_GetPixelFormatDetails"(format: PixelFormat) -> ?*PixelFormatDetails;

//
// 
//                  Renderer
// 
// 

SetRenderVSync :: fn #link="SDL_SetRenderVSync"(renderer: *Renderer, vsync: i32) -> bool;

SetRenderDrawColor :: fn #link="SDL_SetRenderDrawColor"(renderer: *Renderer, r: u8, g: u8, b: u8, a: u8) -> bool;

RenderClear :: fn #link="SDL_RenderClear"(renderer: *Renderer) -> bool;

RenderRect :: fn #link="SDL_RenderRect"(renderer: *Renderer, rect: ?*FRect) -> bool;
RenderFillRect :: fn #link="SDL_RenderFillRect"(renderer: *Renderer, rect: ?*FRect) -> bool;

RenderTexture :: fn #link="SDL_RenderTexture"(renderer: *Renderer, texture: *Texture, src: ?*FRect, dst: ?*FRect) -> bool;

RenderPresent :: fn #link="SDL_RenderPresent"(renderer: *Renderer) -> bool;



